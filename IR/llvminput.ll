; ModuleID = '<swift-imported-modules>'
source_filename = "<swift-imported-modules>"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

%struct._SwiftEmptyArrayStorage = type { %struct.HeapObject, %struct._SwiftArrayBodyStorage }
%struct.HeapObject = type { %struct.HeapMetadata*, %struct.InlineRefCountsPlaceholder }
%struct.HeapMetadata = type opaque
%struct.InlineRefCountsPlaceholder = type { i64 }
%struct._SwiftArrayBodyStorage = type { i64, i64 }
%swift.protocol_conformance_descriptor = type { i32, i32, i32, i32 }
%swift.type = type { i64 }
%swift.full_existential_type = type { i8**, %swift.type }
%swift.protocol_requirement = type { i32, i32 }
%swift.protocol = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32 }
%swift.method_descriptor = type { i32, i32 }
%swift.vwtable = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i32, i32 }
%swift.type_metadata_record = type { i32 }
%swift.opaque = type opaque
%swift.bridge = type opaque
%swift.metadata_response = type { %swift.type*, i64 }
%swift.refcounted = type { %swift.type*, i64 }
%swift.error = type opaque
%TSq.16 = type <{}>
%T10BufferView07MutableaB0V = type <{ %T10BufferView0aB5IndexV, %TSi }>
%T10BufferView0aB5IndexV = type <{ %TSV }>
%TSV = type <{ i8* }>
%TSi = type <{ i64 }>
%swift.noescape.function = type { i8*, %swift.opaque* }
%T10BufferView0aB8IteratorV = type <{ %TSV, %TSV }>
%Ts28__ContiguousArrayStorageBaseC = type opaque
%Ts12Zip2SequenceV8IteratorV = type <{ %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV, %TSb }>
%TSb = type <{ i1 }>
%Ts12Zip2SequenceV = type <{ %T10BufferViewAAV, %T10BufferViewAAV }>
%T10BufferViewAAV = type <{ %T10BufferView0aB5IndexV, %TSi }>
%TSq.2 = type <{}>
%Ts12Zip2SequenceV.34 = type <{}>
%Ts12Zip2SequenceV8IteratorV.35 = type <{}>
%TSq.36 = type <{}>
%swift.tuple_type = type { %swift.type, i64, i8*, [0 x %swift.tuple_element_type] }
%swift.tuple_element_type = type { %swift.type*, i32 }
%TSn = type <{ %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV }>
%TSn.19 = type <{}>
%TSp = type <{ i8* }>
%TSr = type <{ %TSq.3, %TSi }>
%TSq.3 = type <{ [8 x i8] }>
%TSq.22 = type <{ [8 x i8], [1 x i8] }>
%TSq.23 = type <{ [8 x i8] }>
%TSq.24 = type <{}>
%TSn.4 = type <{}>
%TSN.42 = type <{ %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV }>
%TSN = type <{}>
%TSq.25 = type <{}>
%TSq.5 = type <{}>
%TSq.40 = type <{}>
%TSiSg = type <{ [8 x i8], [1 x i8] }>
%TSq.6 = type <{}>
%TSv = type <{ i8* }>
%TSq.41 = type <{}>
%TSP = type <{ i8* }>
%TSR.26 = type <{ %TSq.27, %TSi }>
%TSq.27 = type <{ [8 x i8] }>
%TSn.7 = type <{ %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV }>
%TSq.32 = type <{}>
%Ts6HasherV = type <{ %Ts6HasherV5_CoreV }>
%Ts6HasherV5_CoreV = type <{ %Ts6HasherV11_TailBufferV, %Ts6HasherV6_StateV }>
%Ts6HasherV11_TailBufferV = type <{ %Ts6UInt64V }>
%Ts6UInt64V = type <{ i64 }>
%Ts6HasherV6_StateV = type <{ %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V, %Ts6UInt64V }>
%T10BufferView09OutputRawA0V = type <{ %TSv, %TSi }>
%TSq = type <{}>
%TSq.8 = type <{ [16 x i8] }>
%TSq.9 = type <{}>
%TSR = type <{ %TSq.10, %TSi }>
%TSq.10 = type <{ [8 x i8] }>
%TSr.11 = type <{ %TSq.12, %TSi }>
%TSq.12 = type <{ [8 x i8] }>
%swift.type_descriptor = type opaque

@_swiftEmptyArrayStorage = external global %struct._SwiftEmptyArrayStorage, align 8
@".str.35.BufferView/BufferView+Mutable.swift" = private unnamed_addr constant [36 x i8] c"BufferView/BufferView+Mutable.swift\00"
@".str.11.Fatal error" = private unnamed_addr constant [12 x i8] c"Fatal error\00"
@"$sSnyxGSlsSxRzSZ6StrideRpzrlMc" = external global %swift.protocol_conformance_descriptor, align 4
@"$sS2iSZsWL" = linkonce_odr hidden global i8** null, align 8
@"$sSiSZsMc" = external global %swift.protocol_conformance_descriptor, align 4
@"$sSiN" = external global %swift.type, align 8
@"$sytN" = external global %swift.full_existential_type
@"$sSTTL" = external global %swift.protocol_requirement, align 4
@"$s8IteratorSTTl" = external global %swift.protocol_requirement, align 4
@"$sST8IteratorST_StTn" = external global %swift.protocol_requirement, align 4
@".str.27.BufferView/BufferView.swift" = private unnamed_addr constant [28 x i8] c"BufferView/BufferView.swift\00"
@"$s7ElementSTTl" = external global %swift.protocol_requirement, align 4
@".str.11.base count " = private unnamed_addr constant [12 x i8] c"base count \00"
@"$sSryxGSlsMc" = external global %swift.protocol_conformance_descriptor, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSTAA8IteratorST_St" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAA8IteratorST_StWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSTAA8IteratorST_St", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic x" = linkonce_odr hidden constant <{ [1 x i8], i8 }> <{ [1 x i8] c"x", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____yxG 10BufferView0aB8IteratorV" = linkonce_odr hidden constant <{ i8, i32, [3 x i8], i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV", i32 0, i32 1) to i64)) to i32), [3 x i8] c"yxG", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____ 10BufferView07MutableaB0V" = linkonce_odr hidden constant <{ i8, i32, i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, i8 }>, <{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V", i32 0, i32 1) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sST" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sST", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@0 = private constant [8 x i8] c"Element\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@1 = private constant [9 x i8] c"Iterator\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView07MutableaB0VyxGSTAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sST" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA", i32 0, i32 1) to i64)) to i32), i32 2, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([9 x i8]* @1 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA", i32 0, i32 7) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSTMp" = external global %swift.protocol, align 4
@"got.$sSTMp" = private unnamed_addr constant %swift.protocol* @"$sSTMp"
@"got.$sST8IteratorST_StTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sST8IteratorST_StTn"
@"got.$s7ElementSTTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s7ElementSTTl"
@"got.$s8IteratorSTTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s8IteratorSTTl"
@"$sST12makeIterator0B0QzyFTq" = external global %swift.method_descriptor, align 4
@"got.$sST12makeIterator0B0QzyFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST12makeIterator0B0QzyFTq"
@"$sST19underestimatedCountSivgTq" = external global %swift.method_descriptor, align 4
@"got.$sST19underestimatedCountSivgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST19underestimatedCountSivgTq"
@"$sST31_customContainsEquatableElementySbSg0D0QzFTq" = external global %swift.method_descriptor, align 4
@"got.$sST31_customContainsEquatableElementySbSg0D0QzFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST31_customContainsEquatableElementySbSg0D0QzFTq"
@"$sST22_copyToContiguousArrays0cD0Vy7ElementQzGyFTq" = external global %swift.method_descriptor, align 4
@"got.$sST22_copyToContiguousArrays0cD0Vy7ElementQzGyFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST22_copyToContiguousArrays0cD0Vy7ElementQzGyFTq"
@"$sST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTq"
@"$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTq" = external global %swift.method_descriptor, align 4
@"got.$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTq"
@"$s10BufferView07MutableaB0VyxGSTAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView07MutableaB0VyxGSTAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSTMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 9, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sST8IteratorST_StTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSTAA8IteratorST_St", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s7ElementSTTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [1 x i8], i8 }>, <{ [1 x i8], i8 }>* @"symbolic x", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s8IteratorSTTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST12makeIterator0B0QzyFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB8IteratorV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST12makeIterator0E0QzyFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST19underestimatedCountSivgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST19underestimatedCountSivgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST31_customContainsEquatableElementySbSg0D0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8 (%swift.opaque*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST31_customContainsEquatableElementySbSg0G0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST22_copyToContiguousArrays0cD0Vy7ElementQzGyFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (%Ts28__ContiguousArrayStorageBaseC* (%T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST22_copyToContiguousArrays0fG0Vy7ElementQzGyFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB8IteratorV*, i64, i64, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 20) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 21) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, i8*, %swift.opaque*, %swift.type*, %T10BufferView07MutableaB0V*, %swift.error**, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSTAAST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 22) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VyxGSTAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc", i32 0, i32 26) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSlAAST" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASTWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAAST", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSlAA5IndexSl_SL" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAA5IndexSl_SLWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA5IndexSl_SL", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSlAA7IndicesSl_Sl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAA7IndicesSl_SlWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA7IndicesSl_Sl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSlAA11SubSequenceSl_Sl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAA11SubSequenceSl_SlWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA11SubSequenceSl_Sl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____yxG 10BufferView0aB5IndexV" = linkonce_odr hidden constant <{ i8, i32, [3 x i8], i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV", i32 0, i32 1) to i64)) to i32), [3 x i8] c"yxG", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____yxG 10BufferView07MutableaB0V" = linkonce_odr hidden constant <{ i8, i32, [3 x i8], i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V", i32 0, i32 1) to i64)) to i32), [3 x i8] c"yxG", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic Sny_____yxGG 10BufferView0aB5IndexV" = linkonce_odr hidden constant <{ [3 x i8], i8, i32, [4 x i8], i8 }> <{ [3 x i8] c"Sny", i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ [3 x i8], i8, i32, [4 x i8], i8 }>, <{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV", i32 0, i32 2) to i64)) to i32), [4 x i8] c"yxGG", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSl" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSl", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@2 = private constant [6 x i8] c"Index\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@3 = private constant [12 x i8] c"SubSequence\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@4 = private constant [8 x i8] c"Indices\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView07MutableaB0VyxGSlAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 1) to i64)) to i32), i32 5, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([9 x i8]* @1 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 11) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 12) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA", i32 0, i32 13) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSlMp" = external global %swift.protocol, align 4
@"got.$sSlMp" = private unnamed_addr constant %swift.protocol* @"$sSlMp"
@"$sSlSTTb" = external global %swift.protocol_requirement, align 4
@"got.$sSlSTTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSlSTTb"
@"$sSl5IndexSl_SLTn" = external global %swift.protocol_requirement, align 4
@"got.$sSl5IndexSl_SLTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSl5IndexSl_SLTn"
@"$sSl7IndicesSl_SlTn" = external global %swift.protocol_requirement, align 4
@"got.$sSl7IndicesSl_SlTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSl7IndicesSl_SlTn"
@"$sSl11SubSequenceSl_SlTn" = external global %swift.protocol_requirement, align 4
@"got.$sSl11SubSequenceSl_SlTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSl11SubSequenceSl_SlTn"
@"$s5IndexSlTl" = external global %swift.protocol_requirement, align 4
@"got.$s5IndexSlTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s5IndexSlTl"
@"$s11SubSequenceSlTl" = external global %swift.protocol_requirement, align 4
@"got.$s11SubSequenceSlTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s11SubSequenceSlTl"
@"$s7IndicesSlTl" = external global %swift.protocol_requirement, align 4
@"got.$s7IndicesSlTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s7IndicesSlTl"
@"$sSl10startIndex0B0QzvgTq" = external global %swift.method_descriptor, align 4
@"got.$sSl10startIndex0B0QzvgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl10startIndex0B0QzvgTq"
@"$sSl8endIndex0B0QzvgTq" = external global %swift.method_descriptor, align 4
@"got.$sSl8endIndex0B0QzvgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl8endIndex0B0QzvgTq"
@"$sSly7ElementQz5IndexQzcirTq" = external global %swift.method_descriptor, align 4
@"got.$sSly7ElementQz5IndexQzcirTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSly7ElementQz5IndexQzcirTq"
@"$sSly11SubSequenceQzSny5IndexQzGcigTq" = external global %swift.method_descriptor, align 4
@"got.$sSly11SubSequenceQzSny5IndexQzGcigTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSly11SubSequenceQzSny5IndexQzGcigTq"
@"$sSl7indices7IndicesQzvgTq" = external global %swift.method_descriptor, align 4
@"got.$sSl7indices7IndicesQzvgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl7indices7IndicesQzvgTq"
@"$sSl7isEmptySbvgTq" = external global %swift.method_descriptor, align 4
@"got.$sSl7isEmptySbvgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl7isEmptySbvgTq"
@"$sSl5countSivgTq" = external global %swift.method_descriptor, align 4
@"got.$sSl5countSivgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl5countSivgTq"
@"$sSl30_customIndexOfEquatableElementy0B0QzSgSg0E0QzFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl30_customIndexOfEquatableElementy0B0QzSgSg0E0QzFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl30_customIndexOfEquatableElementy0B0QzSgSg0E0QzFTq"
@"$sSl34_customLastIndexOfEquatableElementy0C0QzSgSg0F0QzFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl34_customLastIndexOfEquatableElementy0C0QzSgSg0F0QzFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl34_customLastIndexOfEquatableElementy0C0QzSgSg0F0QzFTq"
@"$sSl5index_8offsetBy5IndexQzAD_SitFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl5index_8offsetBy5IndexQzAD_SitFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl5index_8offsetBy5IndexQzAD_SitFTq"
@"$sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq"
@"$sSl8distance4from2toSi5IndexQz_AEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl8distance4from2toSi5IndexQz_AEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl8distance4from2toSi5IndexQz_AEtFTq"
@"$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTq"
@"$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTq"
@"$sSl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTq"
@"$sSl5index5after5IndexQzAD_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl5index5after5IndexQzAD_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl5index5after5IndexQzAD_tFTq"
@"$sSl9formIndex5aftery0B0Qzz_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSl9formIndex5aftery0B0Qzz_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSl9formIndex5aftery0B0Qzz_tFTq"
@"$s10BufferView07MutableaB0VyxGSlAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView07MutableaB0VyxGSlAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSlMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 24, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSlSTTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAAST", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl5IndexSl_SLTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA5IndexSl_SL", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl7IndicesSl_SlTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA7IndicesSl_Sl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl11SubSequenceSl_SlTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSlAA11SubSequenceSl_Sl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s5IndexSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s11SubSequenceSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s7IndicesSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [3 x i8], i8, i32, [4 x i8], i8 }>, <{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl10startIndex0B0QzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl10startIndex0E0QzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 20) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl8endIndex0B0QzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 21) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl8endIndex0E0QzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 22) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSly7ElementQz5IndexQzcirTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 23) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ({ i8*, %swift.opaque* } (i8*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASly7ElementQz5IndexQzcirTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 24) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSly11SubSequenceQzSny5IndexQzGcigTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 25) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView07MutableaB0V*, %TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASly11SubSequenceQzSny5IndexQzGcigTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 26) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl7indices7IndicesQzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 27) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl7indices7IndicesQzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 28) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl7isEmptySbvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 29) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl7isEmptySbvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 30) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5countSivgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 31) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl5countSivgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 32) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl30_customIndexOfEquatableElementy0B0QzSgSg0E0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 33) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.22*, %swift.opaque*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl30_customIndexOfEquatableElementy0E0QzSgSg0H0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 34) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl34_customLastIndexOfEquatableElementy0C0QzSgSg0F0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 35) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.22*, %swift.opaque*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl34_customLastIndexOfEquatableElementy0F0QzSgSg0I0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 36) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 37) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl5index_8offsetBy5IndexQzAH_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 38) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 39) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 40) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 41) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl8distance4from2toSi5IndexQz_AItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 42) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 43) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyAHGtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 44) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 45) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %TSN.42*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyAHGtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 46) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 47) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSn*, %TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 48) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index5after5IndexQzAD_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 49) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl5index5after5IndexQzAH_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 50) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl9formIndex5aftery0B0Qzz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 51) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSlAASl9formIndex5aftery0E0Qzz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 52) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VyxGSlAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc", i32 0, i32 56) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSMAASl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASlWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSMAASl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSMAA11SubSequenceSl_SM" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAA11SubSequenceSl_SMWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSMAA11SubSequenceSl_SM", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSM" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSM", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferView07MutableaB0VyxGSMAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSM" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 1) to i64)) to i32), i32 3, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA", i32 0, i32 9) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSMMp" = external global %swift.protocol, align 4
@"got.$sSMMp" = private unnamed_addr constant %swift.protocol* @"$sSMMp"
@"$sSMSlTb" = external global %swift.protocol_requirement, align 4
@"got.$sSMSlTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSMSlTb"
@"$sSM11SubSequenceSl_SMTn" = external global %swift.protocol_requirement, align 4
@"got.$sSM11SubSequenceSl_SMTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSM11SubSequenceSl_SMTn"
@"$sSMy7ElementQz5IndexQzcisTq" = external global %swift.method_descriptor, align 4
@"got.$sSMy7ElementQz5IndexQzcisTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSMy7ElementQz5IndexQzcisTq"
@"$sSMy7ElementQz5IndexQzciMTq" = external global %swift.method_descriptor, align 4
@"got.$sSMy7ElementQz5IndexQzciMTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSMy7ElementQz5IndexQzciMTq"
@"$sSMy11SubSequenceQzSny5IndexQzGcisTq" = external global %swift.method_descriptor, align 4
@"got.$sSMy11SubSequenceQzSny5IndexQzGcisTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSMy11SubSequenceQzSny5IndexQzGcisTq"
@"$sSMy11SubSequenceQzSny5IndexQzGciMTq" = external global %swift.method_descriptor, align 4
@"got.$sSMy11SubSequenceQzSny5IndexQzGciMTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSMy11SubSequenceQzSny5IndexQzGciMTq"
@"$sSM9partition2by5IndexQzSb7ElementQzKXE_tKFTq" = external global %swift.method_descriptor, align 4
@"got.$sSM9partition2by5IndexQzSb7ElementQzKXE_tKFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSM9partition2by5IndexQzSb7ElementQzKXE_tKFTq"
@"$sSM6swapAtyy5IndexQz_ACtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSM6swapAtyy5IndexQz_ACtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSM6swapAtyy5IndexQz_ACtFTq"
@"$sSM42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" = external global %swift.method_descriptor, align 4
@"got.$sSM42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSM42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTq"
@"$sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" = external global %swift.method_descriptor, align 4
@"got.$sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTq"
@"$s10BufferView07MutableaB0VyxGSMAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView07MutableaB0VyxGSMAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSMMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 10, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSMSlTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSMAASl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSM11SubSequenceSl_SMTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSMAA11SubSequenceSl_SM", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSMy7ElementQz5IndexQzcisTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASMy7ElementQz5IndexQzcisTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSMy7ElementQz5IndexQzciMTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ({ i8*, %swift.opaque* } (i8*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASMy7ElementQz5IndexQzciMTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSMy11SubSequenceQzSny5IndexQzGcisTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView07MutableaB0V*, %TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASMy11SubSequenceQzSny5IndexQzGcisTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSMy11SubSequenceQzSny5IndexQzGciMTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ({ i8*, %T10BufferView07MutableaB0V* } (i8*, %TSn*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASMy11SubSequenceQzSny5IndexQzGciMTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSM9partition2by5IndexQzSb7ElementQzKXE_tKFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, i8*, %swift.opaque*, %T10BufferView07MutableaB0V*, %swift.error**, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASM9partition2by5IndexQzSb7ElementQzKXE_tKFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSM6swapAtyy5IndexQz_ACtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASM6swapAtyy5IndexQz_AGtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 20) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSM42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 21) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, i8*, %swift.opaque*, %swift.type*, %T10BufferView07MutableaB0V*, %swift.error**, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASM011_withUnsafecA18PointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 22) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 23) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, i8*, %swift.opaque*, %swift.type*, %T10BufferView07MutableaB0V*, %swift.error**, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSMAASM014withContiguousC18StorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 24) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VyxGSMAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc", i32 0, i32 28) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSKAASl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASlWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAASl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSnyxGSKsSxRzSZ6StrideRpzrlMc" = external global %swift.protocol_conformance_descriptor, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSKAA7IndicesSl_SK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAA7IndicesSl_SKWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAA7IndicesSl_SK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSKAA11SubSequenceSl_SK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAA11SubSequenceSl_SKWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAA11SubSequenceSl_SK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSK" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSK", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferView07MutableaB0VyxGSKAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 1) to i64)) to i32), i32 4, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA", i32 0, i32 11) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSKMp" = external global %swift.protocol, align 4
@"got.$sSKMp" = private unnamed_addr constant %swift.protocol* @"$sSKMp"
@"$sSKSlTb" = external global %swift.protocol_requirement, align 4
@"got.$sSKSlTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSKSlTb"
@"$sSK7IndicesSl_SKTn" = external global %swift.protocol_requirement, align 4
@"got.$sSK7IndicesSl_SKTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSK7IndicesSl_SKTn"
@"$sSK11SubSequenceSl_SKTn" = external global %swift.protocol_requirement, align 4
@"got.$sSK11SubSequenceSl_SKTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSK11SubSequenceSl_SKTn"
@"$sSK5index6before5IndexQzAD_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSK5index6before5IndexQzAD_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSK5index6before5IndexQzAD_tFTq"
@"$sSK9formIndex6beforey0B0Qzz_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSK9formIndex6beforey0B0Qzz_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSK9formIndex6beforey0B0Qzz_tFTq"
@"$sSK5index_8offsetBy5IndexQzAD_SitFTq" = external global %swift.method_descriptor, align 4
@"got.$sSK5index_8offsetBy5IndexQzAD_SitFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSK5index_8offsetBy5IndexQzAD_SitFTq"
@"$sSK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq"
@"$sSK8distance4from2toSi5IndexQz_AEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSK8distance4from2toSi5IndexQz_AEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSK8distance4from2toSi5IndexQz_AEtFTq"
@"$s10BufferView07MutableaB0VyxGSKAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView07MutableaB0VyxGSKAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSKMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSKSlTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAASl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSK7IndicesSl_SKTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAA7IndicesSl_SK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSK11SubSequenceSl_SKTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSKAA11SubSequenceSl_SK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index6before5IndexQzAD_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASK5index6before5IndexQzAH_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK9formIndex6beforey0B0Qzz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASK9formIndex6beforey0E0Qzz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASK5index_8offsetBy5IndexQzAH_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASK5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSKAASK8distance4from2toSi5IndexQz_AItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 20) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VyxGSKAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc", i32 0, i32 24) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSkAASK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAASKWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAASK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSnyxGSksSxRzSZ6StrideRpzrlMc" = external global %swift.protocol_conformance_descriptor, align 4
@"associated conformance 10BufferView07MutableaB0VyxGSkAA7IndicesSl_Sk" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAA7IndicesSl_SkWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAA7IndicesSl_Sk", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferView07MutableaB0VyxGSkAA11SubSequenceSl_Sk" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAA11SubSequenceSl_SkWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAA11SubSequenceSl_Sk", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSk" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSk", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferView07MutableaB0VyxGSkAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSk" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 1) to i64)) to i32), i32 4, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView07MutableaB0V" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA", i32 0, i32 11) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSkMp" = external global %swift.protocol, align 4
@"got.$sSkMp" = private unnamed_addr constant %swift.protocol* @"$sSkMp"
@"$sSkSKTb" = external global %swift.protocol_requirement, align 4
@"got.$sSkSKTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSkSKTb"
@"$sSk7IndicesSl_SkTn" = external global %swift.protocol_requirement, align 4
@"got.$sSk7IndicesSl_SkTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSk7IndicesSl_SkTn"
@"$sSk11SubSequenceSl_SkTn" = external global %swift.protocol_requirement, align 4
@"got.$sSk11SubSequenceSl_SkTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSk11SubSequenceSl_SkTn"
@"$sSk5index_8offsetBy5IndexQzAD_SitFTq" = external global %swift.method_descriptor, align 4
@"got.$sSk5index_8offsetBy5IndexQzAD_SitFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSk5index_8offsetBy5IndexQzAD_SitFTq"
@"$sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq"
@"$sSk8distance4from2toSi5IndexQz_AEtFTq" = external global %swift.method_descriptor, align 4
@"got.$sSk8distance4from2toSi5IndexQz_AEtFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSk8distance4from2toSi5IndexQz_AEtFTq"
@"$s10BufferView07MutableaB0VyxGSkAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView07MutableaB0VyxGSkAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSkMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 6, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSkSKTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAASK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSk7IndicesSl_SkTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAA7IndicesSl_Sk", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSk11SubSequenceSl_SkTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView07MutableaB0VyxGSkAA11SubSequenceSl_Sk", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAASk5index_8offsetBy5IndexQzAH_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAASk5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferView07MutableaB0V*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VyxGSkAASk8distance4from2toSi5IndexQz_AItFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 16) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VyxGSkAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc", i32 0, i32 20) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferViewAAVyxGSTAA8IteratorST_St" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAA8IteratorST_StWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSTAA8IteratorST_St", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____ 10BufferViewAAV" = linkonce_odr hidden constant <{ i8, i32, i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, i8 }>, <{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV", i32 0, i32 1) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferViewAAVyxGSTAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sST" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA", i32 0, i32 1) to i64)) to i32), i32 2, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([9 x i8]* @1 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA", i32 0, i32 7) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSTAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferViewAAVyxGSTAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSTMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 9, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sST8IteratorST_StTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSTAA8IteratorST_St", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s7ElementSTTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [1 x i8], i8 }>, <{ [1 x i8], i8 }>* @"symbolic x", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s8IteratorSTTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST12makeIterator0B0QzyFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB8IteratorV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST12makeIterator0D0QzyFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST19underestimatedCountSivgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST19underestimatedCountSivgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST31_customContainsEquatableElementySbSg0D0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8 (%swift.opaque*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST31_customContainsEquatableElementySbSg0F0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST22_copyToContiguousArrays0cD0Vy7ElementQzGyFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (%Ts28__ContiguousArrayStorageBaseC* (%T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST22_copyToContiguousArrays0eF0Vy7ElementQzGyFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB8IteratorV*, i64, i64, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 20) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 21) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, i8*, %swift.opaque*, %swift.type*, %T10BufferViewAAV*, %swift.error**, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSTAAST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 22) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferViewAAVyxGSTAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc", i32 0, i32 26) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferViewAAVyxGSlAAST" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASTWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAAST", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSlAA5IndexSl_SL" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAA5IndexSl_SLWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA5IndexSl_SL", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSlAA7IndicesSl_Sl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAA7IndicesSl_SlWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA7IndicesSl_Sl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSlAA11SubSequenceSl_Sl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAA11SubSequenceSl_SlWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA11SubSequenceSl_Sl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____yxG 10BufferViewAAV" = linkonce_odr hidden constant <{ i8, i32, [3 x i8], i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferViewAAV", i32 0, i32 1) to i64)) to i32), [3 x i8] c"yxG", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferViewAAVyxGSlAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 1) to i64)) to i32), i32 5, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([9 x i8]* @1 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB8IteratorV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferViewAAV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 11) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 12) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA", i32 0, i32 13) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSlAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferViewAAVyxGSlAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSlMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 24, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSlSTTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAAST", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl5IndexSl_SLTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA5IndexSl_SL", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl7IndicesSl_SlTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA7IndicesSl_Sl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSl11SubSequenceSl_SlTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSlAA11SubSequenceSl_Sl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s5IndexSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s11SubSequenceSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (<{ i8, i32, [3 x i8], i8 }>, <{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferViewAAV", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s7IndicesSlTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [3 x i8], i8, i32, [4 x i8], i8 }>, <{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl10startIndex0B0QzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl10startIndex0D0QzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 20) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl8endIndex0B0QzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 21) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl8endIndex0D0QzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 22) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSly7ElementQz5IndexQzcirTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 23) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ({ i8*, %swift.opaque* } (i8*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASly7ElementQz5IndexQzcirTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 24) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSly11SubSequenceQzSny5IndexQzGcigTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 25) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferViewAAV*, %TSn*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASly11SubSequenceQzSny5IndexQzGcigTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 26) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl7indices7IndicesQzvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 27) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSn*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl7indices7IndicesQzvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 28) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl7isEmptySbvgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 29) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl7isEmptySbvgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 30) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5countSivgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 31) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl5countSivgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 32) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl30_customIndexOfEquatableElementy0B0QzSgSg0E0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 33) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.22*, %swift.opaque*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl30_customIndexOfEquatableElementy0D0QzSgSg0G0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 34) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl34_customLastIndexOfEquatableElementy0C0QzSgSg0F0QzFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 35) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.22*, %swift.opaque*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl34_customLastIndexOfEquatableElementy0E0QzSgSg0H0QzFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 36) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 37) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl5index_8offsetBy5IndexQzAG_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 38) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 39) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 40) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 41) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl8distance4from2toSi5IndexQz_AHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 42) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 43) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %TSn*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyAGGtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 44) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 45) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %TSN.42*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyAGGtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 46) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 47) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSn*, %TSn*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 48) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl5index5after5IndexQzAD_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 49) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl5index5after5IndexQzAG_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 50) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSl9formIndex5aftery0B0Qzz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 51) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSlAASl9formIndex5aftery0D0Qzz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 52) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferViewAAVyxGSlAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc", i32 0, i32 56) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferViewAAVyxGSKAASl" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASlWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAASl", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSKAA7IndicesSl_SK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAA7IndicesSl_SKWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAA7IndicesSl_SK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSKAA11SubSequenceSl_SK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAA11SubSequenceSl_SKWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAA11SubSequenceSl_SK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferViewAAVyxGSKAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 1) to i64)) to i32), i32 4, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferViewAAV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA", i32 0, i32 11) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSKAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferViewAAVyxGSKAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSKMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSKSlTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAASl", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSK7IndicesSl_SKTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAA7IndicesSl_SK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSK11SubSequenceSl_SKTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSKAA11SubSequenceSl_SK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index6before5IndexQzAD_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASK5index6before5IndexQzAG_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK9formIndex6beforey0B0Qzz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASK9formIndex6beforey0D0Qzz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASK5index_8offsetBy5IndexQzAG_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASK5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 18) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSK8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 19) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSKAASK8distance4from2toSi5IndexQz_AHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 20) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferViewAAVyxGSKAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc", i32 0, i32 24) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferViewAAVyxGSkAASK" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAASKWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAASK", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSkAA7IndicesSl_Sk" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAA7IndicesSl_SkWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAA7IndicesSl_Sk", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"associated conformance 10BufferViewAAVyxGSkAA11SubSequenceSl_Sk" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAA11SubSequenceSl_SkWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAA11SubSequenceSl_Sk", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferViewAAVyxGSkAAMA" = internal constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSk" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 1) to i64)) to i32), i32 4, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 5) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @2 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @3 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 8) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferViewAAV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @4 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 10) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [3 x i8], i8, i32, [4 x i8], i8 }>* @"symbolic Sny_____yxGG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA", i32 0, i32 11) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSkAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferViewAAVyxGSkAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSkMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 6, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSkSKTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAASK", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSk7IndicesSl_SkTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAA7IndicesSl_Sk", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSk11SubSequenceSl_SkTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferViewAAVyxGSkAA11SubSequenceSl_Sk", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk5index_8offsetBy5IndexQzAD_SitFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, i64, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAASk5index_8offsetBy5IndexQzAG_SitFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSq.23*, %T10BufferView0aB5IndexV*, i64, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAASk5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSk8distance4from2toSi5IndexQz_AEtFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %T10BufferViewAAV*, %swift.type*, i8**)* @"$s10BufferViewAAVyxGSkAASk8distance4from2toSi5IndexQz_AHtFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 16) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferViewAAVyxGSkAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc", i32 0, i32 20) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"$sSQMp" = external global %swift.protocol, align 4
@"got.$sSQMp" = private unnamed_addr constant %swift.protocol* @"$sSQMp"
@"$sSQ2eeoiySbx_xtFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSQ2eeoiySbx_xtFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSQ2eeoiySbx_xtFZTq"
@"$s10BufferView0aB5IndexVyxGSQAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView0aB5IndexVyxGSQAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSQMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 1, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSQ2eeoiySbx_xtFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSQAASQ2eeoiySbx_xtFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc", i32 0, i32 6) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB5IndexVyxGSQAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc", i32 0, i32 10) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView0aB5IndexVyxGSHAASQ" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSHAASQWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSHAASQ", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSHMp" = external global %swift.protocol, align 4
@"got.$sSHMp" = private unnamed_addr constant %swift.protocol* @"$sSHMp"
@"$sSHSQTb" = external global %swift.protocol_requirement, align 4
@"got.$sSHSQTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSHSQTb"
@"$sSH9hashValueSivgTq" = external global %swift.method_descriptor, align 4
@"got.$sSH9hashValueSivgTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSH9hashValueSivgTq"
@"$sSH4hash4intoys6HasherVz_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSH4hash4intoys6HasherVz_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSH4hash4intoys6HasherVz_tFTq"
@"$sSH13_rawHashValue4seedS2i_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSH13_rawHashValue4seedS2i_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSH13_rawHashValue4seedS2i_tFTq"
@"$s10BufferView0aB5IndexVyxGSHAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView0aB5IndexVyxGSHAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSHMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 4, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSHSQTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSHAASQ", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSH9hashValueSivgTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (%T10BufferView0aB5IndexV*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSHAASH9hashValueSivgTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSH4hash4intoys6HasherVz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%Ts6HasherV*, %T10BufferView0aB5IndexV*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSHAASH4hash4intoys6HasherVz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSH13_rawHashValue4seedS2i_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64 (i64, %T10BufferView0aB5IndexV*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSHAASH13_rawHashValue4seedS2i_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 12) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB5IndexVyxGSHAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc", i32 0, i32 16) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView0aB5IndexVyxGSxAASL" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAASLWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAASL", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSiSLsWP" = external global i8*, align 8
@"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_SL" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAA6StrideSx_SLWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_SL", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSis13SignedNumericsWP" = external global i8*, align 8
@"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_s13SignedNumeric" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAA6StrideSx_s13SignedNumericPWT" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_s13SignedNumeric", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic Si" = linkonce_odr hidden constant <{ [2 x i8], i8 }> <{ [2 x i8] c"Si", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic _____ 10BufferView0aB5IndexV" = linkonce_odr hidden constant <{ i8, i32, i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, i8 }>, <{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB5IndexV", i32 0, i32 1) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSx" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSx", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@5 = private constant [7 x i8] c"Stride\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView0aB5IndexVyxGSxAAMA" = internal constant { i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB5IndexV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSx" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMA", i32 0, i32 1) to i64)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @5 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic Si" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMA", i32 0, i32 5) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sSxMp" = external global %swift.protocol, align 4
@"got.$sSxMp" = private unnamed_addr constant %swift.protocol* @"$sSxMp"
@"$sSxSLTb" = external global %swift.protocol_requirement, align 4
@"got.$sSxSLTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSxSLTb"
@"$sSx6StrideSx_SLTn" = external global %swift.protocol_requirement, align 4
@"got.$sSx6StrideSx_SLTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSx6StrideSx_SLTn"
@"$sSx6StrideSx_s13SignedNumericTn" = external global %swift.protocol_requirement, align 4
@"got.$sSx6StrideSx_s13SignedNumericTn" = private unnamed_addr constant %swift.protocol_requirement* @"$sSx6StrideSx_s13SignedNumericTn"
@"$s6StrideSxTl" = external global %swift.protocol_requirement, align 4
@"got.$s6StrideSxTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s6StrideSxTl"
@"$sSx8distance2to6StrideQzx_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSx8distance2to6StrideQzx_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSx8distance2to6StrideQzx_tFTq"
@"$sSx8advanced2byx6StrideQz_tFTq" = external global %swift.method_descriptor, align 4
@"got.$sSx8advanced2byx6StrideQz_tFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSx8advanced2byx6StrideQz_tFTq"
@"$sSx5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSx5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSx5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZTq"
@"$s10BufferView0aB5IndexVyxGSxAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView0aB5IndexVyxGSxAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSxMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 7, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSxSLTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAASL", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSx6StrideSx_SLTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_SL", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSx6StrideSx_s13SignedNumericTn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSxAA6StrideSx_s13SignedNumeric", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s6StrideSxTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [2 x i8], i8 }>, <{ [2 x i8], i8 }>* @"symbolic Si", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSx8distance2to6StrideQzx_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%TSi*, %T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAASx8distance2to6StrideQzx_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 14) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSx8advanced2byx6StrideQz_tFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 15) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%T10BufferView0aB5IndexV*, %TSi*, %T10BufferView0aB5IndexV*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAASx8advanced2byx6StrideQz_tFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 16) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSx5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 17) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ({ i64, i8 } (%T10BufferView0aB5IndexV*, i64, i8, %T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %TSi*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSxAASx5_step5after4from2bySiSg5index_x5valuetAiJ_xAKt_x6StrideQztFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 18) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB5IndexVyxGSxAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc", i32 0, i32 22) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"associated conformance 10BufferView0aB5IndexVyxGSLAASQ" = linkonce_odr hidden constant <{ i8, i8, i32, i8 }> <{ i8 -1, i8 7, i32 trunc (i64 sub (i64 ptrtoint (i8** (%swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSLAASQWb" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSLAASQ", i32 0, i32 2) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$sSLMp" = external global %swift.protocol, align 4
@"got.$sSLMp" = private unnamed_addr constant %swift.protocol* @"$sSLMp"
@"$sSLSQTb" = external global %swift.protocol_requirement, align 4
@"got.$sSLSQTb" = private unnamed_addr constant %swift.protocol_requirement* @"$sSLSQTb"
@"$sSL1loiySbx_xtFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSL1loiySbx_xtFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSL1loiySbx_xtFZTq"
@"$sSL2leoiySbx_xtFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSL2leoiySbx_xtFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSL2leoiySbx_xtFZTq"
@"$sSL2geoiySbx_xtFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSL2geoiySbx_xtFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSL2geoiySbx_xtFZTq"
@"$sSL1goiySbx_xtFZTq" = external global %swift.method_descriptor, align 4
@"got.$sSL1goiySbx_xtFZTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSL1goiySbx_xtFZTq"
@"$s10BufferView0aB5IndexVyxGSLAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView0aB5IndexVyxGSLAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sSLMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 5, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$sSLSQTb" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr (i8, i8* getelementptr inbounds (<{ i8, i8, i32, i8 }>, <{ i8, i8, i32, i8 }>* @"associated conformance 10BufferView0aB5IndexVyxGSLAASQ", i32 0, i32 0), i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSL1loiySbx_xtFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSLAASL1loiySbx_xtFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 8) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSL2leoiySbx_xtFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 9) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSLAASL2leoiySbx_xtFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 10) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSL2geoiySbx_xtFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 11) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSLAASL2geoiySbx_xtFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 12) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSL1goiySbx_xtFZTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 13) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i1 (%T10BufferView0aB5IndexV*, %T10BufferView0aB5IndexV*, %swift.type*, %swift.type*, i8**)* @"$s10BufferView0aB5IndexVyxGSLAASL1goiySbx_xtFZTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 14) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB5IndexVyxGSLAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc", i32 0, i32 18) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"symbolic _____ 10BufferView0aB8IteratorV" = linkonce_odr hidden constant <{ i8, i32, i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, i8 }>, <{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB8IteratorV", i32 0, i32 1) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic $sSt" = linkonce_odr hidden constant <{ [4 x i8], i8 }> <{ [4 x i8] c"$sSt", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"$s10BufferView0aB8IteratorVyxGStAAMA" = internal constant { i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB8IteratorV" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMA" to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [4 x i8], i8 }>* @"symbolic $sSt" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMA", i32 0, i32 1) to i64)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @0 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMA", i32 0, i32 4) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ [1 x i8], i8 }>* @"symbolic x" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMA", i32 0, i32 5) to i64)) to i32) }, section "__TEXT,__swift5_assocty, regular", no_sanitize_address, align 4
@"$sStMp" = external global %swift.protocol, align 4
@"got.$sStMp" = private unnamed_addr constant %swift.protocol* @"$sStMp"
@"$s7ElementStTl" = external global %swift.protocol_requirement, align 4
@"got.$s7ElementStTl" = private unnamed_addr constant %swift.protocol_requirement* @"$s7ElementStTl"
@"$sSt4next7ElementQzSgyFTq" = external global %swift.method_descriptor, align 4
@"got.$sSt4next7ElementQzSgyFTq" = private unnamed_addr constant %swift.method_descriptor* @"$sSt4next7ElementQzSgyFTq"
@"$s10BufferView0aB8IteratorVyxGStAAMcMK" = internal global [16 x i8*] zeroinitializer
@"$s10BufferView0aB8IteratorVyxGStAAMc" = constant { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 } { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @"got.$sStMp" to i64), i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 1) to i64)) to i32), i32 0, i32 196608, i32 2, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol_requirement** @"got.$s7ElementStTl" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 5) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i8* getelementptr inbounds (<{ [1 x i8], i8 }>, <{ [1 x i8], i8 }>* @"symbolic x", i32 0, i32 0, i64 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 6) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.method_descriptor** @"got.$sSt4next7ElementQzSgyFTq" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 7) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (void (%swift.opaque*, %T10BufferView0aB8IteratorV*, %swift.type*, i8**)* @"$s10BufferView0aB8IteratorVyxGStAASt4next7ElementQzSgyFTW" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 8) to i64)) to i32), i16 0, i16 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB8IteratorVyxGStAAMcMK" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc", i32 0, i32 12) to i64)) to i32) }, section "__TEXT,__const", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV" = unnamed_addr constant { i32 } zeroinitializer, align 4
@"$s10BufferView07MutableaB0VWV" = internal constant %swift.vwtable { i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i32 (%swift.opaque*, i32, %swift.type*)* @"$s10BufferView07MutableaB0Vwet" to i8*), i8* bitcast (void (%swift.opaque*, i32, i32, %swift.type*)* @"$s10BufferView07MutableaB0Vwst" to i8*), i64 16, i64 16, i32 7, i32 1 }, align 8
@6 = internal constant <{ i32, i32 }> <{ i32 0, i32 8 }>, align 8
@.str.10.BufferView = private constant [11 x i8] c"BufferView\00"
@"$s10BufferViewMXM" = linkonce_odr hidden constant <{ i32, i32, i32 }> <{ i32 0, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([11 x i8]* @.str.10.BufferView to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32 }>, <{ i32, i32, i32 }>* @"$s10BufferViewMXM", i32 0, i32 2) to i64)) to i32) }>, section "__TEXT,__constg_swiftt", align 4
@.str.17.MutableBufferView = private constant [18 x i8] c"MutableBufferView\00"
@"$s10BufferView07MutableaB0VMI" = internal global [16 x i8*] zeroinitializer, align 8
@"$s10BufferView07MutableaB0VMn" = constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }> <{ i32 209, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32 }>* @"$s10BufferViewMXM" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([18 x i8]* @.str.17.MutableBufferView to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 2) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView07MutableaB0VMa" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 4) to i64)) to i32), i32 2, i32 3, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView07MutableaB0VMI" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView07MutableaB0VMP" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn", i32 0, i32 8) to i64)) to i32), i16 1, i16 0, i16 1, i16 0, i8 -128, i8 0, i8 0, i8 0 }>, section "__TEXT,__constg_swiftt", align 4
@"$s10BufferView07MutableaB0VMP" = internal constant <{ i32, i32, i32, i32, i32, i16, i16 }> <{ i32 trunc (i64 sub (i64 ptrtoint (%swift.type* (%swift.type_descriptor*, i8**, i8*)* @"$s10BufferView07MutableaB0VMi" to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView07MutableaB0VMP" to i64)) to i32), i32 0, i32 1073741825, i32 trunc (i64 sub (i64 ptrtoint (%swift.vwtable* @"$s10BufferView07MutableaB0VWV" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView07MutableaB0VMP", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32 }>* @6 to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView07MutableaB0VMP", i32 0, i32 4) to i64)) to i32), i16 1, i16 1 }>, align 8
@7 = private constant [6 x i8] c"start\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@8 = private constant [6 x i8] c"count\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView07MutableaB0VMF" = internal constant { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView07MutableaB0V" to i64), i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF" to i64)) to i32), i32 0, i16 0, i16 12, i32 2, i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @7 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF", i32 0, i32 7) to i64)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic Si" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @8 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF", i32 0, i32 10) to i64)) to i32) }, section "__TEXT,__swift5_fieldmd, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVWV" = internal constant %swift.vwtable { i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i32 (%swift.opaque*, i32, %swift.type*)* @"$s10BufferViewAAVwet" to i8*), i8* bitcast (void (%swift.opaque*, i32, i32, %swift.type*)* @"$s10BufferViewAAVwst" to i8*), i64 16, i64 16, i32 7, i32 1 }, align 8
@9 = internal constant <{ i32, i32 }> <{ i32 0, i32 8 }>, align 8
@"$s10BufferViewAAVMI" = internal global [16 x i8*] zeroinitializer, align 8
@"$s10BufferViewAAVMn" = constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }> <{ i32 209, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32 }>* @"$s10BufferViewMXM" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([11 x i8]* @.str.10.BufferView to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 2) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferViewAAVMa" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 4) to i64)) to i32), i32 2, i32 3, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferViewAAVMI" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferViewAAVMP" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn", i32 0, i32 8) to i64)) to i32), i16 1, i16 0, i16 1, i16 0, i8 -128, i8 0, i8 0, i8 0 }>, section "__TEXT,__constg_swiftt", align 4
@"$s10BufferViewAAVMP" = internal constant <{ i32, i32, i32, i32, i32, i16, i16 }> <{ i32 trunc (i64 sub (i64 ptrtoint (%swift.type* (%swift.type_descriptor*, i8**, i8*)* @"$s10BufferViewAAVMi" to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferViewAAVMP" to i64)) to i32), i32 0, i32 1073741825, i32 trunc (i64 sub (i64 ptrtoint (%swift.vwtable* @"$s10BufferViewAAVWV" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferViewAAVMP", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32 }>* @9 to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferViewAAVMP", i32 0, i32 4) to i64)) to i32), i16 1, i16 1 }>, align 8
@"$s10BufferViewAAVMF" = internal constant { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferViewAAV" to i64), i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF" to i64)) to i32), i32 0, i16 0, i16 12, i32 2, i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, [3 x i8], i8 }>* @"symbolic _____yxG 10BufferView0aB5IndexV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @7 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF", i32 0, i32 7) to i64)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic Si" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @8 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF", i32 0, i32 10) to i64)) to i32) }, section "__TEXT,__swift5_fieldmd, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVWV" = internal constant %swift.vwtable { i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy8_8 to i8*), i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy8_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy8_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy8_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy8_8 to i8*), i8* bitcast (i32 (%swift.opaque*, i32, %swift.type*)* @"$s10BufferView0aB5IndexVwet" to i8*), i8* bitcast (void (%swift.opaque*, i32, i32, %swift.type*)* @"$s10BufferView0aB5IndexVwst" to i8*), i64 8, i64 8, i32 7, i32 1 }, align 8
@10 = internal constant <{ i32, [4 x i8] }> zeroinitializer, align 8
@.str.15.BufferViewIndex = private constant [16 x i8] c"BufferViewIndex\00"
@"$s10BufferView0aB5IndexVMI" = internal global [16 x i8*] zeroinitializer, align 8
@"$s10BufferView0aB5IndexVMn" = constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }> <{ i32 209, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32 }>* @"$s10BufferViewMXM" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @.str.15.BufferViewIndex to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 2) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB5IndexVMa" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVMF" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 4) to i64)) to i32), i32 1, i32 3, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB5IndexVMI" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB5IndexVMP" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn", i32 0, i32 8) to i64)) to i32), i16 1, i16 0, i16 1, i16 0, i8 -128, i8 0, i8 0, i8 0 }>, section "__TEXT,__constg_swiftt", align 4
@"$s10BufferView0aB5IndexVMP" = internal constant <{ i32, i32, i32, i32, i32, i16, i16 }> <{ i32 trunc (i64 sub (i64 ptrtoint (%swift.type* (%swift.type_descriptor*, i8**, i8*)* @"$s10BufferView0aB5IndexVMi" to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB5IndexVMP" to i64)) to i32), i32 0, i32 1073741825, i32 trunc (i64 sub (i64 ptrtoint (%swift.vwtable* @"$s10BufferView0aB5IndexVWV" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB5IndexVMP", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, [4 x i8] }>* @10 to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB5IndexVMP", i32 0, i32 4) to i64)) to i32), i16 1, i16 1 }>, align 8
@"symbolic SV" = linkonce_odr hidden constant <{ [2 x i8], i8 }> <{ [2 x i8] c"SV", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@11 = private constant [10 x i8] c"_rawValue\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView0aB5IndexVMF" = internal constant { i32, i32, i16, i16, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB5IndexV" to i64), i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVMF" to i64)) to i32), i32 0, i16 0, i16 12, i32 1, i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic SV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVMF", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([10 x i8]* @11 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVMF", i32 0, i32 7) to i64)) to i32) }, section "__TEXT,__swift5_fieldmd, regular", no_sanitize_address, align 4
@"$s10BufferView0aB8IteratorVWV" = internal constant %swift.vwtable { i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i32 (%swift.opaque*, i32, %swift.type*)* @"$s10BufferView0aB8IteratorVwet" to i8*), i8* bitcast (void (%swift.opaque*, i32, i32, %swift.type*)* @"$s10BufferView0aB8IteratorVwst" to i8*), i64 16, i64 16, i32 7, i32 1 }, align 8
@12 = internal constant <{ i32, i32 }> <{ i32 0, i32 8 }>, align 8
@.str.18.BufferViewIterator = private constant [19 x i8] c"BufferViewIterator\00"
@"$s10BufferView0aB8IteratorVMI" = internal global [16 x i8*] zeroinitializer, align 8
@"$s10BufferView0aB8IteratorVMn" = constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }> <{ i32 209, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32 }>* @"$s10BufferViewMXM" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([19 x i8]* @.str.18.BufferViewIterator to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 2) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB8IteratorVMa" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 4) to i64)) to i32), i32 2, i32 3, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8*]* @"$s10BufferView0aB8IteratorVMI" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 7) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB8IteratorVMP" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn", i32 0, i32 8) to i64)) to i32), i16 1, i16 0, i16 1, i16 0, i8 -128, i8 0, i8 0, i8 0 }>, section "__TEXT,__constg_swiftt", align 4
@"$s10BufferView0aB8IteratorVMP" = internal constant <{ i32, i32, i32, i32, i32, i16, i16 }> <{ i32 trunc (i64 sub (i64 ptrtoint (%swift.type* (%swift.type_descriptor*, i8**, i8*)* @"$s10BufferView0aB8IteratorVMi" to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB8IteratorVMP" to i64)) to i32), i32 0, i32 1073741825, i32 trunc (i64 sub (i64 ptrtoint (%swift.vwtable* @"$s10BufferView0aB8IteratorVWV" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB8IteratorVMP", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32 }>* @12 to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i16, i16 }>, <{ i32, i32, i32, i32, i32, i16, i16 }>* @"$s10BufferView0aB8IteratorVMP", i32 0, i32 4) to i64)) to i32), i16 1, i16 1 }>, align 8
@13 = private constant [11 x i8] c"curPointer\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@14 = private constant [11 x i8] c"endPointer\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView0aB8IteratorVMF" = internal constant { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView0aB8IteratorV" to i64), i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF" to i64)) to i32), i32 0, i16 0, i16 12, i32 2, i32 2, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic SV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([11 x i8]* @13 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF", i32 0, i32 7) to i64)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic SV" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([11 x i8]* @14 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF", i32 0, i32 10) to i64)) to i32) }, section "__TEXT,__swift5_fieldmd, regular", no_sanitize_address, align 4
@"$s10BufferView09OutputRawA0VWV" = internal constant %swift.vwtable { i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy16_8 to i8*), i8* bitcast (i32 (%swift.opaque*, i32, %swift.type*)* @"$s10BufferView09OutputRawA0Vwet" to i8*), i8* bitcast (void (%swift.opaque*, i32, i32, %swift.type*)* @"$s10BufferView09OutputRawA0Vwst" to i8*), i64 16, i64 16, i32 7, i32 1 }, align 8
@.str.15.OutputRawBuffer = private constant [16 x i8] c"OutputRawBuffer\00"
@"$s10BufferView09OutputRawA0VMn" = constant <{ i32, i32, i32, i32, i32, i32, i32 }> <{ i32 81, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32 }>* @"$s10BufferViewMXM" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32 }>, <{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn", i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @.str.15.OutputRawBuffer to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32 }>, <{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn", i32 0, i32 2) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.metadata_response (i64)* @"$s10BufferView09OutputRawA0VMa" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32 }>, <{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn", i32 0, i32 3) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i32, i32, i32, i32, i32, i32, i32 }>, <{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn", i32 0, i32 4) to i64)) to i32), i32 2, i32 2 }>, section "__TEXT,__constg_swiftt", align 4
@"$s10BufferView09OutputRawA0VMf" = internal constant <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }> <{ i8* null, i8** getelementptr inbounds (%swift.vwtable, %swift.vwtable* @"$s10BufferView09OutputRawA0VWV", i32 0, i32 0), i64 512, <{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn", i32 0, i32 8 }>, align 8
@"symbolic _____ 10BufferView09OutputRawA0V" = linkonce_odr hidden constant <{ i8, i32, i8 }> <{ i8 1, i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn" to i64), i64 ptrtoint (i32* getelementptr inbounds (<{ i8, i32, i8 }>, <{ i8, i32, i8 }>* @"symbolic _____ 10BufferView09OutputRawA0V", i32 0, i32 1) to i64)) to i32), i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@"symbolic Sv" = linkonce_odr hidden constant <{ [2 x i8], i8 }> <{ [2 x i8] c"Sv", i8 0 }>, section "__TEXT,__swift5_typeref, regular", no_sanitize_address, align 2
@15 = private constant [12 x i8] c"baseAddress\00", section "__TEXT,__swift5_reflstr, regular", no_sanitize_address
@"$s10BufferView09OutputRawA0VMF" = internal constant { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (<{ i8, i32, i8 }>* @"symbolic _____ 10BufferView09OutputRawA0V" to i64), i64 ptrtoint ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF" to i64)) to i32), i32 0, i16 0, i16 12, i32 2, i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic Sv" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF", i32 0, i32 6) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @15 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF", i32 0, i32 7) to i64)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (<{ [2 x i8], i8 }>* @"symbolic Si" to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF", i32 0, i32 9) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @8 to i64), i64 ptrtoint (i32* getelementptr inbounds ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF", i32 0, i32 10) to i64)) to i32) }, section "__TEXT,__swift5_fieldmd, regular", no_sanitize_address, align 4
@"$sSlTL" = external global %swift.protocol_requirement, align 4
@"$sSRyxGSlsMc" = external global %swift.protocol_conformance_descriptor, align 4
@"$sxSgSQsSQRzlMc" = external global %swift.protocol_conformance_descriptor, align 4
@"$sSpyxGSQsMc" = external global %swift.protocol_conformance_descriptor, align 4
@"$sSiSQsWP" = external global i8*, align 8
@"$s10BufferView07MutableaB0VyxGSTAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView07MutableaB0VyxGSTAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0VyxGSlAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView07MutableaB0VyxGSlAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0VyxGSMAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView07MutableaB0VyxGSMAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0VyxGSKAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView07MutableaB0VyxGSKAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0VyxGSkAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView07MutableaB0VyxGSkAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSTAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferViewAAVyxGSTAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSlAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferViewAAVyxGSlAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSKAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferViewAAVyxGSKAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVyxGSkAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferViewAAVyxGSkAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVyxGSQAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView0aB5IndexVyxGSQAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVyxGSHAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView0aB5IndexVyxGSHAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVyxGSxAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView0aB5IndexVyxGSxAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVyxGSLAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView0aB5IndexVyxGSLAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView0aB8IteratorVyxGStAAHc" = private constant i32 trunc (i64 sub (i64 ptrtoint ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to i64), i64 ptrtoint (i32* @"$s10BufferView0aB8IteratorVyxGStAAHc" to i64)) to i32), section "__TEXT, __swift5_proto, regular", no_sanitize_address, align 4
@"$s10BufferView07MutableaB0VHn" = private constant %swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i64), i64 ptrtoint (%swift.type_metadata_record* @"$s10BufferView07MutableaB0VHn" to i64)) to i32) }, section "__TEXT, __swift5_types, regular", no_sanitize_address, align 4
@"$s10BufferViewAAVHn" = private constant %swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i64), i64 ptrtoint (%swift.type_metadata_record* @"$s10BufferViewAAVHn" to i64)) to i32) }, section "__TEXT, __swift5_types, regular", no_sanitize_address, align 4
@"$s10BufferView0aB5IndexVHn" = private constant %swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i64), i64 ptrtoint (%swift.type_metadata_record* @"$s10BufferView0aB5IndexVHn" to i64)) to i32) }, section "__TEXT, __swift5_types, regular", no_sanitize_address, align 4
@"$s10BufferView0aB8IteratorVHn" = private constant %swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i64), i64 ptrtoint (%swift.type_metadata_record* @"$s10BufferView0aB8IteratorVHn" to i64)) to i32) }, section "__TEXT, __swift5_types, regular", no_sanitize_address, align 4
@"$s10BufferView09OutputRawA0VHn" = private constant %swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn" to i64), i64 ptrtoint (%swift.type_metadata_record* @"$s10BufferView09OutputRawA0VHn" to i64)) to i32) }, section "__TEXT, __swift5_types, regular", no_sanitize_address, align 4
@__swift_reflection_version = linkonce_odr hidden constant i16 3
@llvm.used = appending global [223 x i8*] [i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvg" to i8*), i8* bitcast (i64 (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5countSivg" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufC" to i8*), i8* bitcast (i8* (i8*, %swift.type*)* @"$s10BufferView0aB5IndexV8rawValueACyxGSV_tcfC" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V5start5count9dependsOnACyxGAA0aB5IndexVyxG_Siqd__tclufC" to i8*), i8* bitcast (i1 (i8*, %swift.type*)* @"$s10BufferView0aB5IndexV9isAlignedSbvg" to i8*), i8* bitcast ({ i64, i64 } (i64, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V06unsafecA7Pointer9dependsOnACyxGSgSryxG_qd__tclufC" to i8*), i8* bitcast ({ i64, i64 } (i64, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V06unsafec3RawA7Pointer9dependsOnACyxGSgSw_qd__tclufC" to i8*), i8* bitcast ({ i8*, i8* } (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V12makeIteratorAA0abE0VyxGyF" to i8*), i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V10startIndexAA0abE0VyxGvg" to i8*), i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V8endIndexAA0abE0VyxGvg" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64, %swift.type*)* @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF" to i8*), i8* bitcast (i1 (i8*, i64, i8*, i64, %swift.type*, i8**)* @"$s10BufferView07MutableaB0VAASQRzlE13elementsEqualySbACyxGF" to i8*), i8* bitcast (i1 (i8*, i64, i8*, i64, %swift.type*, i8**)* @"$s10BufferViewAAVAASQRzlE13elementsEqualySbAByxGF" to i8*), i8* bitcast (i8* (i64, i8*, %swift.type*)* @"$s10BufferView0aB5IndexV8advanced2byACyxGSi_tF" to i8*), i8* bitcast ({ i8*, i8* } (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V7indicesSnyAA0aB5IndexVyxGGvg" to i8*), i8* bitcast (i1 (i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V7isEmptySbvg" to i8*), i8* bitcast (void (i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V12_checkBoundsyyAA0aB5IndexVyxGF" to i8*), i8* bitcast (i64 (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V8distance4from2toSiAA0aB5IndexVyxG_AItF" to i8*), i8* bitcast (void (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V12_checkBoundsyySnyAA0aB5IndexVyxGGF" to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5index5afterAA0aB5IndexVyxGAH_tF" to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5index6beforeAA0aB5IndexVyxGAH_tF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9formIndex5afteryAA0abE0VyxGz_tF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9formIndex6beforeyAA0abE0VyxGz_tF" to i8*), i8* bitcast (i8* (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5index_8offsetByAA0aB5IndexVyxGAH_SitF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9formIndex_8offsetByyAA0abE0VyxGz_SitF" to i8*), i8* bitcast (i64 (i8*, i8*, %swift.type*)* @"$s10BufferView0aB5IndexV8distance2toSiACyxG_tF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGcig" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tcig" to i8*), i8* bitcast ({ i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGciM" to i8*), i8* bitcast ({ i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tciM" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGcis" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tcis" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGcig" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcig" to i8*), i8* bitcast (void (i8*, i64, i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGcis" to i8*), i8* bitcast (void (i8*, i64, i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcis" to i8*), i8* bitcast ({ i8*, %T10BufferView07MutableaB0V* } (i8*, i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGciM" to i8*), i8* bitcast ({ i8*, %T10BufferView07MutableaB0V* } (i8*, i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tciM" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlF" to i8*), i8* bitcast (i8* (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V10copyMemory4fromAA0aB5IndexVyxGA2AVyxG_tF" to i8*), i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferViewAAV10startIndexAA0abD0VyxGvg" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6update9repeatingyx_tF" to i8*), i8* bitcast (i8* (%swift.opaque*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0V6update4from8IteratorQyd__9unwritten_AA0aB5IndexVyxG5indextqd___t7ElementQyd__RszSTRd__lF" to i8*), i8* bitcast (i1 (i8*, i8*, %swift.type*)* @"$s10BufferView0aB5IndexV1loiySbACyxG_AEtFZ" to i8*), i8* bitcast (i8* (%swift.opaque*, i8*, i64, %swift.type*, %swift.type*, i8**)* @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V20withUnsafeRawPointeryqd__qd__SV_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeC10RawPointeryqd__qd__Sv_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V4load14fromByteOffset2asqd__Si_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferViewAAV4load14fromByteOffset2asqd__Si_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V4load4from2asqd__AA0aB5IndexVyxG_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferViewAAV4load4from2asqd__AA0aB5IndexVyxG_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferViewAAV13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V13loadUnaligned4from2asqd__AA0aB5IndexVyxG_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferViewAAV13loadUnaligned4from2asqd__AA0aB5IndexVyxG_qd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V10storeBytes2of12toByteOffset2asyqd___Siqd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.type*, i8*, i64, %swift.type*, %swift.type*)* @"$s10BufferView07MutableaB0V10storeBytes2of2to2asyqd___AA0aB5IndexVyxGqd__mtlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6offsetxSi_tcig" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxSi_tcig" to i8*), i8* bitcast ({ i8*, %swift.opaque* } (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6offsetxSi_tciM" to i8*), i8* bitcast ({ i8*, %swift.opaque* } (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxSi_tciM" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6offsetxSi_tcis" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxSi_tcis" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V5firstxSgvg" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV5firstxSgvg" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V4lastxSgvg" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV4lastxSgvg" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6prefixyACyxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6suffixyACyxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9dropFirstyACyxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V8dropLastyACyxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6prefix4upToACyxGAA0aB5IndexVyxG_tF" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V6suffix4fromACyxGAA0aB5IndexVyxG_tF" to i8*), i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferViewAAV5startAA0aB5IndexVyxGvg" to i8*), i8* bitcast (i64 (i8*, i64, %swift.type*)* @"$s10BufferViewAAV5countSivg" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufC" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferViewAAV5start5count9dependsOnAByxGAA0aB5IndexVyxG_Siqd__tclufC" to i8*), i8* bitcast ({ i64, i64 } (i64, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferViewAAV06unsafeA7Pointer9dependsOnAByxGSgSRyxG_qd__tclufC" to i8*), i8* bitcast ({ i64, i64 } (i64, i64, %swift.opaque*, %swift.type*, %swift.type*)* @"$s10BufferViewAAV09unsafeRawA7Pointer9dependsOnAByxGSgSW_qd__tclufC" to i8*), i8* bitcast ({ i8*, i8* } (i8*, i64, %swift.type*)* @"$s10BufferViewAAV12makeIteratorAA0abD0VyxGyF" to i8*), i8* bitcast (i8* (i8*, i64, %swift.type*)* @"$s10BufferViewAAV8endIndexAA0abD0VyxGvg" to i8*), i8* bitcast ({ i8*, i8* } (i8*, i64, %swift.type*)* @"$s10BufferViewAAV7indicesSnyAA0aB5IndexVyxGGvg" to i8*), i8* bitcast (i1 (i8*, i64, %swift.type*)* @"$s10BufferViewAAV7isEmptySbvg" to i8*), i8* bitcast (void (i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV12_checkBoundsyyAA0aB5IndexVyxGF" to i8*), i8* bitcast (void (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV12_checkBoundsyySnyAA0aB5IndexVyxGGF" to i8*), i8* bitcast (i64 (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV8distance4from2toSiAA0aB5IndexVyxG_AHtF" to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV5index5afterAA0aB5IndexVyxGAG_tF" to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV5index6beforeAA0aB5IndexVyxGAG_tF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9formIndex5afteryAA0abD0VyxGz_tF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9formIndex6beforeyAA0abD0VyxGz_tF" to i8*), i8* bitcast (i8* (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV5index_8offsetByAA0aB5IndexVyxGAG_SitF" to i8*), i8* bitcast (void (%T10BufferView0aB5IndexV*, i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9formIndex_8offsetByyAA0abD0VyxGz_SitF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAVyxAA0aB5IndexVyxGcig" to i8*), i8* bitcast (void (%swift.opaque*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9uncheckedxAA0aB5IndexVyxG_tcig" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAVyAByxGSnyAA0aB5IndexVyxGGcig" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9uncheckedAByxGSnyAA0aB5IndexVyxGG_tcig" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV20withUnsafeRawPointeryqd__qd__SV_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV15withUnsafeBytesyqd__qd__SWKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlF" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV6offsetxSi_tcig" to i8*), i8* bitcast (void (%swift.opaque*, i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV15uncheckedOffsetxSi_tcig" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV6prefixyAByxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV6suffixyAByxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV9dropFirstyAByxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i64, i8*, i64, %swift.type*)* @"$s10BufferViewAAV8dropLastyAByxGSiF" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV6prefix4upToAByxGAA0aB5IndexVyxG_tF" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i8*, i64, %swift.type*)* @"$s10BufferViewAAV6suffix4fromAByxGAA0aB5IndexVyxG_tF" to i8*), i8* bitcast (i8* (i8*, %swift.type*)* @"$s10BufferView0aB5IndexV9_rawValueSVvg" to i8*), i8* bitcast (void (%Ts6HasherV*, i8*, %swift.type*)* @"$s10BufferView0aB5IndexV4hash4intoys6HasherVz_tF" to i8*), i8* bitcast (i64 (i8*, %swift.type*)* @"$s10BufferView0aB5IndexV9hashValueSivg" to i8*), i8* bitcast (void (%swift.opaque*, %swift.type*, %T10BufferView0aB8IteratorV*)* @"$s10BufferView0aB8IteratorV4nextxSgyF" to i8*), i8* bitcast (i64 (i8*, i64)* @"$s10BufferView15bufferviewtest1ySiA2AVySiGF" to i8*), i8* bitcast (i64 (i8*, i64, i64)* @"$s10BufferView15bufferviewtest2ySiA2AVySiG_SitF" to i8*), i8* bitcast (i64 (i8*, i64, i64)* @"$s10BufferView16bufferviewtest2bySiA2AVySiG_SitF" to i8*), i8* bitcast (i64 (i8*, i64, i64)* @"$s10BufferView16bufferviewtest2cySiA2AVySiG_SitF" to i8*), i8* bitcast (i64 (i8*, i64)* @"$s10BufferView15bufferviewtest3ySiA2AVySiGF" to i8*), i8* bitcast (void (%swift.opaque*, %swift.type*)* @"$s10BufferView9blackholeyyxzlF" to i8*), i8* bitcast (i1 (i8*, i64, i8*)* @"$s10BufferView15bufferviewtest4ySbA2AVySiG_AA0aB5IndexVySiGtF" to i8*), i8* bitcast (i64 (i8*, i64, i8*)* @"$s10BufferView15bufferviewtest5ySiA2AVySiG_AA0aB5IndexVySiGtF" to i8*), i8* bitcast (void (i8*, i64, i8*, i64)* @"$s10BufferView15bufferviewtest6yyAA07MutableaB0VySiG_AEtF" to i8*), i8* bitcast (void (i8*, i64)* @"$s10BufferView15bufferviewtest7yyAA07MutableaB0VySiGF" to i8*), i8* bitcast (i8* (i8*, i64)* @"$s10BufferView09OutputRawA0V11baseAddressSvvg" to i8*), i8* bitcast (i64 (i8*, i64)* @"$s10BufferView09OutputRawA0V5countSivg" to i8*), i8* bitcast ({ i8*, i64 } (i8*, i64)* @"$s10BufferView09OutputRawA0V11baseAddress5countACSv_SitcfC" to i8*), i8* bitcast ({ i8*, i64 } (%swift.type*, %swift.opaque*, i8*, i64, %swift.type*)* @"$s10BufferView09OutputRawA0V16initializeMemory2as9repeatingAA07MutableaB0VyxGxm_xtlF" to i8*), i8* bitcast ({ i8*, i64 } (%swift.opaque*, %swift.type*, %swift.opaque*, i8*, i64, %swift.type*, i8**)* @"$s10BufferView09OutputRawA0V16initializeMemory2as4from8IteratorQz9unwritten_AA07MutableaB0Vy7ElementQzG11initializedtAMm_xtSTRzlF" to i8*), i8* bitcast ({ i8*, i64 } (%swift.type*, %swift.opaque*, i8*, i64, %swift.type*, i8**)* @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlF" to i8*), i8* bitcast ({ i8*, i64 } (%swift.type*, i64, i64, i8*, i64, %swift.type*)* @"$s10BufferView09OutputRawA0V20moveInitializeMemory2as14fromContentsOfAA07MutableaB0VyxGxm_SryxGtlF" to i8*), i8* bitcast ({ i8*, i64 } (%swift.type*, i64, i64, i64, i64, i8*, i64, %swift.type*)* @"$s10BufferView09OutputRawA0V20moveInitializeMemory2as14fromContentsOfAA07MutableaB0VyxGxm_s5SliceVySryxGGtlF" to i8*), i8* bitcast (i64 (%swift.opaque*, i64, %swift.type*, i8*, i64, %swift.type*)* @"$s10BufferView09OutputRawA0V10storeBytes2of12toByteOffset2asSix_SixmtlF" to i8*), i8* bitcast ({ i8*, i64 } (%swift.type*, i8*, %swift.opaque*, i8*, i64, %swift.type*, %swift.refcounted*, %swift.error**)* @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlF" to i8*), i8* bitcast (i1 (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView09OutputRawA0V14hasPrefixRangeySbAA07MutableaB0VyxGlF" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSHAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMA" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to i8*), i8* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to i8*), i8* bitcast ({ i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView07MutableaB0VMa" to i8*), i8* bitcast ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView07MutableaB0VMF" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferViewAAVMa" to i8*), i8* bitcast ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferViewAAVMF" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB5IndexVMa" to i8*), i8* bitcast ({ i32, i32, i16, i16, i32, i32, i32, i32 }* @"$s10BufferView0aB5IndexVMF" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB8IteratorVMa" to i8*), i8* bitcast ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView0aB8IteratorVMF" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32, i32 }>* @"$s10BufferView09OutputRawA0VMn" to i8*), i8* bitcast (%swift.metadata_response (i64)* @"$s10BufferView09OutputRawA0VMa" to i8*), i8* bitcast (%swift.type* @"$s10BufferView09OutputRawA0VN" to i8*), i8* bitcast ({ i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }* @"$s10BufferView09OutputRawA0VMF" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB8IteratorVMa" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView0aB5IndexVMa" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferViewAAVMa" to i8*), i8* bitcast (%swift.metadata_response (i64, %swift.type*)* @"$s10BufferView07MutableaB0VMa" to i8*), i8* bitcast (i32* @"$s10BufferView07MutableaB0VyxGSTAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView07MutableaB0VyxGSlAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView07MutableaB0VyxGSMAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView07MutableaB0VyxGSKAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView07MutableaB0VyxGSkAAHc" to i8*), i8* bitcast (i32* @"$s10BufferViewAAVyxGSTAAHc" to i8*), i8* bitcast (i32* @"$s10BufferViewAAVyxGSlAAHc" to i8*), i8* bitcast (i32* @"$s10BufferViewAAVyxGSKAAHc" to i8*), i8* bitcast (i32* @"$s10BufferViewAAVyxGSkAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView0aB5IndexVyxGSQAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView0aB5IndexVyxGSHAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView0aB5IndexVyxGSxAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView0aB5IndexVyxGSLAAHc" to i8*), i8* bitcast (i32* @"$s10BufferView0aB8IteratorVyxGStAAHc" to i8*), i8* bitcast (%swift.type_metadata_record* @"$s10BufferView07MutableaB0VHn" to i8*), i8* bitcast (%swift.type_metadata_record* @"$s10BufferViewAAVHn" to i8*), i8* bitcast (%swift.type_metadata_record* @"$s10BufferView0aB5IndexVHn" to i8*), i8* bitcast (%swift.type_metadata_record* @"$s10BufferView0aB8IteratorVHn" to i8*), i8* bitcast (%swift.type_metadata_record* @"$s10BufferView09OutputRawA0VHn" to i8*), i8* bitcast (i16* @__swift_reflection_version to i8*)], section "llvm.metadata"

@"$s10BufferView07MutableaB0V5countSivpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V10startIndexAA0abE0VyxGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V8endIndexAA0abE0VyxGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V7indicesSnyAA0aB5IndexVyxGGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V7isEmptySbvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0VyACyxGqd__cSXRd__AA0aB5IndexVyxG5BoundRtd__luipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V9uncheckedACyxGqd___tcSXRd__AA0aB5IndexVyxG5BoundRtd__luipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V6offsetxSi_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V9uncheckedxSi_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V5firstxSgvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView07MutableaB0V4lastxSgvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV5startAA0aB5IndexVyxGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV5countSivpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV10startIndexAA0abD0VyxGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV8endIndexAA0abD0VyxGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV7indicesSnyAA0aB5IndexVyxGGvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV7isEmptySbvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAVyxAA0aB5IndexVyxGcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV9uncheckedxAA0aB5IndexVyxG_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAVyAByxGSnyAA0aB5IndexVyxGGcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV9uncheckedAByxGSnyAA0aB5IndexVyxGG_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAVyAByxGqd__cSXRd__AA0aB5IndexVyxG5BoundRtd__luipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV9uncheckedAByxGqd___tcSXRd__AA0aB5IndexVyxG5BoundRtd__luipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV6offsetxSi_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV15uncheckedOffsetxSi_tcipMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV5firstxSgvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferViewAAV4lastxSgvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView0aB5IndexV9_rawValueSVvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView0aB5IndexV9isAlignedSbvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView0aB5IndexV9hashValueSivpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView09OutputRawA0V11baseAddressSvvpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView09OutputRawA0V5countSivpMV" = alias { i32 }, { i32 }* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvpMV"
@"$s10BufferView09OutputRawA0VN" = alias %swift.type, bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*)

define swiftcc i8* @"$s10BufferView07MutableaB0V5startAA0aB5IndexVyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc i64 @"$s10BufferView07MutableaB0V5countSivg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i64 %1
}

define internal swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #19
  %4 = extractvalue { i8*, i64 } %3, 0
  %5 = extractvalue { i8*, i64 } %3, 1
  %6 = bitcast %swift.type* %Owner to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %9 = load i8*, i8** %8, align 8, !invariant.load !17
  %destroy = bitcast i8* %9 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %10 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %11 = insertvalue { i8*, i64 } %10, i64 %5, 1
  ret { i8*, i64 } %11
}

define swiftcc i8* @"$s10BufferView0aB5IndexV8rawValueACyxGSV_tcfC"(i8* %0, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V5start5count9dependsOnACyxGAA0aB5IndexVyxG_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = bitcast %swift.type* %Owner to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %6 = load i8*, i8** %5, align 8, !invariant.load !17
  %destroy = bitcast i8* %6 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %7 = icmp slt i64 %1, 0
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false)
  br i1 %8, label %33, label %9

9:                                                ; preds = %entry
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 10
  %flags = load i32, i32* %13, align 8, !invariant.load !17
  %14 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %14, 0
  br i1 %flags.isTriviallyDestroyable, label %29, label %15

15:                                               ; preds = %9
  %16 = ptrtoint i8* %0 to i64
  %17 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %17, 255
  %18 = add i64 %flags.alignmentMask, 1
  %19 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %18, i64 1)
  %20 = extractvalue { i64, i1 } %19, 0
  %21 = extractvalue { i64, i1 } %19, 1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  br i1 %22, label %34, label %23

23:                                               ; preds = %15
  %24 = and i64 %16, %20
  %25 = icmp eq i64 %24, 0
  %26 = xor i1 %25, true
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false)
  br i1 %27, label %35, label %28

28:                                               ; preds = %23
  br label %30

29:                                               ; preds = %9
  br label %30

30:                                               ; preds = %29, %28
  %31 = insertvalue { i8*, i64 } undef, i8* %0, 0
  %32 = insertvalue { i8*, i64 } %31, i64 %1, 1
  ret { i8*, i64 } %32

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %15
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc i1 @"$s10BufferView0aB5IndexV9isAlignedSbvg"(i8* %0, %swift.type* %Element) #0 {
entry:
  %1 = ptrtoint i8* %0 to i64
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 10
  %flags = load i32, i32* %5, align 8, !invariant.load !17
  %6 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %6, 255
  %7 = add i64 %flags.alignmentMask, 1
  %8 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %7, i64 1)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false)
  br i1 %11, label %15, label %12

12:                                               ; preds = %entry
  %13 = and i64 %1, %9
  %14 = icmp eq i64 %13, 0
  ret i1 %14

15:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i64, i64 } @"$s10BufferView07MutableaB0V06unsafecA7Pointer9dependsOnACyxGSgSryxG_qd__tclufC"(i64 %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = call swiftcc i64 @"$sSr11baseAddressSpyxGSgvg"(i64 %0, i64 %1, %swift.type* %Element)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %entry
  %6 = inttoptr i64 %3 to i8*
  br label %8

7:                                                ; preds = %entry
  br label %14

8:                                                ; preds = %5
  %9 = phi i8* [ %6, %5 ]
  %10 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %9, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner)
  %11 = extractvalue { i8*, i64 } %10, 0
  %12 = extractvalue { i8*, i64 } %10, 1
  %13 = ptrtoint i8* %11 to i64
  br label %14

14:                                               ; preds = %8, %7
  %15 = phi i64 [ 0, %7 ], [ %13, %8 ]
  %16 = phi i64 [ 0, %7 ], [ %12, %8 ]
  %17 = bitcast %swift.type* %Owner to i8***
  %18 = getelementptr inbounds i8**, i8*** %17, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %18, align 8, !invariant.load !17, !dereferenceable !18
  %19 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %20 = load i8*, i8** %19, align 8, !invariant.load !17
  %destroy = bitcast i8* %20 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %21 = insertvalue { i64, i64 } undef, i64 %15, 0
  %22 = insertvalue { i64, i64 } %21, i64 %16, 1
  ret { i64, i64 } %22
}

declare swiftcc i64 @"$sSr11baseAddressSpyxGSgvg"(i64, i64, %swift.type*) #0

define swiftcc { i64, i64 } @"$s10BufferView07MutableaB0V06unsafec3RawA7Pointer9dependsOnACyxGSgSw_qd__tclufC"(i64 %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %bitcast = alloca i64, align 8
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 10
  %flags = load i32, i32* %6, align 8, !invariant.load !17
  %7 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %7, 0
  br i1 %flags.isTriviallyDestroyable, label %8, label %49

8:                                                ; preds = %entry
  %9 = icmp eq i64 %0, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = inttoptr i64 %0 to i8*
  br label %13

12:                                               ; preds = %8
  br label %54

13:                                               ; preds = %10
  %14 = phi i8* [ %11, %10 ]
  %15 = inttoptr i64 %0 to i8*
  %16 = inttoptr i64 %1 to i8*
  %17 = ptrtoint i8* %16 to i64
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %17, %18
  %20 = sdiv i64 %19, 1
  %21 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %22 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %21, i32 0, i32 9
  %stride = load i64, i64* %22, align 8, !invariant.load !17
  %23 = icmp eq i64 %stride, 0
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %63, label %26

26:                                               ; preds = %13
  %27 = icmp eq i64 %20, -9223372036854775808
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = icmp eq i64 %stride, -1
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %66, label %32

32:                                               ; preds = %28
  br label %34

33:                                               ; preds = %26
  br label %34

34:                                               ; preds = %32, %33
  %35 = phi i1 [ false, %33 ], [ %29, %32 ]
  %36 = sdiv i64 %20, %stride
  %37 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false)
  br i1 %38, label %64, label %39

39:                                               ; preds = %34
  %40 = srem i64 %20, %stride
  %41 = icmp eq i64 %40, 0
  %42 = xor i1 %41, true
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %65, label %44

44:                                               ; preds = %39
  %45 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %14, i64 %36, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner)
  %46 = extractvalue { i8*, i64 } %45, 0
  %47 = extractvalue { i8*, i64 } %45, 1
  %48 = ptrtoint i8* %46 to i64
  br label %54

49:                                               ; preds = %entry
  %50 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %50)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %51 = bitcast i64* %bitcast to %swift.bridge**
  %52 = load %swift.bridge*, %swift.bridge** %51, align 8
  %53 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %52, i64 ptrtoint ([36 x i8]* @".str.35.BufferView/BufferView+Mutable.swift" to i64), i64 35, i8 2, i64 58, i32 0)
  unreachable

54:                                               ; preds = %44, %12
  %55 = phi i64 [ 0, %12 ], [ %48, %44 ]
  %56 = phi i64 [ 0, %12 ], [ %47, %44 ]
  %57 = bitcast %swift.type* %Owner to i8***
  %58 = getelementptr inbounds i8**, i8*** %57, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %58, align 8, !invariant.load !17, !dereferenceable !18
  %59 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %60 = load i8*, i8** %59, align 8, !invariant.load !17
  %destroy = bitcast i8* %60 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %61 = insertvalue { i64, i64 } undef, i64 %55, 0
  %62 = insertvalue { i64, i64 } %61, i64 %56, 1
  ret { i64, i64 } %62

63:                                               ; preds = %13
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

64:                                               ; preds = %34
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

65:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

66:                                               ; preds = %28
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i8* } @"$s10BufferView07MutableaB0V12makeIteratorAA0abE0VyxGyF"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  %10 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %11 = extractvalue %swift.metadata_response %10, 0
  %12 = call swiftcc { i8*, i8* } @"$s10BufferView0aB8IteratorV4from2to9dependsOnACyxGAA0aB5IndexVyxG_AJqd__tclufCTf4nndd_n"(i8* %0, i8* %9, %swift.type* %Element, %swift.type* %11)
  %13 = extractvalue { i8*, i8* } %12, 0
  %14 = extractvalue { i8*, i8* } %12, 1
  %15 = insertvalue { i8*, i8* } undef, i8* %13, 0
  %16 = insertvalue { i8*, i8* } %15, i8* %14, 1
  ret { i8*, i8* } %16
}

define swiftcc i8* @"$s10BufferView07MutableaB0V10startIndexAA0abE0VyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc i8* @"$s10BufferView07MutableaB0V8endIndexAA0abE0VyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  ret i8* %9
}

define swiftcc void @"$s10BufferView07MutableaB0V32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = bitcast %swift.opaque* %0 to %TSq.16*
  %8 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %3, i64 %4, %swift.type* %Element)
  %9 = extractvalue { i8*, i64 } %8, 0
  %10 = extractvalue { i8*, i64 } %8, 1
  %11 = bitcast %TSq.16* %7 to %swift.opaque*
  call swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %11, i8* %1, %swift.opaque* %2, i8* %9, i64 %10, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %12 = load %swift.error*, %swift.error** %6, align 8
  %13 = icmp ne %swift.error* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %entry
  ret void

15:                                               ; preds = %entry
  %16 = phi %swift.error* [ %12, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %16, %swift.error** %6, align 8
  ret void
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = alloca %T10BufferView07MutableaB0V, align 8
  %3 = bitcast %T10BufferView07MutableaB0V* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %0, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %1, i64* %.count._value, align 8
  %4 = bitcast %T10BufferView07MutableaB0V* %2 to %swift.opaque*
  %5 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %6 = extractvalue %swift.metadata_response %5, 0
  %7 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV5start5count9dependsOnAByxGAA0aB5IndexVyxG_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %4, %swift.type* %Element, %swift.type* %6)
  %8 = extractvalue { i8*, i64 } %7, 0
  %9 = extractvalue { i8*, i64 } %7, 1
  %10 = bitcast %T10BufferView07MutableaB0V* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10)
  %11 = insertvalue { i8*, i64 } undef, i8* %8, 0
  %12 = insertvalue { i8*, i64 } %11, i64 %9, 1
  ret { i8*, i64 } %12
}

define swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = bitcast %swift.opaque* %0 to %TSq.16*
  %8 = bitcast %TSq.16* %7 to %swift.opaque*
  %9 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %10 = alloca i8, i64 56, align 16
  %11 = bitcast i8* %10 to %swift.opaque*
  %12 = bitcast %swift.opaque* %11 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>*
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %12, i32 0, i32 1
  %14 = bitcast [16 x i8]* %13 to %swift.type**
  store %swift.type* %Element, %swift.type** %14, align 8
  %15 = getelementptr inbounds %swift.type*, %swift.type** %14, i32 1
  store %swift.type* %R, %swift.type** %15, align 8
  %16 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %12, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %16, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %16, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  %17 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %12, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %17, i32 0, i32 0
  store i64 %4, i64* %._value, align 8
  call swiftcc void @"$sSV17withMemoryRebound2to8capacity_q_xm_Siq_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %8, %swift.type* %Element, i64 %4, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFqd__SPyxGKXEfU_TA" to i8*), %swift.opaque* %11, i8* %9, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %18 = load %swift.error*, %swift.error** %6, align 8
  %19 = icmp ne %swift.error* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %entry
  %21 = bitcast %TSq.16* %7 to %swift.opaque*
  %22 = bitcast %swift.type* %R to i8***
  %23 = getelementptr inbounds i8**, i8*** %22, i64 -1
  %R.valueWitnesses = load i8**, i8*** %23, align 8, !invariant.load !17, !dereferenceable !18
  %24 = getelementptr inbounds i8*, i8** %R.valueWitnesses, i32 7
  %25 = load i8*, i8** %24, align 8, !invariant.load !17
  %storeEnumTagSinglePayload = bitcast i8* %25 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload(%swift.opaque* noalias %21, i32 0, i32 1, %swift.type* %R) #9
  ret void

26:                                               ; preds = %entry
  %27 = phi %swift.error* [ %18, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %27, %swift.error** %6, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSTAAST12makeIterator0E0QzyFTW"(%T10BufferView0aB8IteratorV* noalias nocapture sret(%T10BufferView0aB8IteratorV) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %3 = load i64, i64* %.count._value, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = call swiftcc { i8*, i8* } @"$s10BufferView07MutableaB0V12makeIteratorAA0abE0VyxGyF"(i8* %2, i64 %3, %swift.type* %"\CF\84_0_0") #19
  %7 = extractvalue { i8*, i8* } %6, 0
  %8 = extractvalue { i8*, i8* } %6, 1
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  store i8* %7, i8** %.curPointer._rawValue, align 8
  %.endPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 1
  %.endPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.endPointer, i32 0, i32 0
  store i8* %8, i8** %.endPointer._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSTAAST19underestimatedCountSivgTW"(%T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %1 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %2 = bitcast %T10BufferView07MutableaB0V* %0 to %swift.opaque*
  %3 = call swiftcc i64 @"$sSlsE19underestimatedCountSivg"(%swift.type* %Self, i8** %1, %swift.opaque* noalias nocapture swiftself %2) #19
  ret i64 %3
}

declare swiftcc i64 @"$sSlsE19underestimatedCountSivg"(%swift.type*, i8**, %swift.opaque* noalias nocapture swiftself) #0

define linkonce_odr hidden swiftcc i8 @"$s10BufferView07MutableaB0VyxGSTAAST31_customContainsEquatableElementySbSg0G0QzFTW"(%swift.opaque* noalias nocapture %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  ret i8 2
}

define linkonce_odr hidden swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$s10BufferView07MutableaB0VyxGSTAAST22_copyToContiguousArrays0fG0Vy7ElementQzGyFTW"(%T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %1 = alloca %T10BufferView07MutableaB0V, align 8
  %2 = bitcast %T10BufferView07MutableaB0V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %4 = load i64, i64* %.count._value, align 8
  %.start1 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %4, i64* %.count2._value, align 8
  %5 = bitcast %T10BufferView07MutableaB0V* %1 to %swift.opaque*
  %6 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %7 = call swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$sSlsE22_copyToContiguousArrays0cD0Vy7ElementQzGyFTf4g_n"(%swift.opaque* noalias nocapture %5, %swift.type* %Self, i8** %6) #19
  %8 = bitcast %T10BufferView07MutableaB0V* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8)
  ret %Ts28__ContiguousArrayStorageBaseC* %7
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSTAAST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTW"(%T10BufferView0aB8IteratorV* noalias nocapture %0, i64 %1, i64 %2, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %4 = alloca %T10BufferView07MutableaB0V, align 8
  %5 = bitcast %T10BufferView07MutableaB0V* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %7 = load i64, i64* %.count._value, align 8
  %.start1 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %4, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %6, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %4, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %7, i64* %.count2._value, align 8
  %8 = bitcast %T10BufferView0aB8IteratorV* %0 to %swift.opaque*
  %9 = bitcast %T10BufferView07MutableaB0V* %4 to %swift.opaque*
  %10 = call swiftcc i64 @"$sSTsE13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tF"(%swift.opaque* noalias nocapture %8, i64 %1, i64 %2, %swift.type* %Self, i8** %SelfWitnessTable, %swift.opaque* noalias nocapture swiftself %9) #19
  %11 = bitcast %T10BufferView07MutableaB0V* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11)
  ret i64 %10
}

declare swiftcc i64 @"$sSTsE13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tF"(%swift.opaque* noalias nocapture, i64, i64, %swift.type*, i8**, %swift.opaque* noalias nocapture swiftself) #0

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSTAAST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTW"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, %swift.type* %"\CF\84_1_0", %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %swift.opaque* %0 to %TSq.16*
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %7 = load i64, i64* %.count._value, align 8
  %8 = bitcast %swift.type* %Self to %swift.type**
  %9 = getelementptr inbounds %swift.type*, %swift.type** %8, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %9, align 8, !invariant.load !17
  %10 = bitcast %TSq.16* %5 to %swift.opaque*
  call swiftcc void @"$s10BufferView07MutableaB0V32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %10, i8* %1, %swift.opaque* %2, i8* %6, i64 %7, %swift.type* %"\CF\84_0_0", %swift.type* %"\CF\84_1_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #19
  %11 = load %swift.error*, %swift.error** %4, align 8
  %12 = icmp ne %swift.error* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  ret void

14:                                               ; preds = %entry
  %15 = phi %swift.error* [ %11, %entry ]
  store %swift.error* null, %swift.error** %4, align 8
  store %swift.error* %15, %swift.error** %4, align 8
  ret void
}

define swiftcc i1 @"$s10BufferView07MutableaB0VAASQRzlE13elementsEqualySbACyxGF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element, i8** %Element.Equatable) #0 {
entry:
  %4 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %2, i64 %3, %swift.type* %Element)
  %5 = extractvalue { i8*, i64 } %4, 0
  %6 = extractvalue { i8*, i64 } %4, 1
  %7 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %0, i64 %1, %swift.type* %Element)
  %8 = extractvalue { i8*, i64 } %7, 0
  %9 = extractvalue { i8*, i64 } %7, 1
  %10 = call swiftcc i1 @"$s10BufferViewAAVAASQRzlE13elementsEqualySbAByxGF"(i8* %8, i64 %9, i8* %5, i64 %6, %swift.type* %Element, i8** %Element.Equatable)
  ret i1 %10
}

define swiftcc i1 @"$s10BufferViewAAVAASQRzlE13elementsEqualySbAByxGF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element, i8** %Element.Equatable) #0 {
entry:
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %Ts12Zip2SequenceV8IteratorV, align 8
  %7 = alloca %Ts12Zip2SequenceV, align 8
  %8 = alloca %T10BufferViewAAV, align 8
  %9 = alloca %T10BufferViewAAV, align 8
  %10 = alloca %Ts12Zip2SequenceV, align 8
  %11 = alloca [4 x i8*], align 8
  %12 = alloca [4 x i8*], align 8
  %13 = bitcast %swift.type* %Element to i8***
  %14 = getelementptr inbounds i8**, i8*** %13, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %14, align 8, !invariant.load !17, !dereferenceable !18
  %15 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %16 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %15, i32 0, i32 8
  %size = load i64, i64* %16, align 8, !invariant.load !17
  %17 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %17)
  %18 = bitcast i8* %17 to %swift.opaque*
  %19 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %19)
  %20 = bitcast i8* %19 to %swift.opaque*
  %21 = call swiftcc %swift.metadata_response @swift_getTupleTypeMetadata2(i64 255, %swift.type* %Element, %swift.type* %Element, i8* null, i8** null) #7
  %22 = extractvalue %swift.metadata_response %21, 0
  %23 = extractvalue %swift.metadata_response %21, 1
  %24 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %22) #10
  %25 = extractvalue %swift.metadata_response %24, 0
  %26 = bitcast %swift.type* %25 to i8***
  %27 = getelementptr inbounds i8**, i8*** %26, i64 -1
  %.valueWitnesses = load i8**, i8*** %27, align 8, !invariant.load !17, !dereferenceable !18
  %28 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %29 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %28, i32 0, i32 8
  %size1 = load i64, i64* %29, align 8, !invariant.load !17
  %30 = alloca i8, i64 %size1, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %30)
  %31 = bitcast i8* %30 to %TSq.2*
  %32 = icmp eq i64 %3, %1
  br i1 %32, label %33, label %131

33:                                               ; preds = %entry
  %34 = icmp eq i64 %3, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %33
  br label %132

36:                                               ; preds = %33
  %37 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %38 = extractvalue %swift.metadata_response %37, 0
  %39 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %2, i8** %._rawValue._rawValue, align 8
  %40 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %0, i8** %._rawValue2._rawValue, align 8
  %41 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %42 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %43 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %38, i8*** undef) #8
  %44 = call swiftcc i1 @"$sSxsE2eeoiySbx_xtFZ"(%swift.opaque* noalias nocapture %41, %swift.opaque* noalias nocapture %42, %swift.type* %38, i8** %43, %swift.type* swiftself %38)
  %45 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45)
  %46 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46)
  br i1 %44, label %47, label %48

47:                                               ; preds = %36
  br label %132

48:                                               ; preds = %36
  %49 = bitcast %Ts12Zip2SequenceV8IteratorV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33, i8* %49)
  %50 = bitcast %Ts12Zip2SequenceV* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %50)
  %51 = bitcast %T10BufferViewAAV* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %51)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %8, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %2, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %8, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %52 = bitcast %T10BufferViewAAV* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %52)
  %.start3 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %9, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  store i8* %0, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %9, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  store i64 %1, i64* %.count4._value, align 8
  %53 = bitcast %Ts12Zip2SequenceV* %7 to %Ts12Zip2SequenceV.34*
  %54 = bitcast %T10BufferViewAAV* %8 to %swift.opaque*
  %55 = bitcast %T10BufferViewAAV* %9 to %swift.opaque*
  %56 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %57 = extractvalue %swift.metadata_response %56, 0
  %58 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %57, i8*** undef) #8
  %59 = bitcast %Ts12Zip2SequenceV.34* %53 to %swift.opaque*
  call swiftcc void @"$ss3zipys12Zip2SequenceVyxq_Gx_q_tSTRzSTR_r0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %59, %swift.opaque* noalias nocapture %54, %swift.opaque* noalias nocapture %55, %swift.type* %57, %swift.type* %57, i8** %58, i8** %58)
  %60 = bitcast %T10BufferViewAAV* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %60)
  %61 = bitcast %T10BufferViewAAV* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61)
  %._sequence1 = getelementptr inbounds %Ts12Zip2SequenceV, %Ts12Zip2SequenceV* %7, i32 0, i32 0
  %._sequence1.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence1, i32 0, i32 0
  %._sequence1.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %._sequence1.start, i32 0, i32 0
  %._sequence1.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._sequence1.start._rawValue, i32 0, i32 0
  %62 = load i8*, i8** %._sequence1.start._rawValue._rawValue, align 8
  %._sequence1.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence1, i32 0, i32 1
  %._sequence1.count._value = getelementptr inbounds %TSi, %TSi* %._sequence1.count, i32 0, i32 0
  %63 = load i64, i64* %._sequence1.count._value, align 8
  %._sequence2 = getelementptr inbounds %Ts12Zip2SequenceV, %Ts12Zip2SequenceV* %7, i32 0, i32 1
  %._sequence2.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence2, i32 0, i32 0
  %._sequence2.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %._sequence2.start, i32 0, i32 0
  %._sequence2.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._sequence2.start._rawValue, i32 0, i32 0
  %64 = load i8*, i8** %._sequence2.start._rawValue._rawValue, align 8
  %._sequence2.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence2, i32 0, i32 1
  %._sequence2.count._value = getelementptr inbounds %TSi, %TSi* %._sequence2.count, i32 0, i32 0
  %65 = load i64, i64* %._sequence2.count._value, align 8
  %66 = bitcast %Ts12Zip2SequenceV* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %66)
  %._sequence15 = getelementptr inbounds %Ts12Zip2SequenceV, %Ts12Zip2SequenceV* %10, i32 0, i32 0
  %._sequence15.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence15, i32 0, i32 0
  %._sequence15.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %._sequence15.start, i32 0, i32 0
  %._sequence15.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._sequence15.start._rawValue, i32 0, i32 0
  store i8* %62, i8** %._sequence15.start._rawValue._rawValue, align 8
  %._sequence15.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence15, i32 0, i32 1
  %._sequence15.count._value = getelementptr inbounds %TSi, %TSi* %._sequence15.count, i32 0, i32 0
  store i64 %63, i64* %._sequence15.count._value, align 8
  %._sequence26 = getelementptr inbounds %Ts12Zip2SequenceV, %Ts12Zip2SequenceV* %10, i32 0, i32 1
  %._sequence26.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence26, i32 0, i32 0
  %._sequence26.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %._sequence26.start, i32 0, i32 0
  %._sequence26.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._sequence26.start._rawValue, i32 0, i32 0
  store i8* %64, i8** %._sequence26.start._rawValue._rawValue, align 8
  %._sequence26.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %._sequence26, i32 0, i32 1
  %._sequence26.count._value = getelementptr inbounds %TSi, %TSi* %._sequence26.count, i32 0, i32 0
  store i64 %65, i64* %._sequence26.count._value, align 8
  %67 = bitcast %Ts12Zip2SequenceV8IteratorV* %6 to %Ts12Zip2SequenceV8IteratorV.35*
  %68 = bitcast [4 x i8*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %68)
  %69 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i32 0, i32 0
  %70 = bitcast %swift.type* %57 to i8*
  store i8* %70, i8** %69, align 8
  %71 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i32 0, i32 1
  %72 = bitcast %swift.type* %57 to i8*
  store i8* %72, i8** %71, align 8
  %73 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i32 0, i32 2
  %74 = bitcast i8** %58 to i8*
  store i8* %74, i8** %73, align 8
  %75 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i32 0, i32 3
  %76 = bitcast i8** %58 to i8*
  store i8* %76, i8** %75, align 8
  %77 = bitcast [4 x i8*]* %11 to i8**
  %78 = call swiftcc %swift.metadata_response @"$ss12Zip2SequenceVMa"(i64 0, i8** %77) #20
  %79 = bitcast [4 x i8*]* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %79)
  %80 = extractvalue %swift.metadata_response %78, 0
  %81 = bitcast %Ts12Zip2SequenceV8IteratorV.35* %67 to %swift.opaque*
  %82 = bitcast %Ts12Zip2SequenceV* %10 to %Ts12Zip2SequenceV.34*
  call swiftcc void @"$ss12Zip2SequenceV12makeIteratorAB0D0Vyxq__GyF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %81, %swift.type* %80, %Ts12Zip2SequenceV.34* noalias nocapture swiftself %82)
  %83 = bitcast %Ts12Zip2SequenceV* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %83)
  %84 = bitcast %Ts12Zip2SequenceV* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %84)
  br label %85

85:                                               ; preds = %126, %48
  %86 = bitcast %TSq.2* %31 to %TSq.36*
  %87 = bitcast [4 x i8*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %87)
  %88 = getelementptr inbounds [4 x i8*], [4 x i8*]* %12, i32 0, i32 0
  %89 = bitcast %swift.type* %57 to i8*
  store i8* %89, i8** %88, align 8
  %90 = getelementptr inbounds [4 x i8*], [4 x i8*]* %12, i32 0, i32 1
  %91 = bitcast %swift.type* %57 to i8*
  store i8* %91, i8** %90, align 8
  %92 = getelementptr inbounds [4 x i8*], [4 x i8*]* %12, i32 0, i32 2
  %93 = bitcast i8** %58 to i8*
  store i8* %93, i8** %92, align 8
  %94 = getelementptr inbounds [4 x i8*], [4 x i8*]* %12, i32 0, i32 3
  %95 = bitcast i8** %58 to i8*
  store i8* %95, i8** %94, align 8
  %96 = bitcast [4 x i8*]* %12 to i8**
  %97 = call swiftcc %swift.metadata_response @"$ss12Zip2SequenceV8IteratorVMa"(i64 0, i8** %96) #20
  %98 = bitcast [4 x i8*]* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %98)
  %99 = extractvalue %swift.metadata_response %97, 0
  %100 = bitcast %TSq.36* %86 to %swift.opaque*
  %101 = bitcast %Ts12Zip2SequenceV8IteratorV* %6 to %Ts12Zip2SequenceV8IteratorV.35*
  call swiftcc void @"$ss12Zip2SequenceV8IteratorV4next7ElementQz_AFQy_tSgyF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %100, %swift.type* %99, %Ts12Zip2SequenceV8IteratorV.35* nocapture swiftself %101)
  %102 = bitcast %TSq.2* %31 to %swift.opaque*
  %103 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %22) #7
  %104 = extractvalue %swift.metadata_response %103, 0
  %105 = bitcast %swift.type* %104 to i8***
  %106 = getelementptr inbounds i8**, i8*** %105, i64 -1
  %.valueWitnesses7 = load i8**, i8*** %106, align 8, !invariant.load !17, !dereferenceable !18
  %107 = getelementptr inbounds i8*, i8** %.valueWitnesses7, i32 6
  %108 = load i8*, i8** %107, align 8, !invariant.load !17
  %getEnumTagSinglePayload = bitcast i8* %108 to i32 (%swift.opaque*, i32, %swift.type*)*
  %109 = call i32 %getEnumTagSinglePayload(%swift.opaque* noalias %102, i32 1, %swift.type* %104) #8
  %110 = icmp ne i32 %109, 1
  br i1 %110, label %112, label %129

111:                                              ; No predecessors!
  unreachable

112:                                              ; preds = %85
  %113 = bitcast %TSq.2* %31 to <{}>*
  %114 = bitcast <{}>* %113 to %swift.opaque*
  %115 = bitcast %swift.type* %104 to %swift.tuple_type*
  %116 = getelementptr inbounds %swift.tuple_type, %swift.tuple_type* %115, i64 0, i32 3, i64 1, i32 1
  %.1.offset = load i32, i32* %116, align 8
  %117 = bitcast <{}>* %113 to i8*
  %118 = getelementptr inbounds i8, i8* %117, i32 %.1.offset
  %.elt = bitcast i8* %118 to %swift.opaque*
  %119 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 4
  %120 = load i8*, i8** %119, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %120 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %121 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %20, %swift.opaque* noalias %114, %swift.type* %Element) #9
  %122 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %18, %swift.opaque* noalias %.elt, %swift.type* %Element) #9
  %123 = call swiftcc i1 @"$sSQ2eeoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %20, %swift.opaque* noalias nocapture %18, %swift.type* swiftself %Element, %swift.type* %Element, i8** %Element.Equatable)
  %124 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %125 = load i8*, i8** %124, align 8, !invariant.load !17
  %destroy = bitcast i8* %125 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %18, %swift.type* %Element) #9
  call void %destroy(%swift.opaque* noalias %20, %swift.type* %Element) #9
  br i1 %123, label %126, label %127

126:                                              ; preds = %112
  br label %85

127:                                              ; preds = %112
  %128 = bitcast %Ts12Zip2SequenceV8IteratorV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %128)
  br label %132

129:                                              ; preds = %85
  %130 = bitcast %Ts12Zip2SequenceV8IteratorV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %130)
  br label %132

131:                                              ; preds = %entry
  br label %132

132:                                              ; preds = %35, %47, %127, %129, %131
  %133 = phi i1 [ false, %131 ], [ true, %129 ], [ false, %127 ], [ true, %47 ], [ true, %35 ]
  %134 = bitcast %TSq.2* %31 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %134)
  %135 = bitcast %swift.opaque* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %135)
  %136 = bitcast %swift.opaque* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %136)
  ret i1 %133
}

define swiftcc i8* @"$s10BufferView0aB5IndexV8advanced2byACyxGSi_tF"(i64 %0, i8* %1, %swift.type* %Element) #0 {
entry:
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %0, i64 %stride)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %1, i64 %7
  ret i8* %9
}

define swiftcc { i8*, i8* } @"$s10BufferView07MutableaB0V7indicesSnyAA0aB5IndexVyxGGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = alloca %TSn, align 8
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5)
  %6 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %0, i8** %._rawValue._rawValue, align 8
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %0, i64 %12
  %15 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  %16 = bitcast %TSn* %2 to %TSn.19*
  %17 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %18 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %19 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %20 = extractvalue %swift.metadata_response %19, 0
  %21 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %20, i8*** undef) #8
  %22 = bitcast %TSn.19* %16 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %22, %swift.opaque* noalias nocapture %17, %swift.opaque* noalias nocapture %18, %swift.type* %20, i8** %21)
  %23 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23)
  %24 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %25 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %26 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %27 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %27)
  %28 = insertvalue { i8*, i8* } undef, i8* %25, 0
  %29 = insertvalue { i8*, i8* } %28, i8* %26, 1
  ret { i8*, i8* } %29
}

declare swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**) #0

define swiftcc i1 @"$s10BufferView07MutableaB0V7isEmptySbvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = icmp eq i64 %1, 0
  ret i1 %2
}

define swiftcc void @"$s10BufferView07MutableaB0V12_checkBoundsyyAA0aB5IndexVyxGF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = ptrtoint i8* %0 to i64
  %4 = ptrtoint i8* %1 to i64
  %5 = sub i64 %3, %4
  %6 = sdiv i64 %5, 1
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = icmp eq i64 %stride, 0
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false)
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  br i1 %13, label %73, label %14

14:                                               ; preds = %entry
  %15 = icmp eq i64 %6, -9223372036854775808
  br i1 %15, label %16, label %21

16:                                               ; preds = %14
  %17 = icmp eq i64 %stride, -1
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  br i1 %19, label %79, label %20

20:                                               ; preds = %16
  br label %22

21:                                               ; preds = %14
  br label %22

22:                                               ; preds = %20, %21
  %23 = sdiv i64 %6, %stride
  %24 = srem i64 %6, %stride
  %25 = icmp eq i64 %24, 0
  %26 = xor i1 %25, true
  %27 = icmp slt i64 %23, 0
  %28 = or i1 %26, %27
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %74, label %30

30:                                               ; preds = %22
  %31 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %32
  %35 = ptrtoint i8* %34 to i64
  %36 = sub i64 %35, %3
  %37 = sdiv i64 %36, 1
  %38 = icmp eq i64 %37, -9223372036854775808
  br i1 %38, label %39, label %44

39:                                               ; preds = %30
  %40 = icmp eq i64 %stride, -1
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  br i1 %42, label %78, label %43

43:                                               ; preds = %39
  br label %45

44:                                               ; preds = %30
  br label %45

45:                                               ; preds = %43, %44
  %46 = sdiv i64 %37, %stride
  %47 = srem i64 %37, %stride
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = icmp slt i64 0, %46
  %51 = xor i1 %50, true
  %52 = or i1 %49, %51
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false)
  br i1 %53, label %75, label %54

54:                                               ; preds = %45
  %55 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %56 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %55, i32 0, i32 10
  %flags = load i32, i32* %56, align 8, !invariant.load !17
  %57 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %57, 0
  br i1 %flags.isTriviallyDestroyable, label %71, label %58

58:                                               ; preds = %54
  %59 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %59, 255
  %60 = add i64 %flags.alignmentMask, 1
  %61 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %60, i64 1)
  %62 = extractvalue { i64, i1 } %61, 0
  %63 = extractvalue { i64, i1 } %61, 1
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false)
  br i1 %64, label %76, label %65

65:                                               ; preds = %58
  %66 = and i64 %3, %62
  %67 = icmp eq i64 %66, 0
  %68 = xor i1 %67, true
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false)
  br i1 %69, label %77, label %70

70:                                               ; preds = %65
  br label %72

71:                                               ; preds = %54
  br label %72

72:                                               ; preds = %71, %70
  ret void

73:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

74:                                               ; preds = %22
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

75:                                               ; preds = %45
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

76:                                               ; preds = %58
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

77:                                               ; preds = %65
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

78:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

79:                                               ; preds = %16
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferView07MutableaB0V8distance4from2toSiAA0aB5IndexVyxG_AItF"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv i64 %6, 1
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = icmp eq i64 %stride, 0
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %30, label %15

15:                                               ; preds = %entry
  %16 = icmp eq i64 %7, -9223372036854775808
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = icmp eq i64 %stride, -1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  br label %23

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %21, %22
  %24 = sdiv i64 %7, %stride
  %25 = srem i64 %7, %stride
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  ret i64 %24

30:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

31:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

32:                                               ; preds = %17
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V12_checkBoundsyySnyAA0aB5IndexVyxGGF"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = ptrtoint i8* %0 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv i64 %6, 1
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = icmp eq i64 %stride, 0
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %96, label %15

15:                                               ; preds = %entry
  %16 = icmp eq i64 %7, -9223372036854775808
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = icmp eq i64 %stride, -1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %104, label %21

21:                                               ; preds = %17
  br label %23

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %21, %22
  %24 = sdiv i64 %7, %stride
  %25 = srem i64 %7, %stride
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = icmp slt i64 %24, 0
  %29 = or i1 %27, %28
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  br i1 %30, label %97, label %31

31:                                               ; preds = %23
  %32 = ptrtoint i8* %1 to i64
  %33 = sub i64 %32, %4
  %34 = sdiv i64 %33, 1
  %35 = icmp eq i64 %34, -9223372036854775808
  br i1 %35, label %36, label %41

36:                                               ; preds = %31
  %37 = icmp eq i64 %stride, -1
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false)
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false)
  br i1 %39, label %103, label %40

40:                                               ; preds = %36
  br label %42

41:                                               ; preds = %31
  br label %42

42:                                               ; preds = %40, %41
  %43 = sdiv i64 %34, %stride
  %44 = srem i64 %34, %stride
  %45 = icmp eq i64 %44, 0
  %46 = xor i1 %45, true
  %47 = icmp slt i64 %43, 0
  %48 = or i1 %46, %47
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false)
  br i1 %49, label %98, label %50

50:                                               ; preds = %42
  %51 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %52 = extractvalue { i64, i1 } %51, 0
  %53 = extractvalue { i64, i1 } %51, 1
  %54 = getelementptr inbounds i8, i8* %2, i64 %52
  %55 = ptrtoint i8* %54 to i64
  %56 = sub i64 %55, %32
  %57 = sdiv i64 %56, 1
  %58 = icmp eq i64 %57, -9223372036854775808
  br i1 %58, label %59, label %64

59:                                               ; preds = %50
  %60 = icmp eq i64 %stride, -1
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  %62 = call i1 @llvm.expect.i1(i1 %61, i1 false)
  br i1 %62, label %102, label %63

63:                                               ; preds = %59
  br label %65

64:                                               ; preds = %50
  br label %65

65:                                               ; preds = %63, %64
  %66 = sdiv i64 %57, %stride
  %67 = srem i64 %57, %stride
  %68 = icmp eq i64 %67, 0
  %69 = xor i1 %68, true
  %70 = icmp slt i64 %66, 0
  %71 = or i1 %69, %70
  %72 = call i1 @llvm.expect.i1(i1 %71, i1 false)
  br i1 %72, label %99, label %73

73:                                               ; preds = %65
  %74 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %75 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %74, i32 0, i32 10
  %flags = load i32, i32* %75, align 8, !invariant.load !17
  %76 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %76, 0
  br i1 %flags.isTriviallyDestroyable, label %94, label %77

77:                                               ; preds = %73
  %78 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %78, 255
  %79 = add i64 %flags.alignmentMask, 1
  %80 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %79, i64 1)
  %81 = extractvalue { i64, i1 } %80, 0
  %82 = extractvalue { i64, i1 } %80, 1
  %83 = call i1 @llvm.expect.i1(i1 %82, i1 false)
  br i1 %83, label %100, label %84

84:                                               ; preds = %77
  %85 = and i64 %4, %81
  %86 = icmp eq i64 %85, 0
  %87 = xor i1 %86, true
  %88 = and i64 %32, %81
  %89 = icmp eq i64 %88, 0
  %90 = xor i1 %89, true
  %91 = or i1 %87, %90
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false)
  br i1 %92, label %101, label %93

93:                                               ; preds = %84
  br label %95

94:                                               ; preds = %73
  br label %95

95:                                               ; preds = %94, %93
  ret void

96:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

97:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

98:                                               ; preds = %42
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

99:                                               ; preds = %65
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

100:                                              ; preds = %77
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

101:                                              ; preds = %84
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

102:                                              ; preds = %59
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

103:                                              ; preds = %36
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

104:                                              ; preds = %17
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferView07MutableaB0V5index5afterAA0aB5IndexVyxGAH_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 9
  %stride = load i64, i64* %6, align 8, !invariant.load !17
  %7 = getelementptr inbounds i8, i8* %0, i64 %stride
  ret i8* %7
}

define swiftcc i8* @"$s10BufferView07MutableaB0V5index6beforeAA0aB5IndexVyxGAH_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 9
  %stride = load i64, i64* %6, align 8, !invariant.load !17
  %7 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %8 = extractvalue { i64, i1 } %7, 0
  %9 = extractvalue { i64, i1 } %7, 1
  %10 = getelementptr inbounds i8, i8* %0, i64 %8
  ret i8* %10
}

define swiftcc void @"$s10BufferView07MutableaB0V9formIndex5afteryAA0abE0VyxGz_tF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = getelementptr inbounds i8, i8* %3, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %8, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V9formIndex6beforeyAA0abE0VyxGz_tF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %3, i64 %9
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %11, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc i8* @"$s10BufferView07MutableaB0V5index_8offsetByAA0aB5IndexVyxGAH_SitF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %0, i64 %9
  ret i8* %11
}

define swiftcc void @"$s10BufferView07MutableaB0V9formIndex_8offsetByyAA0abE0VyxGz_SitF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Element to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = getelementptr inbounds i8, i8* %4, i64 %10
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %12, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc i64 @"$s10BufferView0aB5IndexV8distance2toSiACyxG_tF"(i8* %0, i8* %1, %swift.type* %Element) #0 {
entry:
  %2 = ptrtoint i8* %0 to i64
  %3 = ptrtoint i8* %1 to i64
  %4 = sub i64 %2, %3
  %5 = sdiv i64 %4, 1
  %6 = bitcast %swift.type* %Element to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = icmp eq i64 %stride, 0
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false)
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false)
  br i1 %12, label %28, label %13

13:                                               ; preds = %entry
  %14 = icmp eq i64 %5, -9223372036854775808
  br i1 %14, label %15, label %20

15:                                               ; preds = %13
  %16 = icmp eq i64 %stride, -1
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  br label %21

20:                                               ; preds = %13
  br label %21

21:                                               ; preds = %19, %20
  %22 = sdiv i64 %5, %stride
  %23 = srem i64 %5, %stride
  %24 = icmp eq i64 %23, 0
  %25 = xor i1 %24, true
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  ret i64 %22

28:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

29:                                               ; preds = %21
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

30:                                               ; preds = %15
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv i64 %6, 1
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = icmp eq i64 %stride, 0
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %74, label %15

15:                                               ; preds = %entry
  %16 = icmp eq i64 %7, -9223372036854775808
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = icmp eq i64 %stride, -1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %80, label %21

21:                                               ; preds = %17
  br label %23

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %21, %22
  %24 = sdiv i64 %7, %stride
  %25 = srem i64 %7, %stride
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = icmp slt i64 %24, 0
  %29 = or i1 %27, %28
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  br i1 %30, label %75, label %31

31:                                               ; preds = %23
  %32 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %33 = extractvalue { i64, i1 } %32, 0
  %34 = extractvalue { i64, i1 } %32, 1
  %35 = getelementptr inbounds i8, i8* %2, i64 %33
  %36 = ptrtoint i8* %35 to i64
  %37 = sub i64 %36, %4
  %38 = sdiv i64 %37, 1
  %39 = icmp eq i64 %38, -9223372036854775808
  br i1 %39, label %40, label %45

40:                                               ; preds = %31
  %41 = icmp eq i64 %stride, -1
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %79, label %44

44:                                               ; preds = %40
  br label %46

45:                                               ; preds = %31
  br label %46

46:                                               ; preds = %44, %45
  %47 = sdiv i64 %38, %stride
  %48 = srem i64 %38, %stride
  %49 = icmp eq i64 %48, 0
  %50 = xor i1 %49, true
  %51 = icmp slt i64 0, %47
  %52 = xor i1 %51, true
  %53 = or i1 %50, %52
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %76, label %55

55:                                               ; preds = %46
  %56 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %57 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %56, i32 0, i32 10
  %flags = load i32, i32* %57, align 8, !invariant.load !17
  %58 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %58, 0
  br i1 %flags.isTriviallyDestroyable, label %72, label %59

59:                                               ; preds = %55
  %60 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %60, 255
  %61 = add i64 %flags.alignmentMask, 1
  %62 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %61, i64 1)
  %63 = extractvalue { i64, i1 } %62, 0
  %64 = extractvalue { i64, i1 } %62, 1
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false)
  br i1 %65, label %77, label %66

66:                                               ; preds = %59
  %67 = and i64 %4, %63
  %68 = icmp eq i64 %67, 0
  %69 = xor i1 %68, true
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %78, label %71

71:                                               ; preds = %66
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %73

72:                                               ; preds = %55
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %73

73:                                               ; preds = %72, %71
  ret void

74:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

75:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

76:                                               ; preds = %46
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

77:                                               ; preds = %59
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

78:                                               ; preds = %66
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

79:                                               ; preds = %40
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

80:                                               ; preds = %17
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 10
  %flags = load i32, i32* %7, align 8, !invariant.load !17
  %8 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %8, 0
  br i1 %flags.isTriviallyDestroyable, label %9, label %10

9:                                                ; preds = %entry
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %11

10:                                               ; preds = %entry
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %11

11:                                               ; preds = %9, %10
  ret void
}

; Function Attrs: noinline
define swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGciM"(i8* noalias dereferenceable(32) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #1 {
entry:
  %4 = alloca [32 x i8], align 8
  %5 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$s10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %6 = call i8* @llvm.coro.begin(token %5, i8* null)
  %7 = ptrtoint i8* %1 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = sdiv i64 %9, 1
  %11 = bitcast %swift.type* %Element to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %89, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %10, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %95, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %10, %stride
  %28 = srem i64 %10, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = icmp slt i64 %27, 0
  %32 = or i1 %30, %31
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %90, label %34

34:                                               ; preds = %26
  %35 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %36 = extractvalue { i64, i1 } %35, 0
  %37 = extractvalue { i64, i1 } %35, 1
  %38 = getelementptr inbounds i8, i8* %2, i64 %36
  %39 = ptrtoint i8* %38 to i64
  %40 = sub i64 %39, %7
  %41 = sdiv i64 %40, 1
  %42 = icmp eq i64 %41, -9223372036854775808
  br i1 %42, label %43, label %48

43:                                               ; preds = %34
  %44 = icmp eq i64 %stride, -1
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  br i1 %46, label %94, label %47

47:                                               ; preds = %43
  br label %49

48:                                               ; preds = %34
  br label %49

49:                                               ; preds = %47, %48
  %50 = sdiv i64 %41, %stride
  %51 = srem i64 %41, %stride
  %52 = icmp eq i64 %51, 0
  %53 = xor i1 %52, true
  %54 = icmp slt i64 0, %50
  %55 = xor i1 %54, true
  %56 = or i1 %53, %55
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false)
  br i1 %57, label %91, label %58

58:                                               ; preds = %49
  %59 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %60 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %59, i32 0, i32 10
  %flags = load i32, i32* %60, align 8, !invariant.load !17
  %61 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %61, 0
  br i1 %flags.isTriviallyDestroyable, label %62, label %63

62:                                               ; preds = %58
  br label %76

63:                                               ; preds = %58
  %64 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %64, 255
  %65 = add i64 %flags.alignmentMask, 1
  %66 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %65, i64 1)
  %67 = extractvalue { i64, i1 } %66, 0
  %68 = extractvalue { i64, i1 } %66, 1
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false)
  br i1 %69, label %92, label %70

70:                                               ; preds = %63
  %71 = and i64 %7, %67
  %72 = icmp eq i64 %71, 0
  %73 = xor i1 %72, true
  %74 = call i1 @llvm.expect.i1(i1 %73, i1 false)
  br i1 %74, label %93, label %75

75:                                               ; preds = %70
  br label %76

76:                                               ; preds = %62, %75
  %77 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %77)
  %78 = call i8* @llvm.coro.prepare.retcon(i8* bitcast ({ i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tciM" to i8*))
  %79 = bitcast i8* %78 to { i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)*
  %80 = call swiftcc { i8*, %swift.opaque* } %79(i8* noalias dereferenceable(32) %77, i8* %1, i8* %2, i64 %3, %swift.type* %Element)
  %81 = extractvalue { i8*, %swift.opaque* } %80, 0
  %82 = extractvalue { i8*, %swift.opaque* } %80, 1
  %83 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %82)
  br i1 %83, label %86, label %84

84:                                               ; preds = %76
  %85 = bitcast i8* %81 to void (i8*, i1)*
  call swiftcc void %85(i8* noalias dereferenceable(32) %77, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %77)
  br label %coro.end

86:                                               ; preds = %76
  %87 = bitcast i8* %81 to void (i8*, i1)*
  call swiftcc void %87(i8* noalias dereferenceable(32) %77, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %77)
  br label %coro.end

coro.end:                                         ; preds = %84, %86
  %88 = call i1 @llvm.coro.end(i8* %6, i1 false)
  unreachable

89:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

90:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

91:                                               ; preds = %49
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

92:                                               ; preds = %63
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

93:                                               ; preds = %70
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

94:                                               ; preds = %43
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

95:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tciM"(i8* noalias dereferenceable(32) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #1 {
entry:
  %4 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$s10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %5 = call i8* @llvm.coro.begin(token %4, i8* null)
  %6 = bitcast i8* %1 to %swift.opaque*
  %7 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %6)
  br i1 %7, label %9, label %8

8:                                                ; preds = %entry
  br label %coro.end

9:                                                ; preds = %entry
  br label %coro.end

coro.end:                                         ; preds = %8, %9
  %10 = call i1 @llvm.coro.end(i8* %5, i1 false)
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0VyxAA0aB5IndexVyxGcis"(%swift.opaque* noalias nocapture %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv i64 %6, 1
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = icmp eq i64 %stride, 0
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %80, label %15

15:                                               ; preds = %entry
  %16 = icmp eq i64 %7, -9223372036854775808
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = icmp eq i64 %stride, -1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %86, label %21

21:                                               ; preds = %17
  br label %23

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %21, %22
  %24 = sdiv i64 %7, %stride
  %25 = srem i64 %7, %stride
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = icmp slt i64 %24, 0
  %29 = or i1 %27, %28
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  br i1 %30, label %81, label %31

31:                                               ; preds = %23
  %32 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %33 = extractvalue { i64, i1 } %32, 0
  %34 = extractvalue { i64, i1 } %32, 1
  %35 = getelementptr inbounds i8, i8* %2, i64 %33
  %36 = ptrtoint i8* %35 to i64
  %37 = sub i64 %36, %4
  %38 = sdiv i64 %37, 1
  %39 = icmp eq i64 %38, -9223372036854775808
  br i1 %39, label %40, label %45

40:                                               ; preds = %31
  %41 = icmp eq i64 %stride, -1
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %85, label %44

44:                                               ; preds = %40
  br label %46

45:                                               ; preds = %31
  br label %46

46:                                               ; preds = %44, %45
  %47 = sdiv i64 %38, %stride
  %48 = srem i64 %38, %stride
  %49 = icmp eq i64 %48, 0
  %50 = xor i1 %49, true
  %51 = icmp slt i64 0, %47
  %52 = xor i1 %51, true
  %53 = or i1 %50, %52
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %82, label %55

55:                                               ; preds = %46
  %56 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %57 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %56, i32 0, i32 10
  %flags = load i32, i32* %57, align 8, !invariant.load !17
  %58 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %58, 0
  br i1 %flags.isTriviallyDestroyable, label %59, label %60

59:                                               ; preds = %55
  br label %73

60:                                               ; preds = %55
  %61 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %61, 255
  %62 = add i64 %flags.alignmentMask, 1
  %63 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %62, i64 1)
  %64 = extractvalue { i64, i1 } %63, 0
  %65 = extractvalue { i64, i1 } %63, 1
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  br i1 %66, label %83, label %67

67:                                               ; preds = %60
  %68 = and i64 %4, %64
  %69 = icmp eq i64 %68, 0
  %70 = xor i1 %69, true
  %71 = call i1 @llvm.expect.i1(i1 %70, i1 false)
  br i1 %71, label %84, label %72

72:                                               ; preds = %67
  br label %73

73:                                               ; preds = %59, %72
  %74 = bitcast i8* %1 to %swift.opaque*
  %75 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %76 = load i8*, i8** %75, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %76 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %77 = call %swift.opaque* %assignWithCopy(%swift.opaque* %74, %swift.opaque* %0, %swift.type* %Element) #9
  %78 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %79 = load i8*, i8** %78, align 8, !invariant.load !17
  %destroy = bitcast i8* %79 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %0, %swift.type* %Element) #9
  ret void

80:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

81:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

82:                                               ; preds = %46
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

83:                                               ; preds = %60
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

84:                                               ; preds = %67
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

85:                                               ; preds = %40
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

86:                                               ; preds = %17
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %2, i8* %3, %swift.type* %T) #0 {
entry:
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %4 = bitcast %swift.type* %T to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %T.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 8
  %size = load i64, i64* %7, align 8, !invariant.load !17
  %8 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %8)
  %9 = bitcast i8* %8 to %swift.opaque*
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %swift.opaque*
  %12 = alloca i8, i64 40, align 16
  %13 = bitcast i8* %12 to %swift.opaque*
  %14 = bitcast %swift.opaque* %13 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>*
  %15 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %14, i32 0, i32 1
  %16 = bitcast [8 x i8]* %15 to %swift.type**
  store %swift.type* %T, %swift.type** %16, align 8
  %17 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %14, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %17, i32 0, i32 0
  store i8* %3, i8** %._rawValue, align 8
  %18 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %14, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %18, i32 0, i32 0
  store i64 %1, i64* %._value, align 8
  %19 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %20 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %19, i32 0, i32 10
  %flags = load i32, i32* %20, align 8, !invariant.load !17
  %21 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %21, 255
  %22 = add i64 %flags.alignmentMask, 1
  %23 = call i1 @llvm.is.constant.i64(i64 %22)
  br i1 %23, label %37, label %24

24:                                               ; preds = %entry
  %25 = icmp slt i64 0, %22
  %26 = xor i1 %25, true
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false)
  br i1 %27, label %75, label %28

28:                                               ; preds = %24
  %29 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %22, i64 1)
  %30 = extractvalue { i64, i1 } %29, 0
  %31 = extractvalue { i64, i1 } %29, 1
  %32 = and i64 %22, %30
  %33 = icmp eq i64 %32, 0
  %34 = xor i1 %33, true
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false)
  br i1 %35, label %76, label %36

36:                                               ; preds = %28
  br label %38

37:                                               ; preds = %entry
  br label %38

38:                                               ; preds = %37, %36
  %39 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %40 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %39, i32 0, i32 9
  %stride = load i64, i64* %40, align 8, !invariant.load !17
  %41 = icmp slt i64 16, %22
  br i1 %41, label %60, label %42

42:                                               ; preds = %38
  %43 = icmp slt i64 1024, %stride
  br i1 %43, label %45, label %44

44:                                               ; preds = %42
  br label %48

45:                                               ; preds = %42
  %46 = call zeroext i1 @swift_stdlib_isStackAllocationSafe(i64 %stride, i64 %22)
  br i1 %46, label %47, label %61

47:                                               ; preds = %45
  br label %48

48:                                               ; preds = %47, %44
  %49 = mul i64 1, %stride
  %50 = call i64 @llvm.umax.i64(i64 1, i64 %49)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %50, align 16
  call swiftcc void @"$ss41_withUnprotectedUnsafeTemporaryAllocation2of8capacity_q_xm_Siq_SryxGKXEtKr0_lFq_BpKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %9, i8* %temp_alloc, i64 1, %swift.type* %T, i8* bitcast (void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)* @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlFxSryxGXEfU_TA" to i8*), %swift.opaque* %13, %swift.type* %T, %swift.type* %T, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  %51 = load %swift.error*, %swift.error** %swifterror, align 8
  %52 = icmp ne %swift.error* %51, null
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = phi %swift.error* [ %51, %48 ]
  store %swift.error* null, %swift.error** %swifterror, align 8
  call void @llvm.stackrestore(i8* %spsave)
  store %swift.error* %54, %swift.error** %swifterror, align 8
  call swiftcc void @swift_willThrow(i8* swiftself undef, %swift.error** noalias nocapture readonly swifterror dereferenceable(8) %swifterror) #9
  store %swift.error* null, %swift.error** %swifterror, align 8
  call void @swift_errorRelease(%swift.error* %54) #9
  br label %70

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8*, i8** %T.valueWitnesses, i32 4
  %57 = load i8*, i8** %56, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %57 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %58 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %11, %swift.opaque* noalias %9, %swift.type* %T) #9
  call void @llvm.stackrestore(i8* %spsave)
  %59 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %0, %swift.opaque* noalias %11, %swift.type* %T) #9
  br label %72

60:                                               ; preds = %38
  br label %62

61:                                               ; preds = %45
  br label %62

62:                                               ; preds = %60, %61
  %63 = phi i64 [ 0, %61 ], [ %22, %60 ]
  %64 = sub i64 %63, 1
  %65 = call noalias i8* @swift_slowAlloc(i64 %stride, i64 %64) #9
  call swiftcc void @"$ss41_withUnprotectedUnsafeTemporaryAllocation2of8capacity_q_xm_Siq_SryxGKXEtKr0_lFq_BpKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %65, i64 1, %swift.type* %T, i8* bitcast (void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)* @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlFxSryxGXEfU_TA" to i8*), %swift.opaque* %13, %swift.type* %T, %swift.type* %T, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  %66 = load %swift.error*, %swift.error** %swifterror, align 8
  %67 = icmp ne %swift.error* %66, null
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = phi %swift.error* [ %66, %62 ]
  store %swift.error* null, %swift.error** %swifterror, align 8
  call void @swift_errorRelease(%swift.error* %69) #9
  call void @swift_slowDealloc(i8* %65, i64 -1, i64 -1) #9
  br label %70

70:                                               ; preds = %68, %53
  unreachable

71:                                               ; preds = %62
  call void @swift_slowDealloc(i8* %65, i64 -1, i64 -1) #9
  br label %72

72:                                               ; preds = %71, %55
  %73 = bitcast %swift.opaque* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %73)
  %74 = bitcast %swift.opaque* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %74)
  ret void

75:                                               ; preds = %24
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

76:                                               ; preds = %28
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

declare swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque), i64, %swift.type*, i8*, %swift.type*) #0

define swiftcc void @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tcis"(%swift.opaque* noalias nocapture %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast i8* %1 to %swift.opaque*
  %5 = bitcast %swift.type* %Element to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %8 = load i8*, i8** %7, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %8 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %9 = call %swift.opaque* %assignWithCopy(%swift.opaque* %4, %swift.opaque* %0, %swift.type* %Element) #9
  %10 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %11 = load i8*, i8** %10, align 8, !invariant.load !17
  %destroy = bitcast i8* %11 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %0, %swift.type* %Element) #9
  ret void
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGcig"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %5 = alloca %T10BufferView07MutableaB0V, align 8
  %6 = ptrtoint i8* %0 to i64
  %7 = ptrtoint i8* %2 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv i64 %8, 1
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 9
  %stride = load i64, i64* %13, align 8, !invariant.load !17
  %14 = icmp eq i64 %stride, 0
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  br i1 %16, label %124, label %17

17:                                               ; preds = %entry
  %18 = icmp eq i64 %9, -9223372036854775808
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = icmp eq i64 %stride, -1
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  br i1 %22, label %132, label %23

23:                                               ; preds = %19
  br label %25

24:                                               ; preds = %17
  br label %25

25:                                               ; preds = %23, %24
  %26 = sdiv i64 %9, %stride
  %27 = srem i64 %9, %stride
  %28 = icmp eq i64 %27, 0
  %29 = xor i1 %28, true
  %30 = icmp slt i64 %26, 0
  %31 = or i1 %29, %30
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false)
  br i1 %32, label %125, label %33

33:                                               ; preds = %25
  %34 = ptrtoint i8* %1 to i64
  %35 = sub i64 %34, %6
  %36 = sdiv i64 %35, 1
  %37 = icmp eq i64 %36, -9223372036854775808
  br i1 %37, label %38, label %43

38:                                               ; preds = %33
  %39 = icmp eq i64 %stride, -1
  %40 = call i1 @llvm.expect.i1(i1 %39, i1 false)
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %131, label %42

42:                                               ; preds = %38
  br label %44

43:                                               ; preds = %33
  br label %44

44:                                               ; preds = %42, %43
  %45 = sdiv i64 %36, %stride
  %46 = srem i64 %36, %stride
  %47 = icmp eq i64 %46, 0
  %48 = xor i1 %47, true
  %49 = icmp slt i64 %45, 0
  %50 = or i1 %48, %49
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  br i1 %51, label %126, label %52

52:                                               ; preds = %44
  %53 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %54 = extractvalue { i64, i1 } %53, 0
  %55 = extractvalue { i64, i1 } %53, 1
  %56 = getelementptr inbounds i8, i8* %2, i64 %54
  %57 = ptrtoint i8* %56 to i64
  %58 = sub i64 %57, %34
  %59 = sdiv i64 %58, 1
  %60 = icmp eq i64 %59, -9223372036854775808
  br i1 %60, label %61, label %66

61:                                               ; preds = %52
  %62 = icmp eq i64 %stride, -1
  %63 = call i1 @llvm.expect.i1(i1 %62, i1 false)
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false)
  br i1 %64, label %130, label %65

65:                                               ; preds = %61
  br label %67

66:                                               ; preds = %52
  br label %67

67:                                               ; preds = %65, %66
  %68 = sdiv i64 %59, %stride
  %69 = srem i64 %59, %stride
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %70, true
  %72 = icmp slt i64 %68, 0
  %73 = or i1 %71, %72
  %74 = call i1 @llvm.expect.i1(i1 %73, i1 false)
  br i1 %74, label %127, label %75

75:                                               ; preds = %67
  %76 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %77 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %76, i32 0, i32 10
  %flags = load i32, i32* %77, align 8, !invariant.load !17
  %78 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %78, 0
  br i1 %flags.isTriviallyDestroyable, label %79, label %80

79:                                               ; preds = %75
  br label %97

80:                                               ; preds = %75
  %81 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %81, 255
  %82 = add i64 %flags.alignmentMask, 1
  %83 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %82, i64 1)
  %84 = extractvalue { i64, i1 } %83, 0
  %85 = extractvalue { i64, i1 } %83, 1
  %86 = call i1 @llvm.expect.i1(i1 %85, i1 false)
  br i1 %86, label %128, label %87

87:                                               ; preds = %80
  %88 = and i64 %6, %84
  %89 = icmp eq i64 %88, 0
  %90 = xor i1 %89, true
  %91 = and i64 %34, %84
  %92 = icmp eq i64 %91, 0
  %93 = xor i1 %92, true
  %94 = or i1 %90, %93
  %95 = call i1 @llvm.expect.i1(i1 %94, i1 false)
  br i1 %95, label %129, label %96

96:                                               ; preds = %87
  br label %97

97:                                               ; preds = %79, %96
  %98 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %98)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %0, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.upperBound._rawValue._rawValue, align 8
  %99 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %100 = extractvalue %swift.metadata_response %99, 0
  %101 = extractvalue %swift.metadata_response %99, 1
  %102 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %100, i8*** undef) #8
  %103 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %100, i8** %102) #10
  %104 = extractvalue %swift.metadata_response %103, 0
  %105 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %100, i8*** undef) #8
  %106 = call i8** @"$sS2iSZsWl"() #10
  %107 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %108 = getelementptr inbounds i8**, i8*** %107, i32 0
  store i8** %105, i8*** %108, align 8
  %109 = getelementptr inbounds i8**, i8*** %107, i32 1
  store i8** %106, i8*** %109, align 8
  %110 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %104, i8*** %107) #8
  %111 = bitcast %TSn* %4 to %swift.opaque*
  %112 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %104, i8** %110, %swift.opaque* noalias nocapture swiftself %111)
  %113 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %113)
  %114 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %114)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %2, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %115 = bitcast %T10BufferView07MutableaB0V* %5 to %swift.opaque*
  %116 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %117 = extractvalue %swift.metadata_response %116, 0
  %118 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %112, %swift.opaque* noalias nocapture %115, %swift.type* %Element, %swift.type* %117)
  %119 = extractvalue { i8*, i64 } %118, 0
  %120 = extractvalue { i8*, i64 } %118, 1
  %121 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %121)
  %122 = insertvalue { i8*, i64 } undef, i8* %119, 0
  %123 = insertvalue { i8*, i64 } %122, i64 %120, 1
  ret { i8*, i64 } %123

124:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

125:                                              ; preds = %25
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

126:                                              ; preds = %44
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

127:                                              ; preds = %67
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

128:                                              ; preds = %80
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

129:                                              ; preds = %87
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

130:                                              ; preds = %61
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

131:                                              ; preds = %38
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

132:                                              ; preds = %19
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcig"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %5 = alloca %T10BufferView07MutableaB0V, align 8
  %6 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %0, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.upperBound._rawValue._rawValue, align 8
  %7 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %8 = extractvalue %swift.metadata_response %7, 0
  %9 = extractvalue %swift.metadata_response %7, 1
  %10 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %8, i8*** undef) #8
  %11 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %8, i8** %10) #10
  %12 = extractvalue %swift.metadata_response %11, 0
  %13 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %8, i8*** undef) #8
  %14 = call i8** @"$sS2iSZsWl"() #10
  %15 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %16 = getelementptr inbounds i8**, i8*** %15, i32 0
  store i8** %13, i8*** %16, align 8
  %17 = getelementptr inbounds i8**, i8*** %15, i32 1
  store i8** %14, i8*** %17, align 8
  %18 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %12, i8*** %15) #8
  %19 = bitcast %TSn* %4 to %swift.opaque*
  %20 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %12, i8** %18, %swift.opaque* noalias nocapture swiftself %19)
  %21 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21)
  %22 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %2, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %23 = bitcast %T10BufferView07MutableaB0V* %5 to %swift.opaque*
  %24 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %25 = extractvalue %swift.metadata_response %24, 0
  %26 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %20, %swift.opaque* noalias nocapture %23, %swift.type* %Element, %swift.type* %25)
  %27 = extractvalue { i8*, i64 } %26, 0
  %28 = extractvalue { i8*, i64 } %26, 1
  %29 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29)
  %30 = insertvalue { i8*, i64 } undef, i8* %27, 0
  %31 = insertvalue { i8*, i64 } %30, i64 %28, 1
  ret { i8*, i64 } %31
}

define swiftcc void @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGcis"(i8* %0, i64 %1, i8* %2, i8* %3, i8* %4, i64 %5, %swift.type* %Element) #0 {
entry:
  %6 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %7 = alloca %TSn, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %8 = ptrtoint i8* %2 to i64
  %9 = ptrtoint i8* %4 to i64
  %10 = sub i64 %8, %9
  %11 = sdiv i64 %10, 1
  %12 = bitcast %swift.type* %Element to i8***
  %13 = getelementptr inbounds i8**, i8*** %12, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %13, align 8, !invariant.load !17, !dereferenceable !18
  %14 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 9
  %stride = load i64, i64* %15, align 8, !invariant.load !17
  %16 = icmp eq i64 %stride, 0
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %132, label %19

19:                                               ; preds = %entry
  %20 = icmp eq i64 %11, -9223372036854775808
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = icmp eq i64 %stride, -1
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %141, label %25

25:                                               ; preds = %21
  br label %27

26:                                               ; preds = %19
  br label %27

27:                                               ; preds = %25, %26
  %28 = sdiv i64 %11, %stride
  %29 = srem i64 %11, %stride
  %30 = icmp eq i64 %29, 0
  %31 = xor i1 %30, true
  %32 = icmp slt i64 %28, 0
  %33 = or i1 %31, %32
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  br i1 %34, label %133, label %35

35:                                               ; preds = %27
  %36 = ptrtoint i8* %3 to i64
  %37 = sub i64 %36, %8
  %38 = sdiv i64 %37, 1
  %39 = icmp eq i64 %38, -9223372036854775808
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = icmp eq i64 %stride, -1
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %140, label %44

44:                                               ; preds = %40
  br label %46

45:                                               ; preds = %35
  br label %46

46:                                               ; preds = %44, %45
  %47 = sdiv i64 %38, %stride
  %48 = srem i64 %38, %stride
  %49 = icmp eq i64 %48, 0
  %50 = xor i1 %49, true
  %51 = icmp slt i64 %47, 0
  %52 = or i1 %50, %51
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false)
  br i1 %53, label %134, label %54

54:                                               ; preds = %46
  %55 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %5, i64 %stride)
  %56 = extractvalue { i64, i1 } %55, 0
  %57 = extractvalue { i64, i1 } %55, 1
  %58 = getelementptr inbounds i8, i8* %4, i64 %56
  %59 = ptrtoint i8* %58 to i64
  %60 = sub i64 %59, %36
  %61 = sdiv i64 %60, 1
  %62 = icmp eq i64 %61, -9223372036854775808
  br i1 %62, label %63, label %68

63:                                               ; preds = %54
  %64 = icmp eq i64 %stride, -1
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false)
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  br i1 %66, label %139, label %67

67:                                               ; preds = %63
  br label %69

68:                                               ; preds = %54
  br label %69

69:                                               ; preds = %67, %68
  %70 = sdiv i64 %61, %stride
  %71 = srem i64 %61, %stride
  %72 = icmp eq i64 %71, 0
  %73 = xor i1 %72, true
  %74 = icmp slt i64 %70, 0
  %75 = or i1 %73, %74
  %76 = call i1 @llvm.expect.i1(i1 %75, i1 false)
  br i1 %76, label %135, label %77

77:                                               ; preds = %69
  %78 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %79 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %78, i32 0, i32 10
  %flags = load i32, i32* %79, align 8, !invariant.load !17
  %80 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %80, 0
  br i1 %flags.isTriviallyDestroyable, label %81, label %82

81:                                               ; preds = %77
  br label %99

82:                                               ; preds = %77
  %83 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %83, 255
  %84 = add i64 %flags.alignmentMask, 1
  %85 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %84, i64 1)
  %86 = extractvalue { i64, i1 } %85, 0
  %87 = extractvalue { i64, i1 } %85, 1
  %88 = call i1 @llvm.expect.i1(i1 %87, i1 false)
  br i1 %88, label %136, label %89

89:                                               ; preds = %82
  %90 = and i64 %8, %86
  %91 = icmp eq i64 %90, 0
  %92 = xor i1 %91, true
  %93 = and i64 %36, %86
  %94 = icmp eq i64 %93, 0
  %95 = xor i1 %94, true
  %96 = or i1 %92, %95
  %97 = call i1 @llvm.expect.i1(i1 %96, i1 false)
  br i1 %97, label %137, label %98

98:                                               ; preds = %89
  br label %99

99:                                               ; preds = %81, %98
  %100 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %100)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %2, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %3, i8** %.upperBound._rawValue._rawValue, align 8
  %101 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %102 = extractvalue %swift.metadata_response %101, 0
  %103 = extractvalue %swift.metadata_response %101, 1
  %104 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %102, i8*** undef) #8
  %105 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %102, i8** %104) #10
  %106 = extractvalue %swift.metadata_response %105, 0
  %107 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %102, i8*** undef) #8
  %108 = call i8** @"$sS2iSZsWl"() #10
  %109 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %110 = getelementptr inbounds i8**, i8*** %109, i32 0
  store i8** %107, i8*** %110, align 8
  %111 = getelementptr inbounds i8**, i8*** %109, i32 1
  store i8** %108, i8*** %111, align 8
  %112 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %106, i8*** %109) #8
  %113 = bitcast %TSn* %6 to %swift.opaque*
  %114 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %106, i8** %112, %swift.opaque* noalias nocapture swiftself %113)
  %115 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %115)
  %116 = icmp eq i64 %114, %1
  %117 = xor i1 %116, true
  %118 = call i1 @llvm.expect.i1(i1 %117, i1 false)
  br i1 %118, label %138, label %119

119:                                              ; preds = %99
  %120 = bitcast %TSn* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %120)
  %.lowerBound1 = getelementptr inbounds %TSn, %TSn* %7, i32 0, i32 0
  %.lowerBound1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound1, i32 0, i32 0
  %.lowerBound1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound1._rawValue, i32 0, i32 0
  store i8* %2, i8** %.lowerBound1._rawValue._rawValue, align 8
  %.upperBound2 = getelementptr inbounds %TSn, %TSn* %7, i32 0, i32 1
  %.upperBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound2, i32 0, i32 0
  %.upperBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound2._rawValue, i32 0, i32 0
  store i8* %3, i8** %.upperBound2._rawValue._rawValue, align 8
  %121 = bitcast %TSn* %7 to %swift.opaque*
  %122 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %106, i8** %112, %swift.opaque* noalias nocapture swiftself %121)
  %123 = bitcast %TSn* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %123)
  %spsave = call i8* @llvm.stacksave()
  %124 = alloca i8, i64 56, align 16
  %125 = bitcast i8* %124 to %swift.opaque*
  %126 = bitcast %swift.opaque* %125 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %127 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %126, i32 0, i32 1
  %128 = bitcast [8 x i8]* %127 to %swift.type**
  store %swift.type* %Element, %swift.type** %128, align 8
  %129 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %126, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %129, i32 0, i32 0
  store i8* %0, i8** %._rawValue, align 8
  %130 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %126, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %130, i32 0, i32 0
  store i64 %122, i64* %._value, align 8
  %131 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %126, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %131, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %0, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %131, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %1, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %122, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA" to i8*), %swift.opaque* %125, i8* %2, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  call void @llvm.stackrestore(i8* %spsave)
  ret void

132:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

133:                                              ; preds = %27
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

134:                                              ; preds = %46
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

135:                                              ; preds = %69
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

136:                                              ; preds = %82
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

137:                                              ; preds = %89
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

138:                                              ; preds = %99
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

139:                                              ; preds = %63
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

140:                                              ; preds = %40
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

141:                                              ; preds = %21
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i64 @"$sSlsE5countSivg"(%swift.type*, i8**, %swift.opaque* noalias nocapture swiftself) #0

define swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcis"(i8* %0, i64 %1, i8* %2, i8* %3, i8* %4, i64 %5, %swift.type* %Element) #0 {
entry:
  %6 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %7 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %2, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %3, i8** %.upperBound._rawValue._rawValue, align 8
  %8 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %9 = extractvalue %swift.metadata_response %8, 0
  %10 = extractvalue %swift.metadata_response %8, 1
  %11 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %9, i8*** undef) #8
  %12 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %9, i8** %11) #10
  %13 = extractvalue %swift.metadata_response %12, 0
  %14 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %9, i8*** undef) #8
  %15 = call i8** @"$sS2iSZsWl"() #10
  %16 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %17 = getelementptr inbounds i8**, i8*** %16, i32 0
  store i8** %14, i8*** %17, align 8
  %18 = getelementptr inbounds i8**, i8*** %16, i32 1
  store i8** %15, i8*** %18, align 8
  %19 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %13, i8*** %16) #8
  %20 = bitcast %TSn* %6 to %swift.opaque*
  %21 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %13, i8** %19, %swift.opaque* noalias nocapture swiftself %20)
  %22 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22)
  %23 = alloca i8, i64 56, align 16
  %24 = bitcast i8* %23 to %swift.opaque*
  %25 = bitcast %swift.opaque* %24 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %26 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %25, i32 0, i32 1
  %27 = bitcast [8 x i8]* %26 to %swift.type**
  store %swift.type* %Element, %swift.type** %27, align 8
  %28 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %25, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %28, i32 0, i32 0
  store i8* %0, i8** %._rawValue, align 8
  %29 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %25, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %29, i32 0, i32 0
  store i64 %21, i64* %._value, align 8
  %30 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %25, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %30, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %0, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %30, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %1, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %21, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.1" to i8*), %swift.opaque* %24, i8* %2, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  ret void
}

; Function Attrs: noinline
define swiftcc { i8*, %T10BufferView07MutableaB0V* } @"$s10BufferView07MutableaB0VyACyxGSnyAA0aB5IndexVyxGGciM"(i8* noalias dereferenceable(32) %0, i8* %1, i8* %2, i8* %3, i64 %4, %swift.type* %Element) #1 {
entry:
  %5 = alloca %T10BufferView07MutableaB0V, align 8
  %6 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %7 = alloca %T10BufferView07MutableaB0V, align 8
  %8 = alloca %TSn, align 8
  %9 = alloca %TSn, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  %10 = alloca %TSn, align 8
  %11 = alloca %TSn, align 8
  %12 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sSny10BufferView0aB5IndexVyxGGAA07MutableaB0VyxGAHlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %13 = call i8* @llvm.coro.begin(token %12, i8* null)
  store %swift.error* null, %swift.error** %swifterror, align 8
  %14 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %14)
  %15 = ptrtoint i8* %1 to i64
  %16 = ptrtoint i8* %3 to i64
  %17 = sub i64 %15, %16
  %18 = sdiv i64 %17, 1
  %19 = bitcast %swift.type* %Element to i8***
  %20 = getelementptr inbounds i8**, i8*** %19, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %20, align 8, !invariant.load !17, !dereferenceable !18
  %21 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %22 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %21, i32 0, i32 9
  %stride = load i64, i64* %22, align 8, !invariant.load !17
  %23 = icmp eq i64 %stride, 0
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %296, label %26

26:                                               ; preds = %entry
  %27 = icmp eq i64 %18, -9223372036854775808
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = icmp eq i64 %stride, -1
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %316, label %32

32:                                               ; preds = %28
  br label %34

33:                                               ; preds = %26
  br label %34

34:                                               ; preds = %32, %33
  %35 = sdiv i64 %18, %stride
  %36 = srem i64 %18, %stride
  %37 = icmp eq i64 %36, 0
  %38 = xor i1 %37, true
  %39 = icmp slt i64 %35, 0
  %40 = or i1 %38, %39
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %297, label %42

42:                                               ; preds = %34
  %43 = ptrtoint i8* %2 to i64
  %44 = sub i64 %43, %15
  %45 = sdiv i64 %44, 1
  %46 = icmp eq i64 %45, -9223372036854775808
  br i1 %46, label %47, label %52

47:                                               ; preds = %42
  %48 = icmp eq i64 %stride, -1
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false)
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false)
  br i1 %50, label %315, label %51

51:                                               ; preds = %47
  br label %53

52:                                               ; preds = %42
  br label %53

53:                                               ; preds = %51, %52
  %54 = sdiv i64 %45, %stride
  %55 = srem i64 %45, %stride
  %56 = icmp eq i64 %55, 0
  %57 = xor i1 %56, true
  %58 = icmp slt i64 %54, 0
  %59 = or i1 %57, %58
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false)
  br i1 %60, label %298, label %61

61:                                               ; preds = %53
  %62 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %63 = extractvalue { i64, i1 } %62, 0
  %64 = extractvalue { i64, i1 } %62, 1
  %65 = getelementptr inbounds i8, i8* %3, i64 %63
  %66 = ptrtoint i8* %65 to i64
  %67 = sub i64 %66, %43
  %68 = sdiv i64 %67, 1
  %69 = icmp eq i64 %68, -9223372036854775808
  br i1 %69, label %70, label %75

70:                                               ; preds = %61
  %71 = icmp eq i64 %stride, -1
  %72 = call i1 @llvm.expect.i1(i1 %71, i1 false)
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false)
  br i1 %73, label %314, label %74

74:                                               ; preds = %70
  br label %76

75:                                               ; preds = %61
  br label %76

76:                                               ; preds = %74, %75
  %77 = sdiv i64 %68, %stride
  %78 = srem i64 %68, %stride
  %79 = icmp eq i64 %78, 0
  %80 = xor i1 %79, true
  %81 = icmp slt i64 %77, 0
  %82 = or i1 %80, %81
  %83 = call i1 @llvm.expect.i1(i1 %82, i1 false)
  br i1 %83, label %299, label %84

84:                                               ; preds = %76
  %85 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %86 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %85, i32 0, i32 10
  %flags = load i32, i32* %86, align 8, !invariant.load !17
  %87 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %87, 0
  br i1 %flags.isTriviallyDestroyable, label %88, label %89

88:                                               ; preds = %84
  br label %106

89:                                               ; preds = %84
  %90 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %90, 255
  %91 = add i64 %flags.alignmentMask, 1
  %92 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %91, i64 1)
  %93 = extractvalue { i64, i1 } %92, 0
  %94 = extractvalue { i64, i1 } %92, 1
  %95 = call i1 @llvm.expect.i1(i1 %94, i1 false)
  br i1 %95, label %300, label %96

96:                                               ; preds = %89
  %97 = and i64 %15, %93
  %98 = icmp eq i64 %97, 0
  %99 = xor i1 %98, true
  %100 = and i64 %43, %93
  %101 = icmp eq i64 %100, 0
  %102 = xor i1 %101, true
  %103 = or i1 %99, %102
  %104 = call i1 @llvm.expect.i1(i1 %103, i1 false)
  br i1 %104, label %301, label %105

105:                                              ; preds = %96
  br label %106

106:                                              ; preds = %88, %105
  %107 = icmp eq i64 %17, -9223372036854775808
  %108 = icmp eq i64 %44, -9223372036854775808
  %109 = icmp eq i64 %67, -9223372036854775808
  %110 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %110)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound._rawValue._rawValue, align 8
  %111 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %112 = extractvalue %swift.metadata_response %111, 0
  %113 = extractvalue %swift.metadata_response %111, 1
  %114 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %112, i8*** undef) #8
  %115 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %112, i8** %114) #10
  %116 = extractvalue %swift.metadata_response %115, 0
  %117 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %112, i8*** undef) #8
  %118 = call i8** @"$sS2iSZsWl"() #10
  %119 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %120 = getelementptr inbounds i8**, i8*** %119, i32 0
  store i8** %117, i8*** %120, align 8
  %121 = getelementptr inbounds i8**, i8*** %119, i32 1
  store i8** %118, i8*** %121, align 8
  %122 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %116, i8*** %119) #8
  %123 = bitcast %TSn* %6 to %swift.opaque*
  %124 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %116, i8** %122, %swift.opaque* noalias nocapture swiftself %123)
  %125 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %125)
  %126 = bitcast %T10BufferView07MutableaB0V* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %126)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %7, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %7, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %127 = bitcast %T10BufferView07MutableaB0V* %7 to %swift.opaque*
  %128 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %129 = extractvalue %swift.metadata_response %128, 0
  %130 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %1, i64 %124, %swift.opaque* noalias nocapture %127, %swift.type* %Element, %swift.type* %129)
  %131 = extractvalue { i8*, i64 } %130, 0
  %132 = extractvalue { i8*, i64 } %130, 1
  %133 = bitcast %T10BufferView07MutableaB0V* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %133)
  %.start1 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %131, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %132, i64* %.count2._value, align 8
  %134 = call i1 (...) @llvm.coro.suspend.retcon.i1(%T10BufferView07MutableaB0V* %5)
  br i1 %134, label %215, label %135

135:                                              ; preds = %106
  %.start12 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start12._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start12, i32 0, i32 0
  %.start12._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start12._rawValue, i32 0, i32 0
  %136 = load i8*, i8** %.start12._rawValue._rawValue, align 8
  %.count13 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count13._value = getelementptr inbounds %TSi, %TSi* %.count13, i32 0, i32 0
  %137 = load i64, i64* %.count13._value, align 8
  br i1 %107, label %141, label %138

138:                                              ; preds = %135
  br i1 %27, label %139, label %140

139:                                              ; preds = %138
  br label %143

140:                                              ; preds = %138
  br label %149

141:                                              ; preds = %135
  br i1 %27, label %142, label %148

142:                                              ; preds = %141
  br label %143

143:                                              ; preds = %142, %139
  %144 = icmp eq i64 %stride, -1
  %145 = call i1 @llvm.expect.i1(i1 %144, i1 false)
  %146 = call i1 @llvm.expect.i1(i1 %145, i1 false)
  br i1 %146, label %313, label %147

147:                                              ; preds = %143
  br label %149

148:                                              ; preds = %141
  br label %149

149:                                              ; preds = %148, %147, %140
  br i1 %108, label %153, label %150

150:                                              ; preds = %149
  br i1 %46, label %151, label %152

151:                                              ; preds = %150
  br label %155

152:                                              ; preds = %150
  br label %161

153:                                              ; preds = %149
  br i1 %46, label %154, label %160

154:                                              ; preds = %153
  br label %155

155:                                              ; preds = %154, %151
  %156 = icmp eq i64 %stride, -1
  %157 = call i1 @llvm.expect.i1(i1 %156, i1 false)
  %158 = call i1 @llvm.expect.i1(i1 %157, i1 false)
  br i1 %158, label %312, label %159

159:                                              ; preds = %155
  br label %161

160:                                              ; preds = %153
  br label %161

161:                                              ; preds = %160, %159, %152
  br i1 %109, label %165, label %162

162:                                              ; preds = %161
  br i1 %69, label %163, label %164

163:                                              ; preds = %162
  br label %167

164:                                              ; preds = %162
  br label %173

165:                                              ; preds = %161
  br i1 %69, label %166, label %172

166:                                              ; preds = %165
  br label %167

167:                                              ; preds = %166, %163
  %168 = icmp eq i64 %stride, -1
  %169 = call i1 @llvm.expect.i1(i1 %168, i1 false)
  %170 = call i1 @llvm.expect.i1(i1 %169, i1 false)
  br i1 %170, label %311, label %171

171:                                              ; preds = %167
  br label %173

172:                                              ; preds = %165
  br label %173

173:                                              ; preds = %172, %171, %164
  br i1 %flags.isTriviallyDestroyable, label %174, label %175

174:                                              ; preds = %173
  br label %192

175:                                              ; preds = %173
  %176 = zext i32 %flags to i64
  %flags.alignmentMask14 = and i64 %176, 255
  %177 = add i64 %flags.alignmentMask14, 1
  %178 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %177, i64 1)
  %179 = extractvalue { i64, i1 } %178, 0
  %180 = extractvalue { i64, i1 } %178, 1
  %181 = call i1 @llvm.expect.i1(i1 %180, i1 false)
  br i1 %181, label %308, label %182

182:                                              ; preds = %175
  %183 = and i64 %15, %179
  %184 = icmp eq i64 %183, 0
  %185 = xor i1 %184, true
  %186 = and i64 %43, %179
  %187 = icmp eq i64 %186, 0
  %188 = xor i1 %187, true
  %189 = or i1 %185, %188
  %190 = call i1 @llvm.expect.i1(i1 %189, i1 false)
  br i1 %190, label %309, label %191

191:                                              ; preds = %182
  br label %192

192:                                              ; preds = %174, %191
  %193 = bitcast %TSn* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %193)
  %.lowerBound15 = getelementptr inbounds %TSn, %TSn* %10, i32 0, i32 0
  %.lowerBound15._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound15, i32 0, i32 0
  %.lowerBound15._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound15._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound15._rawValue._rawValue, align 8
  %.upperBound16 = getelementptr inbounds %TSn, %TSn* %10, i32 0, i32 1
  %.upperBound16._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound16, i32 0, i32 0
  %.upperBound16._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound16._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound16._rawValue._rawValue, align 8
  %194 = bitcast %TSn* %10 to %swift.opaque*
  %195 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %116, i8** %122, %swift.opaque* noalias nocapture swiftself %194)
  %196 = bitcast %TSn* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %196)
  %197 = icmp eq i64 %195, %137
  %198 = xor i1 %197, true
  %199 = call i1 @llvm.expect.i1(i1 %198, i1 false)
  br i1 %199, label %310, label %200

200:                                              ; preds = %192
  %201 = bitcast %TSn* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %201)
  %.lowerBound17 = getelementptr inbounds %TSn, %TSn* %11, i32 0, i32 0
  %.lowerBound17._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound17, i32 0, i32 0
  %.lowerBound17._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound17._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound17._rawValue._rawValue, align 8
  %.upperBound18 = getelementptr inbounds %TSn, %TSn* %11, i32 0, i32 1
  %.upperBound18._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound18, i32 0, i32 0
  %.upperBound18._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound18._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound18._rawValue._rawValue, align 8
  %202 = bitcast %TSn* %11 to %swift.opaque*
  %203 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %116, i8** %122, %swift.opaque* noalias nocapture swiftself %202)
  %204 = bitcast %TSn* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %204)
  %205 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %206 = call i8* @llvm.coro.alloca.get(token %205)
  %207 = bitcast i8* %206 to %swift.opaque*
  %208 = bitcast %swift.opaque* %207 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %209 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %208, i32 0, i32 1
  %210 = bitcast [8 x i8]* %209 to %swift.type**
  store %swift.type* %Element, %swift.type** %210, align 8
  %211 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %208, i32 0, i32 2
  %._rawValue19 = getelementptr inbounds %TSV, %TSV* %211, i32 0, i32 0
  store i8* %136, i8** %._rawValue19, align 8
  %212 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %208, i32 0, i32 3
  %._value20 = getelementptr inbounds %TSi, %TSi* %212, i32 0, i32 0
  store i64 %203, i64* %._value20, align 8
  %213 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %208, i32 0, i32 4
  %.start21 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %213, i32 0, i32 0
  %.start21._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start21, i32 0, i32 0
  %.start21._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start21._rawValue, i32 0, i32 0
  store i8* %136, i8** %.start21._rawValue._rawValue, align 8
  %.count22 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %213, i32 0, i32 1
  %.count22._value = getelementptr inbounds %TSi, %TSi* %.count22, i32 0, i32 0
  store i64 %137, i64* %.count22._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %203, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.3" to i8*), %swift.opaque* %207, i8* %1, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  call void @llvm.coro.alloca.free(token %205)
  %214 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %214)
  br label %coro.end

215:                                              ; preds = %106
  %.start3 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  %216 = load i8*, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  %217 = load i64, i64* %.count4._value, align 8
  br i1 %107, label %221, label %218

218:                                              ; preds = %215
  br i1 %27, label %219, label %220

219:                                              ; preds = %218
  br label %223

220:                                              ; preds = %218
  br label %229

221:                                              ; preds = %215
  br i1 %27, label %222, label %228

222:                                              ; preds = %221
  br label %223

223:                                              ; preds = %222, %219
  %224 = icmp eq i64 %stride, -1
  %225 = call i1 @llvm.expect.i1(i1 %224, i1 false)
  %226 = call i1 @llvm.expect.i1(i1 %225, i1 false)
  br i1 %226, label %307, label %227

227:                                              ; preds = %223
  br label %229

228:                                              ; preds = %221
  br label %229

229:                                              ; preds = %228, %227, %220
  br i1 %108, label %233, label %230

230:                                              ; preds = %229
  br i1 %46, label %231, label %232

231:                                              ; preds = %230
  br label %235

232:                                              ; preds = %230
  br label %241

233:                                              ; preds = %229
  br i1 %46, label %234, label %240

234:                                              ; preds = %233
  br label %235

235:                                              ; preds = %234, %231
  %236 = icmp eq i64 %stride, -1
  %237 = call i1 @llvm.expect.i1(i1 %236, i1 false)
  %238 = call i1 @llvm.expect.i1(i1 %237, i1 false)
  br i1 %238, label %306, label %239

239:                                              ; preds = %235
  br label %241

240:                                              ; preds = %233
  br label %241

241:                                              ; preds = %240, %239, %232
  br i1 %109, label %245, label %242

242:                                              ; preds = %241
  br i1 %69, label %243, label %244

243:                                              ; preds = %242
  br label %247

244:                                              ; preds = %242
  br label %253

245:                                              ; preds = %241
  br i1 %69, label %246, label %252

246:                                              ; preds = %245
  br label %247

247:                                              ; preds = %246, %243
  %248 = icmp eq i64 %stride, -1
  %249 = call i1 @llvm.expect.i1(i1 %248, i1 false)
  %250 = call i1 @llvm.expect.i1(i1 %249, i1 false)
  br i1 %250, label %305, label %251

251:                                              ; preds = %247
  br label %253

252:                                              ; preds = %245
  br label %253

253:                                              ; preds = %252, %251, %244
  br i1 %flags.isTriviallyDestroyable, label %254, label %255

254:                                              ; preds = %253
  br label %272

255:                                              ; preds = %253
  %256 = zext i32 %flags to i64
  %flags.alignmentMask5 = and i64 %256, 255
  %257 = add i64 %flags.alignmentMask5, 1
  %258 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %257, i64 1)
  %259 = extractvalue { i64, i1 } %258, 0
  %260 = extractvalue { i64, i1 } %258, 1
  %261 = call i1 @llvm.expect.i1(i1 %260, i1 false)
  br i1 %261, label %302, label %262

262:                                              ; preds = %255
  %263 = and i64 %15, %259
  %264 = icmp eq i64 %263, 0
  %265 = xor i1 %264, true
  %266 = and i64 %43, %259
  %267 = icmp eq i64 %266, 0
  %268 = xor i1 %267, true
  %269 = or i1 %265, %268
  %270 = call i1 @llvm.expect.i1(i1 %269, i1 false)
  br i1 %270, label %303, label %271

271:                                              ; preds = %262
  br label %272

272:                                              ; preds = %254, %271
  %273 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %273)
  %.lowerBound6 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 0
  %.lowerBound6._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound6, i32 0, i32 0
  %.lowerBound6._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound6._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound6._rawValue._rawValue, align 8
  %.upperBound7 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 1
  %.upperBound7._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound7, i32 0, i32 0
  %.upperBound7._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound7._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound7._rawValue._rawValue, align 8
  %274 = bitcast %TSn* %8 to %swift.opaque*
  %275 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %116, i8** %122, %swift.opaque* noalias nocapture swiftself %274)
  %276 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %276)
  %277 = icmp eq i64 %275, %217
  %278 = xor i1 %277, true
  %279 = call i1 @llvm.expect.i1(i1 %278, i1 false)
  br i1 %279, label %304, label %280

280:                                              ; preds = %272
  %281 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %281)
  %.lowerBound8 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 0
  %.lowerBound8._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound8, i32 0, i32 0
  %.lowerBound8._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound8._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound8._rawValue._rawValue, align 8
  %.upperBound9 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 1
  %.upperBound9._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound9, i32 0, i32 0
  %.upperBound9._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound9._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound9._rawValue._rawValue, align 8
  %282 = bitcast %TSn* %9 to %swift.opaque*
  %283 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %116, i8** %122, %swift.opaque* noalias nocapture swiftself %282)
  %284 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %284)
  %285 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %286 = call i8* @llvm.coro.alloca.get(token %285)
  %287 = bitcast i8* %286 to %swift.opaque*
  %288 = bitcast %swift.opaque* %287 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %289 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %288, i32 0, i32 1
  %290 = bitcast [8 x i8]* %289 to %swift.type**
  store %swift.type* %Element, %swift.type** %290, align 8
  %291 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %288, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %291, i32 0, i32 0
  store i8* %216, i8** %._rawValue, align 8
  %292 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %288, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %292, i32 0, i32 0
  store i64 %283, i64* %._value, align 8
  %293 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %288, i32 0, i32 4
  %.start10 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %293, i32 0, i32 0
  %.start10._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start10, i32 0, i32 0
  %.start10._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start10._rawValue, i32 0, i32 0
  store i8* %216, i8** %.start10._rawValue._rawValue, align 8
  %.count11 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %293, i32 0, i32 1
  %.count11._value = getelementptr inbounds %TSi, %TSi* %.count11, i32 0, i32 0
  store i64 %217, i64* %.count11._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %283, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.2" to i8*), %swift.opaque* %287, i8* %1, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  call void @llvm.coro.alloca.free(token %285)
  %294 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %294)
  br label %coro.end

coro.end:                                         ; preds = %200, %280
  %295 = call i1 @llvm.coro.end(i8* %13, i1 false)
  unreachable

296:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

297:                                              ; preds = %34
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

298:                                              ; preds = %53
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

299:                                              ; preds = %76
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

300:                                              ; preds = %89
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

301:                                              ; preds = %96
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

302:                                              ; preds = %255
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

303:                                              ; preds = %262
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

304:                                              ; preds = %272
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

305:                                              ; preds = %247
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

306:                                              ; preds = %235
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

307:                                              ; preds = %223
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable

308:                                              ; preds = %175
  call void asm sideeffect "", "n"(i32 12)
  call void @llvm.trap()
  unreachable

309:                                              ; preds = %182
  call void asm sideeffect "", "n"(i32 13)
  call void @llvm.trap()
  unreachable

310:                                              ; preds = %192
  call void asm sideeffect "", "n"(i32 14)
  call void @llvm.trap()
  unreachable

311:                                              ; preds = %167
  call void asm sideeffect "", "n"(i32 15)
  call void @llvm.trap()
  unreachable

312:                                              ; preds = %155
  call void asm sideeffect "", "n"(i32 16)
  call void @llvm.trap()
  unreachable

313:                                              ; preds = %143
  call void asm sideeffect "", "n"(i32 17)
  call void @llvm.trap()
  unreachable

314:                                              ; preds = %70
  call void asm sideeffect "", "n"(i32 18)
  call void @llvm.trap()
  unreachable

315:                                              ; preds = %47
  call void asm sideeffect "", "n"(i32 19)
  call void @llvm.trap()
  unreachable

316:                                              ; preds = %28
  call void asm sideeffect "", "n"(i32 20)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, i8* %4, i64 %5, %swift.type* %Element, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = alloca i8, i64 48, align 16
  %9 = bitcast i8* %8 to %swift.opaque*
  %10 = bitcast %swift.opaque* %9 to <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>*
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 1
  %12 = bitcast [8 x i8]* %11 to %swift.type**
  store %swift.type* %Element, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSp, %TSp* %13, i32 0, i32 0
  store i8* %1, i8** %._rawValue, align 8
  %14 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %14, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %4, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %14, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %5, i64* %.count._value, align 8
  call swiftcc void @"$sSV17withMemoryRebound2to8capacity_q_xm_Siq_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %Element, i64 %3, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_ySPyxGXEfU_TA" to i8*), %swift.opaque* %9, i8* %2, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_ySPyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  call swiftcc void @"$sSp6assign4from5countySPyxG_SitF"(i8* %1, i64 %4, i8* %2, %swift.type* %Element)
  ret void
}

declare swiftcc void @"$sSp6assign4from5countySPyxG_SitF"(i8*, i64, i8*, %swift.type*) #0

define linkonce_odr hidden swiftcc void @"$sSV17withMemoryRebound2to8capacity_q_xm_Siq_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %1, i64 %2, i8* %3, %swift.opaque* %4, i8* %5, %swift.type* %T, %swift.type* %Result, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %3 to void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %8(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %10 = load %swift.error*, %swift.error** %7, align 8
  %11 = icmp ne %swift.error* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %entry
  %13 = phi %swift.error* [ %10, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %13, %swift.error** %7, align 8
  ret void

14:                                               ; preds = %entry
  ret void
}

define linkonce_odr hidden swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %1, i64 %2, i8* %3, %swift.opaque* %4, i8* %5, %swift.type* %T, %swift.type* %Result, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %3 to void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %8(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %10 = load %swift.error*, %swift.error** %7, align 8
  %11 = icmp ne %swift.error* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %entry
  %13 = phi %swift.error* [ %10, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %13, %swift.error** %7, align 8
  ret void

14:                                               ; preds = %entry
  ret void
}

; Function Attrs: noinline
define swiftcc { i8*, %T10BufferView07MutableaB0V* } @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tciM"(i8* noalias dereferenceable(32) %0, i8* %1, i8* %2, i8* %3, i64 %4, %swift.type* %Element) #1 {
entry:
  %5 = alloca %T10BufferView07MutableaB0V, align 8
  %6 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %7 = alloca %T10BufferView07MutableaB0V, align 8
  %8 = alloca %TSn, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  %9 = alloca %TSn, align 8
  %10 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sSny10BufferView0aB5IndexVyxGGAA07MutableaB0VyxGAHlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %11 = call i8* @llvm.coro.begin(token %10, i8* null)
  store %swift.error* null, %swift.error** %swifterror, align 8
  %12 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %12)
  %13 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %13)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound._rawValue._rawValue, align 8
  %14 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %15 = extractvalue %swift.metadata_response %14, 0
  %16 = extractvalue %swift.metadata_response %14, 1
  %17 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %15, i8*** undef) #8
  %18 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %15, i8** %17) #10
  %19 = extractvalue %swift.metadata_response %18, 0
  %20 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %15, i8*** undef) #8
  %21 = call i8** @"$sS2iSZsWl"() #10
  %22 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %23 = getelementptr inbounds i8**, i8*** %22, i32 0
  store i8** %20, i8*** %23, align 8
  %24 = getelementptr inbounds i8**, i8*** %22, i32 1
  store i8** %21, i8*** %24, align 8
  %25 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %19, i8*** %22) #8
  %26 = bitcast %TSn* %6 to %swift.opaque*
  %27 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %19, i8** %25, %swift.opaque* noalias nocapture swiftself %26)
  %28 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28)
  %29 = bitcast %T10BufferView07MutableaB0V* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %29)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %7, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %7, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %30 = bitcast %T10BufferView07MutableaB0V* %7 to %swift.opaque*
  %31 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %32 = extractvalue %swift.metadata_response %31, 0
  %33 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %1, i64 %27, %swift.opaque* noalias nocapture %30, %swift.type* %Element, %swift.type* %32)
  %34 = extractvalue { i8*, i64 } %33, 0
  %35 = extractvalue { i8*, i64 } %33, 1
  %36 = bitcast %T10BufferView07MutableaB0V* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %36)
  %.start1 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %34, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %35, i64* %.count2._value, align 8
  %37 = call i1 (...) @llvm.coro.suspend.retcon.i1(%T10BufferView07MutableaB0V* %5)
  br i1 %37, label %55, label %38

38:                                               ; preds = %entry
  %.start9 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start9._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start9, i32 0, i32 0
  %.start9._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start9._rawValue, i32 0, i32 0
  %39 = load i8*, i8** %.start9._rawValue._rawValue, align 8
  %.count10 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count10._value = getelementptr inbounds %TSi, %TSi* %.count10, i32 0, i32 0
  %40 = load i64, i64* %.count10._value, align 8
  %41 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %41)
  %.lowerBound11 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 0
  %.lowerBound11._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound11, i32 0, i32 0
  %.lowerBound11._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound11._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound11._rawValue._rawValue, align 8
  %.upperBound12 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 1
  %.upperBound12._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound12, i32 0, i32 0
  %.upperBound12._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound12._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound12._rawValue._rawValue, align 8
  %42 = bitcast %TSn* %9 to %swift.opaque*
  %43 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %19, i8** %25, %swift.opaque* noalias nocapture swiftself %42)
  %44 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %44)
  %45 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %46 = call i8* @llvm.coro.alloca.get(token %45)
  %47 = bitcast i8* %46 to %swift.opaque*
  %48 = bitcast %swift.opaque* %47 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %49 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %48, i32 0, i32 1
  %50 = bitcast [8 x i8]* %49 to %swift.type**
  store %swift.type* %Element, %swift.type** %50, align 8
  %51 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %48, i32 0, i32 2
  %._rawValue13 = getelementptr inbounds %TSV, %TSV* %51, i32 0, i32 0
  store i8* %39, i8** %._rawValue13, align 8
  %52 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %48, i32 0, i32 3
  %._value14 = getelementptr inbounds %TSi, %TSi* %52, i32 0, i32 0
  store i64 %43, i64* %._value14, align 8
  %53 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %48, i32 0, i32 4
  %.start15 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %53, i32 0, i32 0
  %.start15._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start15, i32 0, i32 0
  %.start15._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start15._rawValue, i32 0, i32 0
  store i8* %39, i8** %.start15._rawValue._rawValue, align 8
  %.count16 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %53, i32 0, i32 1
  %.count16._value = getelementptr inbounds %TSi, %TSi* %.count16, i32 0, i32 0
  store i64 %40, i64* %.count16._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %43, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.5" to i8*), %swift.opaque* %47, i8* %1, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  call void @llvm.coro.alloca.free(token %45)
  %54 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %54)
  br label %coro.end

55:                                               ; preds = %entry
  %.start3 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  %56 = load i8*, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  %57 = load i64, i64* %.count4._value, align 8
  %58 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %58)
  %.lowerBound5 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 0
  %.lowerBound5._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound5, i32 0, i32 0
  %.lowerBound5._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound5._rawValue, i32 0, i32 0
  store i8* %1, i8** %.lowerBound5._rawValue._rawValue, align 8
  %.upperBound6 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 1
  %.upperBound6._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound6, i32 0, i32 0
  %.upperBound6._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound6._rawValue, i32 0, i32 0
  store i8* %2, i8** %.upperBound6._rawValue._rawValue, align 8
  %59 = bitcast %TSn* %8 to %swift.opaque*
  %60 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %19, i8** %25, %swift.opaque* noalias nocapture swiftself %59)
  %61 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61)
  %62 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %63 = call i8* @llvm.coro.alloca.get(token %62)
  %64 = bitcast i8* %63 to %swift.opaque*
  %65 = bitcast %swift.opaque* %64 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %66 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %65, i32 0, i32 1
  %67 = bitcast [8 x i8]* %66 to %swift.type**
  store %swift.type* %Element, %swift.type** %67, align 8
  %68 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %65, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %68, i32 0, i32 0
  store i8* %56, i8** %._rawValue, align 8
  %69 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %65, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %69, i32 0, i32 0
  store i64 %60, i64* %._value, align 8
  %70 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %65, i32 0, i32 4
  %.start7 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %70, i32 0, i32 0
  %.start7._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start7, i32 0, i32 0
  %.start7._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start7._rawValue, i32 0, i32 0
  store i8* %56, i8** %.start7._rawValue._rawValue, align 8
  %.count8 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %70, i32 0, i32 1
  %.count8._value = getelementptr inbounds %TSi, %TSi* %.count8, i32 0, i32 0
  store i64 %57, i64* %.count8._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %60, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.4" to i8*), %swift.opaque* %64, i8* %1, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  call void @llvm.coro.alloca.free(token %62)
  %71 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %71)
  br label %coro.end

coro.end:                                         ; preds = %38, %55
  %72 = call i1 @llvm.coro.end(i8* %11, i1 false)
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = bitcast %swift.opaque* %0 to %TSq.16*
  %8 = bitcast %TSq.16* %7 to %swift.opaque*
  %9 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %10 = alloca i8, i64 64, align 16
  %11 = bitcast i8* %10 to %swift.opaque*
  %12 = bitcast %swift.opaque* %11 to <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>*
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %12, i32 0, i32 1
  %14 = bitcast [16 x i8]* %13 to %swift.type**
  store %swift.type* %Element, %swift.type** %14, align 8
  %15 = getelementptr inbounds %swift.type*, %swift.type** %14, i32 1
  store %swift.type* %R, %swift.type** %15, align 8
  %16 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %12, i32 0, i32 2
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %16, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %16, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %17 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %12, i32 0, i32 3
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %17, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %17, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %8, %swift.type* %Element, i64 %4, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_TA" to i8*), %swift.opaque* %11, i8* %9, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %18 = load %swift.error*, %swift.error** %6, align 8
  %19 = icmp ne %swift.error* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %entry
  %21 = bitcast %TSq.16* %7 to %swift.opaque*
  %22 = bitcast %swift.type* %R to i8***
  %23 = getelementptr inbounds i8**, i8*** %22, i64 -1
  %R.valueWitnesses = load i8**, i8*** %23, align 8, !invariant.load !17, !dereferenceable !18
  %24 = getelementptr inbounds i8*, i8** %R.valueWitnesses, i32 7
  %25 = load i8*, i8** %24, align 8, !invariant.load !17
  %storeEnumTagSinglePayload = bitcast i8* %25 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload(%swift.opaque* noalias %21, i32 0, i32 1, %swift.type* %R) #9
  ret void

26:                                               ; preds = %entry
  %27 = phi %swift.error* [ %18, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %27, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, i8* %4, %swift.opaque* %5, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = alloca %TSr, align 8
  %9 = bitcast %TSr* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9)
  %10 = ptrtoint i8* %1 to i64
  %11 = call swiftcc { i64, i64 } @"$sSr5start5countSryxGSpyxGSg_SitcfC"(i64 %10, i64 %3, %swift.type* %Element)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = extractvalue { i64, i64 } %11, 1
  %._position = getelementptr inbounds %TSr, %TSr* %8, i32 0, i32 0
  %14 = bitcast %TSq.3* %._position to i64*
  store i64 %12, i64* %14, align 8
  %.count = getelementptr inbounds %TSr, %TSr* %8, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %13, i64* %.count._value, align 8
  %15 = bitcast i8* %4 to void (%swift.opaque*, %TSr*, %swift.refcounted*, %swift.error**)*
  %16 = bitcast %swift.opaque* %5 to %swift.refcounted*
  call swiftcc void %15(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %TSr* nocapture dereferenceable(16) %8, %swift.refcounted* swiftself %16, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %17 = load %swift.error*, %swift.error** %7, align 8
  %18 = icmp ne %swift.error* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %entry
  call swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_6$deferL_yyr__lF"(%TSr* nocapture dereferenceable(16) %8, i8* %1, i8* %2, i64 %3, %swift.type* %Element, %swift.type* %R)
  %20 = bitcast %TSr* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20)
  ret void

21:                                               ; preds = %entry
  %22 = phi %swift.error* [ %17, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  call swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_6$deferL_yyr__lF"(%TSr* nocapture dereferenceable(16) %8, i8* %1, i8* %2, i64 %3, %swift.type* %Element, %swift.type* %R)
  %23 = bitcast %TSr* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %23)
  store %swift.error* %22, %swift.error** %7, align 8
  ret void
}

declare swiftcc { i64, i64 } @"$sSr5start5countSryxGSpyxGSg_SitcfC"(i64, i64, %swift.type*) #0

define internal swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_6$deferL_yyr__lF"(%TSr* nocapture dereferenceable(16) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element, %swift.type* %R) #0 {
entry:
  %4 = alloca %TSq.3, align 8
  %5 = alloca %TSi, align 8
  %6 = alloca %TSq.3, align 8
  %7 = alloca %TSi, align 8
  %conditional.requirement.buffer = alloca [1 x i8**], align 8
  %._position = getelementptr inbounds %TSr, %TSr* %0, i32 0, i32 0
  %8 = bitcast %TSq.3* %._position to i64*
  %9 = load i64, i64* %8, align 8
  %.count = getelementptr inbounds %TSr, %TSr* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %10 = load i64, i64* %.count._value, align 8
  %11 = call swiftcc i64 @"$sSr11baseAddressSpyxGSgvg"(i64 %9, i64 %10, %swift.type* %Element)
  %12 = bitcast %TSq.3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12)
  %13 = bitcast %TSq.3* %4 to i64*
  store i64 %11, i64* %13, align 8
  %.count1 = getelementptr inbounds %TSr, %TSr* %0, i32 0, i32 1
  %.count1._value = getelementptr inbounds %TSi, %TSi* %.count1, i32 0, i32 0
  %14 = load i64, i64* %.count1._value, align 8
  %15 = bitcast %TSi* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15)
  %._value = getelementptr inbounds %TSi, %TSi* %5, i32 0, i32 0
  store i64 %14, i64* %._value, align 8
  %16 = ptrtoint i8* %1 to i64
  %17 = bitcast %TSq.3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17)
  %18 = bitcast %TSq.3* %6 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %TSi* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19)
  %._value2 = getelementptr inbounds %TSi, %TSi* %7, i32 0, i32 0
  store i64 %3, i64* %._value2, align 8
  %20 = bitcast %TSq.3* %4 to %swift.opaque*
  %21 = bitcast %TSi* %5 to %swift.opaque*
  %22 = bitcast %TSq.3* %6 to %swift.opaque*
  %23 = bitcast %TSi* %7 to %swift.opaque*
  %24 = call swiftcc %swift.metadata_response @"$sSpMa"(i64 255, %swift.type* %Element) #10
  %25 = extractvalue %swift.metadata_response %24, 0
  %26 = extractvalue %swift.metadata_response %24, 1
  %27 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %25) #10
  %28 = extractvalue %swift.metadata_response %27, 0
  %29 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSpyxGSQsMc", %swift.type* %25, i8*** undef) #8
  %30 = getelementptr inbounds [1 x i8**], [1 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %31 = getelementptr inbounds i8**, i8*** %30, i32 0
  store i8** %29, i8*** %31, align 8
  %32 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sxSgSQsSQRzlMc", %swift.type* %28, i8*** %30) #8
  %33 = call swiftcc i1 @"$ss2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF"(%swift.opaque* noalias nocapture %20, %swift.opaque* noalias nocapture %21, %swift.opaque* noalias nocapture %22, %swift.opaque* noalias nocapture %23, %swift.type* %28, %swift.type* @"$sSiN", i8** %32, i8** @"$sSiSQsWP")
  %34 = bitcast %TSi* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34)
  %35 = bitcast %TSq.3* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35)
  %36 = bitcast %TSi* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36)
  %37 = bitcast %TSq.3* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37)
  %38 = xor i1 %33, true
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false)
  br i1 %39, label %41, label %40

40:                                               ; preds = %entry
  ret void

41:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl10startIndex0E0QzvgTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %2, i8** %._rawValue._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl8endIndex0E0QzvgTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %3 = load i64, i64* %.count._value, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = getelementptr inbounds i8, i8* %2, i64 %11
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %13, i8** %._rawValue._rawValue, align 8
  ret void
}

; Function Attrs: noinline
define linkonce_odr hidden swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0VyxGSlAASly7ElementQz5IndexQzcirTW"(i8* noalias dereferenceable(32) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #1 {
entry:
  %3 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxIsetWAnnYn_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %4 = call i8* @llvm.coro.begin(token %3, i8* null)
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 8
  %size = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call token @llvm.coro.alloca.alloc.i64(i64 %size, i32 16)
  %12 = call i8* @llvm.coro.alloca.get(token %11)
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %12)
  %13 = bitcast i8* %12 to %swift.opaque*
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %14 = load i8*, i8** %._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %15 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %16 = load i64, i64* %.count._value, align 8
  %17 = ptrtoint i8* %14 to i64
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %17, %18
  %20 = sdiv i64 %19, 1
  %21 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %22 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %21, i32 0, i32 9
  %stride = load i64, i64* %22, align 8, !invariant.load !17
  %23 = icmp eq i64 %stride, 0
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %95, label %26

26:                                               ; preds = %entry
  %27 = icmp eq i64 %20, -9223372036854775808
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = icmp eq i64 %stride, -1
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %101, label %32

32:                                               ; preds = %28
  br label %34

33:                                               ; preds = %26
  br label %34

34:                                               ; preds = %32, %33
  %35 = sdiv i64 %20, %stride
  %36 = srem i64 %20, %stride
  %37 = icmp eq i64 %36, 0
  %38 = xor i1 %37, true
  %39 = icmp slt i64 %35, 0
  %40 = or i1 %38, %39
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %96, label %42

42:                                               ; preds = %34
  %43 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %16, i64 %stride)
  %44 = extractvalue { i64, i1 } %43, 0
  %45 = extractvalue { i64, i1 } %43, 1
  %46 = getelementptr inbounds i8, i8* %15, i64 %44
  %47 = ptrtoint i8* %46 to i64
  %48 = sub i64 %47, %17
  %49 = sdiv i64 %48, 1
  %50 = icmp eq i64 %49, -9223372036854775808
  br i1 %50, label %51, label %56

51:                                               ; preds = %42
  %52 = icmp eq i64 %stride, -1
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false)
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %100, label %55

55:                                               ; preds = %51
  br label %57

56:                                               ; preds = %42
  br label %57

57:                                               ; preds = %55, %56
  %58 = sdiv i64 %49, %stride
  %59 = srem i64 %49, %stride
  %60 = icmp eq i64 %59, 0
  %61 = xor i1 %60, true
  %62 = icmp slt i64 0, %58
  %63 = xor i1 %62, true
  %64 = or i1 %61, %63
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false)
  br i1 %65, label %97, label %66

66:                                               ; preds = %57
  %67 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %68 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %67, i32 0, i32 10
  %flags = load i32, i32* %68, align 8, !invariant.load !17
  %69 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %69, 0
  br i1 %flags.isTriviallyDestroyable, label %70, label %71

70:                                               ; preds = %66
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %13, i64 0, %swift.type* %"\CF\84_0_0", i8* %14, %swift.type* %"\CF\84_0_0") #19
  br label %84

71:                                               ; preds = %66
  %72 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %72, 255
  %73 = add i64 %flags.alignmentMask, 1
  %74 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %73, i64 1)
  %75 = extractvalue { i64, i1 } %74, 0
  %76 = extractvalue { i64, i1 } %74, 1
  %77 = call i1 @llvm.expect.i1(i1 %76, i1 false)
  br i1 %77, label %98, label %78

78:                                               ; preds = %71
  %79 = and i64 %17, %75
  %80 = icmp eq i64 %79, 0
  %81 = xor i1 %80, true
  %82 = call i1 @llvm.expect.i1(i1 %81, i1 false)
  br i1 %82, label %99, label %83

83:                                               ; preds = %78
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %13, i64 0, %swift.type* %"\CF\84_0_0", i8* %14, %swift.type* %"\CF\84_0_0") #19
  br label %84

84:                                               ; preds = %70, %83
  %85 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %13)
  br i1 %85, label %90, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 1
  %88 = load i8*, i8** %87, align 8, !invariant.load !17
  %destroy1 = bitcast i8* %88 to void (%swift.opaque*, %swift.type*)*
  call void %destroy1(%swift.opaque* noalias %13, %swift.type* %"\CF\84_0_0") #9
  %89 = bitcast %swift.opaque* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %89)
  call void @llvm.coro.alloca.free(token %11)
  br label %coro.end

90:                                               ; preds = %84
  %91 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 1
  %92 = load i8*, i8** %91, align 8, !invariant.load !17
  %destroy = bitcast i8* %92 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %13, %swift.type* %"\CF\84_0_0") #9
  %93 = bitcast %swift.opaque* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %93)
  call void @llvm.coro.alloca.free(token %11)
  br label %coro.end

coro.end:                                         ; preds = %86, %90
  %94 = call i1 @llvm.coro.end(i8* %4, i1 false)
  unreachable

95:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

96:                                               ; preds = %34
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

97:                                               ; preds = %57
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

98:                                               ; preds = %71
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

99:                                               ; preds = %78
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

100:                                              ; preds = %51
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

101:                                              ; preds = %28
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASly11SubSequenceQzSny5IndexQzGcigTW"(%T10BufferView07MutableaB0V* noalias nocapture sret(%T10BufferView07MutableaB0V) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %4 = alloca %T10BufferView07MutableaB0V, align 8
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %5 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %7 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %8 = load i64, i64* %.count._value, align 8
  %9 = ptrtoint i8* %5 to i64
  %10 = ptrtoint i8* %7 to i64
  %11 = sub i64 %9, %10
  %12 = sdiv i64 %11, 1
  %13 = bitcast %swift.type* %Self to %swift.type**
  %14 = getelementptr inbounds %swift.type*, %swift.type** %13, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %14, align 8, !invariant.load !17
  %15 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %16 = getelementptr inbounds i8**, i8*** %15, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %16, align 8, !invariant.load !17, !dereferenceable !18
  %17 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %18 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %17, i32 0, i32 9
  %stride = load i64, i64* %18, align 8, !invariant.load !17
  %19 = icmp eq i64 %stride, 0
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %125, label %22

22:                                               ; preds = %entry
  %23 = icmp eq i64 %12, -9223372036854775808
  br i1 %23, label %24, label %29

24:                                               ; preds = %22
  %25 = icmp eq i64 %stride, -1
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false)
  br i1 %27, label %133, label %28

28:                                               ; preds = %24
  br label %30

29:                                               ; preds = %22
  br label %30

30:                                               ; preds = %28, %29
  %31 = sdiv i64 %12, %stride
  %32 = srem i64 %12, %stride
  %33 = icmp eq i64 %32, 0
  %34 = xor i1 %33, true
  %35 = icmp slt i64 %31, 0
  %36 = or i1 %34, %35
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %126, label %38

38:                                               ; preds = %30
  %39 = ptrtoint i8* %6 to i64
  %40 = sub i64 %39, %9
  %41 = sdiv i64 %40, 1
  %42 = icmp eq i64 %41, -9223372036854775808
  br i1 %42, label %43, label %48

43:                                               ; preds = %38
  %44 = icmp eq i64 %stride, -1
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  br i1 %46, label %132, label %47

47:                                               ; preds = %43
  br label %49

48:                                               ; preds = %38
  br label %49

49:                                               ; preds = %47, %48
  %50 = sdiv i64 %41, %stride
  %51 = srem i64 %41, %stride
  %52 = icmp eq i64 %51, 0
  %53 = xor i1 %52, true
  %54 = icmp slt i64 %50, 0
  %55 = or i1 %53, %54
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false)
  br i1 %56, label %127, label %57

57:                                               ; preds = %49
  %58 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %8, i64 %stride)
  %59 = extractvalue { i64, i1 } %58, 0
  %60 = extractvalue { i64, i1 } %58, 1
  %61 = getelementptr inbounds i8, i8* %7, i64 %59
  %62 = ptrtoint i8* %61 to i64
  %63 = sub i64 %62, %39
  %64 = sdiv i64 %63, 1
  %65 = icmp eq i64 %64, -9223372036854775808
  br i1 %65, label %66, label %71

66:                                               ; preds = %57
  %67 = icmp eq i64 %stride, -1
  %68 = call i1 @llvm.expect.i1(i1 %67, i1 false)
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false)
  br i1 %69, label %131, label %70

70:                                               ; preds = %66
  br label %72

71:                                               ; preds = %57
  br label %72

72:                                               ; preds = %70, %71
  %73 = sdiv i64 %64, %stride
  %74 = srem i64 %64, %stride
  %75 = icmp eq i64 %74, 0
  %76 = xor i1 %75, true
  %77 = icmp slt i64 %73, 0
  %78 = or i1 %76, %77
  %79 = call i1 @llvm.expect.i1(i1 %78, i1 false)
  br i1 %79, label %128, label %80

80:                                               ; preds = %72
  %81 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %82 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %81, i32 0, i32 10
  %flags = load i32, i32* %82, align 8, !invariant.load !17
  %83 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %83, 0
  br i1 %flags.isTriviallyDestroyable, label %84, label %85

84:                                               ; preds = %80
  br label %102

85:                                               ; preds = %80
  %86 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %86, 255
  %87 = add i64 %flags.alignmentMask, 1
  %88 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %87, i64 1)
  %89 = extractvalue { i64, i1 } %88, 0
  %90 = extractvalue { i64, i1 } %88, 1
  %91 = call i1 @llvm.expect.i1(i1 %90, i1 false)
  br i1 %91, label %129, label %92

92:                                               ; preds = %85
  %93 = and i64 %9, %89
  %94 = icmp eq i64 %93, 0
  %95 = xor i1 %94, true
  %96 = and i64 %39, %89
  %97 = icmp eq i64 %96, 0
  %98 = xor i1 %97, true
  %99 = or i1 %95, %98
  %100 = call i1 @llvm.expect.i1(i1 %99, i1 false)
  br i1 %100, label %130, label %101

101:                                              ; preds = %92
  br label %102

102:                                              ; preds = %84, %101
  %103 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %103)
  %.lowerBound1 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound1, i32 0, i32 0
  %.lowerBound1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound1._rawValue, i32 0, i32 0
  store i8* %5, i8** %.lowerBound1._rawValue._rawValue, align 8
  %.upperBound2 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound2, i32 0, i32 0
  %.upperBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound2._rawValue, i32 0, i32 0
  store i8* %6, i8** %.upperBound2._rawValue._rawValue, align 8
  %104 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %"\CF\84_0_0") #10
  %105 = extractvalue %swift.metadata_response %104, 0
  %106 = extractvalue %swift.metadata_response %104, 1
  %107 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %105, i8*** undef) #8
  %108 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %105, i8** %107) #10
  %109 = extractvalue %swift.metadata_response %108, 0
  %110 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %105, i8*** undef) #8
  %111 = call i8** @"$sS2iSZsWl"() #10
  %112 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %113 = getelementptr inbounds i8**, i8*** %112, i32 0
  store i8** %110, i8*** %113, align 8
  %114 = getelementptr inbounds i8**, i8*** %112, i32 1
  store i8** %111, i8*** %114, align 8
  %115 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %109, i8*** %112) #8
  %116 = bitcast %TSn* %3 to %swift.opaque*
  %117 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %109, i8** %115, %swift.opaque* noalias nocapture swiftself %116) #19
  %118 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %118)
  %119 = bitcast %T10BufferView07MutableaB0V* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %119)
  %.start3 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %4, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  store i8* %7, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %4, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  store i64 %8, i64* %.count4._value, align 8
  %120 = bitcast %T10BufferView07MutableaB0V* %4 to %swift.opaque*
  %121 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %5, i64 %117, %swift.opaque* noalias nocapture %120, %swift.type* %"\CF\84_0_0", %swift.type* %Self) #19
  %122 = extractvalue { i8*, i64 } %121, 0
  %123 = extractvalue { i8*, i64 } %121, 1
  %124 = bitcast %T10BufferView07MutableaB0V* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %124)
  %.start5 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 0
  %.start5._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start5, i32 0, i32 0
  %.start5._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start5._rawValue, i32 0, i32 0
  store i8* %122, i8** %.start5._rawValue._rawValue, align 8
  %.count6 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 1
  %.count6._value = getelementptr inbounds %TSi, %TSi* %.count6, i32 0, i32 0
  store i64 %123, i64* %.count6._value, align 8
  ret void

125:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

126:                                              ; preds = %30
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

127:                                              ; preds = %49
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

128:                                              ; preds = %72
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

129:                                              ; preds = %85
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

130:                                              ; preds = %92
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

131:                                              ; preds = %66
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

132:                                              ; preds = %43
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

133:                                              ; preds = %24
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl7indices7IndicesQzvgTW"(%TSn* noalias nocapture sret(%TSn) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %2 = alloca %TSn, align 8
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %5 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %6 = load i64, i64* %.count._value, align 8
  %7 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %5, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %6, i64 %stride)
  %16 = extractvalue { i64, i1 } %15, 0
  %17 = extractvalue { i64, i1 } %15, 1
  %18 = getelementptr inbounds i8, i8* %5, i64 %16
  %19 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %18, i8** %._rawValue1._rawValue, align 8
  %20 = bitcast %TSn* %2 to %TSn.19*
  %21 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %22 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %23 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %"\CF\84_0_0") #10
  %24 = extractvalue %swift.metadata_response %23, 0
  %25 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %24, i8*** undef) #8
  %26 = bitcast %TSn.19* %20 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %26, %swift.opaque* noalias nocapture %21, %swift.opaque* noalias nocapture %22, %swift.type* %24, i8** %25) #19
  %27 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27)
  %28 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %29 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %30 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %31 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %31)
  %.lowerBound2 = getelementptr inbounds %TSn, %TSn* %0, i32 0, i32 0
  %.lowerBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound2, i32 0, i32 0
  %.lowerBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound2._rawValue, i32 0, i32 0
  store i8* %29, i8** %.lowerBound2._rawValue._rawValue, align 8
  %.upperBound3 = getelementptr inbounds %TSn, %TSn* %0, i32 0, i32 1
  %.upperBound3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound3, i32 0, i32 0
  %.upperBound3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound3._rawValue, i32 0, i32 0
  store i8* %30, i8** %.upperBound3._rawValue._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferView07MutableaB0VyxGSlAASl7isEmptySbvgTW"(%T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %1 = load i64, i64* %.count._value, align 8
  %2 = icmp eq i64 %1, 0
  ret i1 %2
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSlAASl5countSivgTW"(%T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %1 = load i64, i64* %.count._value, align 8
  ret i64 %1
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl30_customIndexOfEquatableElementy0E0QzSgSg0H0QzFTW"(%TSq.22* noalias nocapture sret(%TSq.22) %0, %swift.opaque* noalias nocapture %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSq.22* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %TSq.22, %TSq.22* %0, i32 0, i32 1
  %5 = bitcast [1 x i8]* %4 to i1*
  store i1 true, i1* %5, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl34_customLastIndexOfEquatableElementy0F0QzSgSg0I0QzFTW"(%TSq.22* noalias nocapture sret(%TSq.22) %0, %swift.opaque* noalias nocapture %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSq.22* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %TSq.22, %TSq.22* %0, i32 0, i32 1
  %5 = bitcast [1 x i8]* %4 to i1*
  store i1 true, i1* %5, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl5index_8offsetBy5IndexQzAH_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %9 = bitcast %TSq.24* %5 to %swift.opaque*
  %10 = bitcast %T10BufferView07MutableaB0V* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %9, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %8, %swift.opaque* noalias nocapture swiftself %10) #19
  ret void
}

declare swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* noalias nocapture, i64, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.opaque* noalias nocapture swiftself) #0

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSlAASl8distance4from2toSi5IndexQz_AItFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyAHGtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %TSn* %1 to %TSn.4*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %3, %TSn.4* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyAHGtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %TSN.42* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %TSN.42* %1 to %TSN*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %3, %TSN* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AItFTW"(%TSn* noalias nocapture dereferenceable(16) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSn* %0 to %TSn.4*
  %4 = bitcast %TSn* %1 to %TSn.4*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTf4nnd_n"(%TSn.4* noalias nocapture %3, %TSn.4* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl5index5after5IndexQzAH_tFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = getelementptr inbounds i8, i8* %3, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %10, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSlAASl9formIndex5aftery0E0Qzz_tFTW"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %._rawValue._rawValue, align 8
  %3 = bitcast %swift.type* %Self to %swift.type**
  %4 = getelementptr inbounds %swift.type*, %swift.type** %3, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %4, align 8, !invariant.load !17
  %5 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = getelementptr inbounds i8, i8* %2, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %9, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASMy7ElementQz5IndexQzcisTW"(%swift.opaque* noalias nocapture %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %5 = load i64, i64* %.count._value, align 8
  %6 = ptrtoint i8* %3 to i64
  %7 = ptrtoint i8* %4 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv i64 %8, 1
  %10 = bitcast %swift.type* %Self to %swift.type**
  %11 = getelementptr inbounds %swift.type*, %swift.type** %10, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %11, align 8, !invariant.load !17
  %12 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %13 = getelementptr inbounds i8**, i8*** %12, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %13, align 8, !invariant.load !17, !dereferenceable !18
  %14 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 9
  %stride = load i64, i64* %15, align 8, !invariant.load !17
  %16 = icmp eq i64 %stride, 0
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %84, label %19

19:                                               ; preds = %entry
  %20 = icmp eq i64 %9, -9223372036854775808
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = icmp eq i64 %stride, -1
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %90, label %25

25:                                               ; preds = %21
  br label %27

26:                                               ; preds = %19
  br label %27

27:                                               ; preds = %25, %26
  %28 = sdiv i64 %9, %stride
  %29 = srem i64 %9, %stride
  %30 = icmp eq i64 %29, 0
  %31 = xor i1 %30, true
  %32 = icmp slt i64 %28, 0
  %33 = or i1 %31, %32
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  br i1 %34, label %85, label %35

35:                                               ; preds = %27
  %36 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %5, i64 %stride)
  %37 = extractvalue { i64, i1 } %36, 0
  %38 = extractvalue { i64, i1 } %36, 1
  %39 = getelementptr inbounds i8, i8* %4, i64 %37
  %40 = ptrtoint i8* %39 to i64
  %41 = sub i64 %40, %6
  %42 = sdiv i64 %41, 1
  %43 = icmp eq i64 %42, -9223372036854775808
  br i1 %43, label %44, label %49

44:                                               ; preds = %35
  %45 = icmp eq i64 %stride, -1
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  br i1 %47, label %89, label %48

48:                                               ; preds = %44
  br label %50

49:                                               ; preds = %35
  br label %50

50:                                               ; preds = %48, %49
  %51 = sdiv i64 %42, %stride
  %52 = srem i64 %42, %stride
  %53 = icmp eq i64 %52, 0
  %54 = xor i1 %53, true
  %55 = icmp slt i64 0, %51
  %56 = xor i1 %55, true
  %57 = or i1 %54, %56
  %58 = call i1 @llvm.expect.i1(i1 %57, i1 false)
  br i1 %58, label %86, label %59

59:                                               ; preds = %50
  %60 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %61 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %60, i32 0, i32 10
  %flags = load i32, i32* %61, align 8, !invariant.load !17
  %62 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %62, 0
  br i1 %flags.isTriviallyDestroyable, label %63, label %64

63:                                               ; preds = %59
  br label %77

64:                                               ; preds = %59
  %65 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %65, 255
  %66 = add i64 %flags.alignmentMask, 1
  %67 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %66, i64 1)
  %68 = extractvalue { i64, i1 } %67, 0
  %69 = extractvalue { i64, i1 } %67, 1
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %87, label %71

71:                                               ; preds = %64
  %72 = and i64 %6, %68
  %73 = icmp eq i64 %72, 0
  %74 = xor i1 %73, true
  %75 = call i1 @llvm.expect.i1(i1 %74, i1 false)
  br i1 %75, label %88, label %76

76:                                               ; preds = %71
  br label %77

77:                                               ; preds = %63, %76
  %78 = bitcast i8* %3 to %swift.opaque*
  %79 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 3
  %80 = load i8*, i8** %79, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %80 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %81 = call %swift.opaque* %assignWithCopy(%swift.opaque* %78, %swift.opaque* %0, %swift.type* %"\CF\84_0_0") #9
  %82 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 1
  %83 = load i8*, i8** %82, align 8, !invariant.load !17
  %destroy = bitcast i8* %83 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %0, %swift.type* %"\CF\84_0_0") #9
  ret void

84:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

85:                                               ; preds = %27
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

86:                                               ; preds = %50
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

87:                                               ; preds = %64
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

88:                                               ; preds = %71
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

89:                                               ; preds = %44
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

90:                                               ; preds = %21
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define linkonce_odr hidden swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0VyxGSMAASMy7ElementQz5IndexQzciMTW"(i8* noalias dereferenceable(32) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #1 {
entry:
  %3 = alloca [32 x i8], align 8
  %4 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxIsetWAnlYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %5 = call i8* @llvm.coro.begin(token %4, i8* null)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %7 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %8 = load i64, i64* %.count._value, align 8
  %9 = ptrtoint i8* %6 to i64
  %10 = ptrtoint i8* %7 to i64
  %11 = sub i64 %9, %10
  %12 = sdiv i64 %11, 1
  %13 = bitcast %swift.type* %Self to %swift.type**
  %14 = getelementptr inbounds %swift.type*, %swift.type** %13, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %14, align 8, !invariant.load !17
  %15 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %16 = getelementptr inbounds i8**, i8*** %15, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %16, align 8, !invariant.load !17, !dereferenceable !18
  %17 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %18 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %17, i32 0, i32 9
  %stride = load i64, i64* %18, align 8, !invariant.load !17
  %19 = icmp eq i64 %stride, 0
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %93, label %22

22:                                               ; preds = %entry
  %23 = icmp eq i64 %12, -9223372036854775808
  br i1 %23, label %24, label %29

24:                                               ; preds = %22
  %25 = icmp eq i64 %stride, -1
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false)
  br i1 %27, label %99, label %28

28:                                               ; preds = %24
  br label %30

29:                                               ; preds = %22
  br label %30

30:                                               ; preds = %28, %29
  %31 = sdiv i64 %12, %stride
  %32 = srem i64 %12, %stride
  %33 = icmp eq i64 %32, 0
  %34 = xor i1 %33, true
  %35 = icmp slt i64 %31, 0
  %36 = or i1 %34, %35
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %94, label %38

38:                                               ; preds = %30
  %39 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %8, i64 %stride)
  %40 = extractvalue { i64, i1 } %39, 0
  %41 = extractvalue { i64, i1 } %39, 1
  %42 = getelementptr inbounds i8, i8* %7, i64 %40
  %43 = ptrtoint i8* %42 to i64
  %44 = sub i64 %43, %9
  %45 = sdiv i64 %44, 1
  %46 = icmp eq i64 %45, -9223372036854775808
  br i1 %46, label %47, label %52

47:                                               ; preds = %38
  %48 = icmp eq i64 %stride, -1
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false)
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false)
  br i1 %50, label %98, label %51

51:                                               ; preds = %47
  br label %53

52:                                               ; preds = %38
  br label %53

53:                                               ; preds = %51, %52
  %54 = sdiv i64 %45, %stride
  %55 = srem i64 %45, %stride
  %56 = icmp eq i64 %55, 0
  %57 = xor i1 %56, true
  %58 = icmp slt i64 0, %54
  %59 = xor i1 %58, true
  %60 = or i1 %57, %59
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  br i1 %61, label %95, label %62

62:                                               ; preds = %53
  %63 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %64 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %63, i32 0, i32 10
  %flags = load i32, i32* %64, align 8, !invariant.load !17
  %65 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %65, 0
  br i1 %flags.isTriviallyDestroyable, label %66, label %67

66:                                               ; preds = %62
  br label %80

67:                                               ; preds = %62
  %68 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %68, 255
  %69 = add i64 %flags.alignmentMask, 1
  %70 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %69, i64 1)
  %71 = extractvalue { i64, i1 } %70, 0
  %72 = extractvalue { i64, i1 } %70, 1
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false)
  br i1 %73, label %96, label %74

74:                                               ; preds = %67
  %75 = and i64 %9, %71
  %76 = icmp eq i64 %75, 0
  %77 = xor i1 %76, true
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false)
  br i1 %78, label %97, label %79

79:                                               ; preds = %74
  br label %80

80:                                               ; preds = %66, %79
  %81 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %81)
  %82 = call i8* @llvm.coro.prepare.retcon(i8* bitcast ({ i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tciM" to i8*))
  %83 = bitcast i8* %82 to { i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)*
  %84 = call swiftcc { i8*, %swift.opaque* } %83(i8* noalias dereferenceable(32) %81, i8* %6, i8* %7, i64 %8, %swift.type* %"\CF\84_0_0") #19
  %85 = extractvalue { i8*, %swift.opaque* } %84, 0
  %86 = extractvalue { i8*, %swift.opaque* } %84, 1
  %87 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %86)
  br i1 %87, label %90, label %88

88:                                               ; preds = %80
  %89 = bitcast i8* %85 to void (i8*, i1)*
  call swiftcc void %89(i8* noalias dereferenceable(32) %81, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %81)
  br label %coro.end

90:                                               ; preds = %80
  %91 = bitcast i8* %85 to void (i8*, i1)*
  call swiftcc void %91(i8* noalias dereferenceable(32) %81, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %81)
  br label %coro.end

coro.end:                                         ; preds = %88, %90
  %92 = call i1 @llvm.coro.end(i8* %5, i1 false)
  unreachable

93:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

94:                                               ; preds = %30
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

95:                                               ; preds = %53
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

96:                                               ; preds = %67
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

97:                                               ; preds = %74
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

98:                                               ; preds = %47
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

99:                                               ; preds = %24
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASMy11SubSequenceQzSny5IndexQzGcisTW"(%T10BufferView07MutableaB0V* noalias nocapture dereferenceable(16) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %4 = alloca %TSn, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %5 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %6 = load i64, i64* %.count._value, align 8
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %7 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %8 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %.start1 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  %9 = load i8*, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  %10 = load i64, i64* %.count2._value, align 8
  %11 = ptrtoint i8* %7 to i64
  %12 = ptrtoint i8* %9 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv i64 %13, 1
  %15 = bitcast %swift.type* %Self to %swift.type**
  %16 = getelementptr inbounds %swift.type*, %swift.type** %15, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %16, align 8, !invariant.load !17
  %17 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %18 = getelementptr inbounds i8**, i8*** %17, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %18, align 8, !invariant.load !17, !dereferenceable !18
  %19 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %20 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %19, i32 0, i32 9
  %stride = load i64, i64* %20, align 8, !invariant.load !17
  %21 = icmp eq i64 %stride, 0
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %137, label %24

24:                                               ; preds = %entry
  %25 = icmp eq i64 %14, -9223372036854775808
  br i1 %25, label %26, label %31

26:                                               ; preds = %24
  %27 = icmp eq i64 %stride, -1
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %146, label %30

30:                                               ; preds = %26
  br label %32

31:                                               ; preds = %24
  br label %32

32:                                               ; preds = %30, %31
  %33 = sdiv i64 %14, %stride
  %34 = srem i64 %14, %stride
  %35 = icmp eq i64 %34, 0
  %36 = xor i1 %35, true
  %37 = icmp slt i64 %33, 0
  %38 = or i1 %36, %37
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false)
  br i1 %39, label %138, label %40

40:                                               ; preds = %32
  %41 = ptrtoint i8* %8 to i64
  %42 = sub i64 %41, %11
  %43 = sdiv i64 %42, 1
  %44 = icmp eq i64 %43, -9223372036854775808
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = icmp eq i64 %stride, -1
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  %48 = call i1 @llvm.expect.i1(i1 %47, i1 false)
  br i1 %48, label %145, label %49

49:                                               ; preds = %45
  br label %51

50:                                               ; preds = %40
  br label %51

51:                                               ; preds = %49, %50
  %52 = sdiv i64 %43, %stride
  %53 = srem i64 %43, %stride
  %54 = icmp eq i64 %53, 0
  %55 = xor i1 %54, true
  %56 = icmp slt i64 %52, 0
  %57 = or i1 %55, %56
  %58 = call i1 @llvm.expect.i1(i1 %57, i1 false)
  br i1 %58, label %139, label %59

59:                                               ; preds = %51
  %60 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %10, i64 %stride)
  %61 = extractvalue { i64, i1 } %60, 0
  %62 = extractvalue { i64, i1 } %60, 1
  %63 = getelementptr inbounds i8, i8* %9, i64 %61
  %64 = ptrtoint i8* %63 to i64
  %65 = sub i64 %64, %41
  %66 = sdiv i64 %65, 1
  %67 = icmp eq i64 %66, -9223372036854775808
  br i1 %67, label %68, label %73

68:                                               ; preds = %59
  %69 = icmp eq i64 %stride, -1
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  %71 = call i1 @llvm.expect.i1(i1 %70, i1 false)
  br i1 %71, label %144, label %72

72:                                               ; preds = %68
  br label %74

73:                                               ; preds = %59
  br label %74

74:                                               ; preds = %72, %73
  %75 = sdiv i64 %66, %stride
  %76 = srem i64 %66, %stride
  %77 = icmp eq i64 %76, 0
  %78 = xor i1 %77, true
  %79 = icmp slt i64 %75, 0
  %80 = or i1 %78, %79
  %81 = call i1 @llvm.expect.i1(i1 %80, i1 false)
  br i1 %81, label %140, label %82

82:                                               ; preds = %74
  %83 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %84 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %83, i32 0, i32 10
  %flags = load i32, i32* %84, align 8, !invariant.load !17
  %85 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %85, 0
  br i1 %flags.isTriviallyDestroyable, label %86, label %87

86:                                               ; preds = %82
  br label %104

87:                                               ; preds = %82
  %88 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %88, 255
  %89 = add i64 %flags.alignmentMask, 1
  %90 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %89, i64 1)
  %91 = extractvalue { i64, i1 } %90, 0
  %92 = extractvalue { i64, i1 } %90, 1
  %93 = call i1 @llvm.expect.i1(i1 %92, i1 false)
  br i1 %93, label %141, label %94

94:                                               ; preds = %87
  %95 = and i64 %11, %91
  %96 = icmp eq i64 %95, 0
  %97 = xor i1 %96, true
  %98 = and i64 %41, %91
  %99 = icmp eq i64 %98, 0
  %100 = xor i1 %99, true
  %101 = or i1 %97, %100
  %102 = call i1 @llvm.expect.i1(i1 %101, i1 false)
  br i1 %102, label %142, label %103

103:                                              ; preds = %94
  br label %104

104:                                              ; preds = %86, %103
  %105 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %105)
  %.lowerBound3 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound3, i32 0, i32 0
  %.lowerBound3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound3._rawValue, i32 0, i32 0
  store i8* %7, i8** %.lowerBound3._rawValue._rawValue, align 8
  %.upperBound4 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound4._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound4, i32 0, i32 0
  %.upperBound4._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound4._rawValue, i32 0, i32 0
  store i8* %8, i8** %.upperBound4._rawValue._rawValue, align 8
  %106 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %"\CF\84_0_0") #10
  %107 = extractvalue %swift.metadata_response %106, 0
  %108 = extractvalue %swift.metadata_response %106, 1
  %109 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %107, i8*** undef) #8
  %110 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %107, i8** %109) #10
  %111 = extractvalue %swift.metadata_response %110, 0
  %112 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %107, i8*** undef) #8
  %113 = call i8** @"$sS2iSZsWl"() #10
  %114 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %115 = getelementptr inbounds i8**, i8*** %114, i32 0
  store i8** %112, i8*** %115, align 8
  %116 = getelementptr inbounds i8**, i8*** %114, i32 1
  store i8** %113, i8*** %116, align 8
  %117 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %111, i8*** %114) #8
  %118 = bitcast %TSn* %3 to %swift.opaque*
  %119 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %111, i8** %117, %swift.opaque* noalias nocapture swiftself %118) #19
  %120 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %120)
  %121 = icmp eq i64 %119, %6
  %122 = xor i1 %121, true
  %123 = call i1 @llvm.expect.i1(i1 %122, i1 false)
  br i1 %123, label %143, label %124

124:                                              ; preds = %104
  %125 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %125)
  %.lowerBound5 = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound5._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound5, i32 0, i32 0
  %.lowerBound5._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound5._rawValue, i32 0, i32 0
  store i8* %7, i8** %.lowerBound5._rawValue._rawValue, align 8
  %.upperBound6 = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound6._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound6, i32 0, i32 0
  %.upperBound6._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound6._rawValue, i32 0, i32 0
  store i8* %8, i8** %.upperBound6._rawValue._rawValue, align 8
  %126 = bitcast %TSn* %4 to %swift.opaque*
  %127 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %111, i8** %117, %swift.opaque* noalias nocapture swiftself %126) #19
  %128 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %128)
  %spsave = call i8* @llvm.stacksave()
  %129 = alloca i8, i64 56, align 16
  %130 = bitcast i8* %129 to %swift.opaque*
  %131 = bitcast %swift.opaque* %130 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %132 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %131, i32 0, i32 1
  %133 = bitcast [8 x i8]* %132 to %swift.type**
  store %swift.type* %"\CF\84_0_0", %swift.type** %133, align 8
  %134 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %131, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %134, i32 0, i32 0
  store i8* %5, i8** %._rawValue, align 8
  %135 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %131, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %135, i32 0, i32 0
  store i64 %127, i64* %._value, align 8
  %136 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %131, i32 0, i32 4
  %.start7 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %136, i32 0, i32 0
  %.start7._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start7, i32 0, i32 0
  %.start7._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start7._rawValue, i32 0, i32 0
  store i8* %5, i8** %.start7._rawValue._rawValue, align 8
  %.count8 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %136, i32 0, i32 1
  %.count8._value = getelementptr inbounds %TSi, %TSi* %.count8, i32 0, i32 0
  store i64 %6, i64* %.count8._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %"\CF\84_0_0", i64 %127, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.8" to i8*), %swift.opaque* %130, i8* %7, %swift.type* %"\CF\84_0_0", %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror) #19
  call void @llvm.stackrestore(i8* %spsave)
  ret void

137:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

138:                                              ; preds = %32
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

139:                                              ; preds = %51
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

140:                                              ; preds = %74
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

141:                                              ; preds = %87
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

142:                                              ; preds = %94
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

143:                                              ; preds = %104
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

144:                                              ; preds = %68
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

145:                                              ; preds = %45
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

146:                                              ; preds = %26
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define linkonce_odr hidden swiftcc { i8*, %T10BufferView07MutableaB0V* } @"$s10BufferView07MutableaB0VyxGSMAASMy11SubSequenceQzSny5IndexQzGciMTW"(i8* noalias dereferenceable(32) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #1 {
entry:
  %3 = alloca %T10BufferView07MutableaB0V, align 8
  %4 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %5 = alloca %T10BufferView07MutableaB0V, align 8
  %6 = alloca %TSn, align 8
  %7 = alloca %TSn, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  %8 = alloca %TSn, align 8
  %9 = alloca %TSn, align 8
  %10 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sSnyxGq_q0_lSLRzr1_ly10BufferView0aB5IndexVyxGAB07MutableaB0VyxGAHIsetWAnlYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %11 = call i8* @llvm.coro.begin(token %10, i8* null)
  store %swift.error* null, %swift.error** %swifterror, align 8
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %13 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %14 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %15 = load i64, i64* %.count._value, align 8
  %16 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %16)
  %17 = ptrtoint i8* %12 to i64
  %18 = ptrtoint i8* %14 to i64
  %19 = sub i64 %17, %18
  %20 = sdiv i64 %19, 1
  %21 = bitcast %swift.type* %Self to %swift.type**
  %22 = getelementptr inbounds %swift.type*, %swift.type** %21, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %22, align 8, !invariant.load !17
  %23 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %24 = getelementptr inbounds i8**, i8*** %23, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %24, align 8, !invariant.load !17, !dereferenceable !18
  %25 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %26 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %25, i32 0, i32 9
  %stride = load i64, i64* %26, align 8, !invariant.load !17
  %27 = icmp eq i64 %stride, 0
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %298, label %30

30:                                               ; preds = %entry
  %31 = icmp eq i64 %20, -9223372036854775808
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  %33 = icmp eq i64 %stride, -1
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false)
  br i1 %35, label %318, label %36

36:                                               ; preds = %32
  br label %38

37:                                               ; preds = %30
  br label %38

38:                                               ; preds = %36, %37
  %39 = sdiv i64 %20, %stride
  %40 = srem i64 %20, %stride
  %41 = icmp eq i64 %40, 0
  %42 = xor i1 %41, true
  %43 = icmp slt i64 %39, 0
  %44 = or i1 %42, %43
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  br i1 %45, label %299, label %46

46:                                               ; preds = %38
  %47 = ptrtoint i8* %13 to i64
  %48 = sub i64 %47, %17
  %49 = sdiv i64 %48, 1
  %50 = icmp eq i64 %49, -9223372036854775808
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = icmp eq i64 %stride, -1
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false)
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %317, label %55

55:                                               ; preds = %51
  br label %57

56:                                               ; preds = %46
  br label %57

57:                                               ; preds = %55, %56
  %58 = sdiv i64 %49, %stride
  %59 = srem i64 %49, %stride
  %60 = icmp eq i64 %59, 0
  %61 = xor i1 %60, true
  %62 = icmp slt i64 %58, 0
  %63 = or i1 %61, %62
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false)
  br i1 %64, label %300, label %65

65:                                               ; preds = %57
  %66 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %15, i64 %stride)
  %67 = extractvalue { i64, i1 } %66, 0
  %68 = extractvalue { i64, i1 } %66, 1
  %69 = getelementptr inbounds i8, i8* %14, i64 %67
  %70 = ptrtoint i8* %69 to i64
  %71 = sub i64 %70, %47
  %72 = sdiv i64 %71, 1
  %73 = icmp eq i64 %72, -9223372036854775808
  br i1 %73, label %74, label %79

74:                                               ; preds = %65
  %75 = icmp eq i64 %stride, -1
  %76 = call i1 @llvm.expect.i1(i1 %75, i1 false)
  %77 = call i1 @llvm.expect.i1(i1 %76, i1 false)
  br i1 %77, label %316, label %78

78:                                               ; preds = %74
  br label %80

79:                                               ; preds = %65
  br label %80

80:                                               ; preds = %78, %79
  %81 = sdiv i64 %72, %stride
  %82 = srem i64 %72, %stride
  %83 = icmp eq i64 %82, 0
  %84 = xor i1 %83, true
  %85 = icmp slt i64 %81, 0
  %86 = or i1 %84, %85
  %87 = call i1 @llvm.expect.i1(i1 %86, i1 false)
  br i1 %87, label %301, label %88

88:                                               ; preds = %80
  %89 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %90 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %89, i32 0, i32 10
  %flags = load i32, i32* %90, align 8, !invariant.load !17
  %91 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %91, 0
  br i1 %flags.isTriviallyDestroyable, label %92, label %93

92:                                               ; preds = %88
  br label %110

93:                                               ; preds = %88
  %94 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %94, 255
  %95 = add i64 %flags.alignmentMask, 1
  %96 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %95, i64 1)
  %97 = extractvalue { i64, i1 } %96, 0
  %98 = extractvalue { i64, i1 } %96, 1
  %99 = call i1 @llvm.expect.i1(i1 %98, i1 false)
  br i1 %99, label %302, label %100

100:                                              ; preds = %93
  %101 = and i64 %17, %97
  %102 = icmp eq i64 %101, 0
  %103 = xor i1 %102, true
  %104 = and i64 %47, %97
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = or i1 %103, %106
  %108 = call i1 @llvm.expect.i1(i1 %107, i1 false)
  br i1 %108, label %303, label %109

109:                                              ; preds = %100
  br label %110

110:                                              ; preds = %92, %109
  %111 = icmp eq i64 %19, -9223372036854775808
  %112 = icmp eq i64 %48, -9223372036854775808
  %113 = icmp eq i64 %71, -9223372036854775808
  %114 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %114)
  %.lowerBound1 = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound1, i32 0, i32 0
  %.lowerBound1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound1._rawValue, i32 0, i32 0
  store i8* %12, i8** %.lowerBound1._rawValue._rawValue, align 8
  %.upperBound2 = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound2, i32 0, i32 0
  %.upperBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound2._rawValue, i32 0, i32 0
  store i8* %13, i8** %.upperBound2._rawValue._rawValue, align 8
  %115 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %"\CF\84_0_0") #10
  %116 = extractvalue %swift.metadata_response %115, 0
  %117 = extractvalue %swift.metadata_response %115, 1
  %118 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %116, i8*** undef) #8
  %119 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %116, i8** %118) #10
  %120 = extractvalue %swift.metadata_response %119, 0
  %121 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %116, i8*** undef) #8
  %122 = call i8** @"$sS2iSZsWl"() #10
  %123 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %124 = getelementptr inbounds i8**, i8*** %123, i32 0
  store i8** %121, i8*** %124, align 8
  %125 = getelementptr inbounds i8**, i8*** %123, i32 1
  store i8** %122, i8*** %125, align 8
  %126 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %120, i8*** %123) #8
  %127 = bitcast %TSn* %4 to %swift.opaque*
  %128 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %120, i8** %126, %swift.opaque* noalias nocapture swiftself %127) #19
  %129 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %129)
  %130 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %130)
  %.start3 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  store i8* %14, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %5, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  store i64 %15, i64* %.count4._value, align 8
  %131 = bitcast %T10BufferView07MutableaB0V* %5 to %swift.opaque*
  %132 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %12, i64 %128, %swift.opaque* noalias nocapture %131, %swift.type* %"\CF\84_0_0", %swift.type* %Self) #19
  %133 = extractvalue { i8*, i64 } %132, 0
  %134 = extractvalue { i8*, i64 } %132, 1
  %135 = bitcast %T10BufferView07MutableaB0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %135)
  %.start5 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start5._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start5, i32 0, i32 0
  %.start5._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start5._rawValue, i32 0, i32 0
  store i8* %133, i8** %.start5._rawValue._rawValue, align 8
  %.count6 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count6._value = getelementptr inbounds %TSi, %TSi* %.count6, i32 0, i32 0
  store i64 %134, i64* %.count6._value, align 8
  %136 = call i1 (...) @llvm.coro.suspend.retcon.i1(%T10BufferView07MutableaB0V* %3)
  br i1 %136, label %217, label %137

137:                                              ; preds = %110
  %.start16 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start16._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start16, i32 0, i32 0
  %.start16._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start16._rawValue, i32 0, i32 0
  %138 = load i8*, i8** %.start16._rawValue._rawValue, align 8
  %.count17 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count17._value = getelementptr inbounds %TSi, %TSi* %.count17, i32 0, i32 0
  %139 = load i64, i64* %.count17._value, align 8
  br i1 %111, label %143, label %140

140:                                              ; preds = %137
  br i1 %31, label %141, label %142

141:                                              ; preds = %140
  br label %145

142:                                              ; preds = %140
  br label %151

143:                                              ; preds = %137
  br i1 %31, label %144, label %150

144:                                              ; preds = %143
  br label %145

145:                                              ; preds = %144, %141
  %146 = icmp eq i64 %stride, -1
  %147 = call i1 @llvm.expect.i1(i1 %146, i1 false)
  %148 = call i1 @llvm.expect.i1(i1 %147, i1 false)
  br i1 %148, label %315, label %149

149:                                              ; preds = %145
  br label %151

150:                                              ; preds = %143
  br label %151

151:                                              ; preds = %150, %149, %142
  br i1 %112, label %155, label %152

152:                                              ; preds = %151
  br i1 %50, label %153, label %154

153:                                              ; preds = %152
  br label %157

154:                                              ; preds = %152
  br label %163

155:                                              ; preds = %151
  br i1 %50, label %156, label %162

156:                                              ; preds = %155
  br label %157

157:                                              ; preds = %156, %153
  %158 = icmp eq i64 %stride, -1
  %159 = call i1 @llvm.expect.i1(i1 %158, i1 false)
  %160 = call i1 @llvm.expect.i1(i1 %159, i1 false)
  br i1 %160, label %314, label %161

161:                                              ; preds = %157
  br label %163

162:                                              ; preds = %155
  br label %163

163:                                              ; preds = %162, %161, %154
  br i1 %113, label %167, label %164

164:                                              ; preds = %163
  br i1 %73, label %165, label %166

165:                                              ; preds = %164
  br label %169

166:                                              ; preds = %164
  br label %175

167:                                              ; preds = %163
  br i1 %73, label %168, label %174

168:                                              ; preds = %167
  br label %169

169:                                              ; preds = %168, %165
  %170 = icmp eq i64 %stride, -1
  %171 = call i1 @llvm.expect.i1(i1 %170, i1 false)
  %172 = call i1 @llvm.expect.i1(i1 %171, i1 false)
  br i1 %172, label %313, label %173

173:                                              ; preds = %169
  br label %175

174:                                              ; preds = %167
  br label %175

175:                                              ; preds = %174, %173, %166
  br i1 %flags.isTriviallyDestroyable, label %176, label %177

176:                                              ; preds = %175
  br label %194

177:                                              ; preds = %175
  %178 = zext i32 %flags to i64
  %flags.alignmentMask18 = and i64 %178, 255
  %179 = add i64 %flags.alignmentMask18, 1
  %180 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %179, i64 1)
  %181 = extractvalue { i64, i1 } %180, 0
  %182 = extractvalue { i64, i1 } %180, 1
  %183 = call i1 @llvm.expect.i1(i1 %182, i1 false)
  br i1 %183, label %310, label %184

184:                                              ; preds = %177
  %185 = and i64 %17, %181
  %186 = icmp eq i64 %185, 0
  %187 = xor i1 %186, true
  %188 = and i64 %47, %181
  %189 = icmp eq i64 %188, 0
  %190 = xor i1 %189, true
  %191 = or i1 %187, %190
  %192 = call i1 @llvm.expect.i1(i1 %191, i1 false)
  br i1 %192, label %311, label %193

193:                                              ; preds = %184
  br label %194

194:                                              ; preds = %176, %193
  %195 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %195)
  %.lowerBound19 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 0
  %.lowerBound19._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound19, i32 0, i32 0
  %.lowerBound19._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound19._rawValue, i32 0, i32 0
  store i8* %12, i8** %.lowerBound19._rawValue._rawValue, align 8
  %.upperBound20 = getelementptr inbounds %TSn, %TSn* %8, i32 0, i32 1
  %.upperBound20._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound20, i32 0, i32 0
  %.upperBound20._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound20._rawValue, i32 0, i32 0
  store i8* %13, i8** %.upperBound20._rawValue._rawValue, align 8
  %196 = bitcast %TSn* %8 to %swift.opaque*
  %197 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %120, i8** %126, %swift.opaque* noalias nocapture swiftself %196) #19
  %198 = bitcast %TSn* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %198)
  %199 = icmp eq i64 %197, %139
  %200 = xor i1 %199, true
  %201 = call i1 @llvm.expect.i1(i1 %200, i1 false)
  br i1 %201, label %312, label %202

202:                                              ; preds = %194
  %203 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %203)
  %.lowerBound21 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 0
  %.lowerBound21._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound21, i32 0, i32 0
  %.lowerBound21._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound21._rawValue, i32 0, i32 0
  store i8* %12, i8** %.lowerBound21._rawValue._rawValue, align 8
  %.upperBound22 = getelementptr inbounds %TSn, %TSn* %9, i32 0, i32 1
  %.upperBound22._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound22, i32 0, i32 0
  %.upperBound22._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound22._rawValue, i32 0, i32 0
  store i8* %13, i8** %.upperBound22._rawValue._rawValue, align 8
  %204 = bitcast %TSn* %9 to %swift.opaque*
  %205 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %120, i8** %126, %swift.opaque* noalias nocapture swiftself %204) #19
  %206 = bitcast %TSn* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %206)
  %207 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %208 = call i8* @llvm.coro.alloca.get(token %207)
  %209 = bitcast i8* %208 to %swift.opaque*
  %210 = bitcast %swift.opaque* %209 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %211 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %210, i32 0, i32 1
  %212 = bitcast [8 x i8]* %211 to %swift.type**
  store %swift.type* %"\CF\84_0_0", %swift.type** %212, align 8
  %213 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %210, i32 0, i32 2
  %._rawValue23 = getelementptr inbounds %TSV, %TSV* %213, i32 0, i32 0
  store i8* %138, i8** %._rawValue23, align 8
  %214 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %210, i32 0, i32 3
  %._value24 = getelementptr inbounds %TSi, %TSi* %214, i32 0, i32 0
  store i64 %205, i64* %._value24, align 8
  %215 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %210, i32 0, i32 4
  %.start25 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %215, i32 0, i32 0
  %.start25._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start25, i32 0, i32 0
  %.start25._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start25._rawValue, i32 0, i32 0
  store i8* %138, i8** %.start25._rawValue._rawValue, align 8
  %.count26 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %215, i32 0, i32 1
  %.count26._value = getelementptr inbounds %TSi, %TSi* %.count26, i32 0, i32 0
  store i64 %139, i64* %.count26._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %"\CF\84_0_0", i64 %205, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.7" to i8*), %swift.opaque* %209, i8* %12, %swift.type* %"\CF\84_0_0", %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror) #19
  call void @llvm.coro.alloca.free(token %207)
  %216 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %216)
  br label %coro.end

217:                                              ; preds = %110
  %.start7 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start7._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start7, i32 0, i32 0
  %.start7._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start7._rawValue, i32 0, i32 0
  %218 = load i8*, i8** %.start7._rawValue._rawValue, align 8
  %.count8 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count8._value = getelementptr inbounds %TSi, %TSi* %.count8, i32 0, i32 0
  %219 = load i64, i64* %.count8._value, align 8
  br i1 %111, label %223, label %220

220:                                              ; preds = %217
  br i1 %31, label %221, label %222

221:                                              ; preds = %220
  br label %225

222:                                              ; preds = %220
  br label %231

223:                                              ; preds = %217
  br i1 %31, label %224, label %230

224:                                              ; preds = %223
  br label %225

225:                                              ; preds = %224, %221
  %226 = icmp eq i64 %stride, -1
  %227 = call i1 @llvm.expect.i1(i1 %226, i1 false)
  %228 = call i1 @llvm.expect.i1(i1 %227, i1 false)
  br i1 %228, label %309, label %229

229:                                              ; preds = %225
  br label %231

230:                                              ; preds = %223
  br label %231

231:                                              ; preds = %230, %229, %222
  br i1 %112, label %235, label %232

232:                                              ; preds = %231
  br i1 %50, label %233, label %234

233:                                              ; preds = %232
  br label %237

234:                                              ; preds = %232
  br label %243

235:                                              ; preds = %231
  br i1 %50, label %236, label %242

236:                                              ; preds = %235
  br label %237

237:                                              ; preds = %236, %233
  %238 = icmp eq i64 %stride, -1
  %239 = call i1 @llvm.expect.i1(i1 %238, i1 false)
  %240 = call i1 @llvm.expect.i1(i1 %239, i1 false)
  br i1 %240, label %308, label %241

241:                                              ; preds = %237
  br label %243

242:                                              ; preds = %235
  br label %243

243:                                              ; preds = %242, %241, %234
  br i1 %113, label %247, label %244

244:                                              ; preds = %243
  br i1 %73, label %245, label %246

245:                                              ; preds = %244
  br label %249

246:                                              ; preds = %244
  br label %255

247:                                              ; preds = %243
  br i1 %73, label %248, label %254

248:                                              ; preds = %247
  br label %249

249:                                              ; preds = %248, %245
  %250 = icmp eq i64 %stride, -1
  %251 = call i1 @llvm.expect.i1(i1 %250, i1 false)
  %252 = call i1 @llvm.expect.i1(i1 %251, i1 false)
  br i1 %252, label %307, label %253

253:                                              ; preds = %249
  br label %255

254:                                              ; preds = %247
  br label %255

255:                                              ; preds = %254, %253, %246
  br i1 %flags.isTriviallyDestroyable, label %256, label %257

256:                                              ; preds = %255
  br label %274

257:                                              ; preds = %255
  %258 = zext i32 %flags to i64
  %flags.alignmentMask9 = and i64 %258, 255
  %259 = add i64 %flags.alignmentMask9, 1
  %260 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %259, i64 1)
  %261 = extractvalue { i64, i1 } %260, 0
  %262 = extractvalue { i64, i1 } %260, 1
  %263 = call i1 @llvm.expect.i1(i1 %262, i1 false)
  br i1 %263, label %304, label %264

264:                                              ; preds = %257
  %265 = and i64 %17, %261
  %266 = icmp eq i64 %265, 0
  %267 = xor i1 %266, true
  %268 = and i64 %47, %261
  %269 = icmp eq i64 %268, 0
  %270 = xor i1 %269, true
  %271 = or i1 %267, %270
  %272 = call i1 @llvm.expect.i1(i1 %271, i1 false)
  br i1 %272, label %305, label %273

273:                                              ; preds = %264
  br label %274

274:                                              ; preds = %256, %273
  %275 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %275)
  %.lowerBound10 = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 0
  %.lowerBound10._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound10, i32 0, i32 0
  %.lowerBound10._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound10._rawValue, i32 0, i32 0
  store i8* %12, i8** %.lowerBound10._rawValue._rawValue, align 8
  %.upperBound11 = getelementptr inbounds %TSn, %TSn* %6, i32 0, i32 1
  %.upperBound11._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound11, i32 0, i32 0
  %.upperBound11._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound11._rawValue, i32 0, i32 0
  store i8* %13, i8** %.upperBound11._rawValue._rawValue, align 8
  %276 = bitcast %TSn* %6 to %swift.opaque*
  %277 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %120, i8** %126, %swift.opaque* noalias nocapture swiftself %276) #19
  %278 = bitcast %TSn* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %278)
  %279 = icmp eq i64 %277, %219
  %280 = xor i1 %279, true
  %281 = call i1 @llvm.expect.i1(i1 %280, i1 false)
  br i1 %281, label %306, label %282

282:                                              ; preds = %274
  %283 = bitcast %TSn* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %283)
  %.lowerBound12 = getelementptr inbounds %TSn, %TSn* %7, i32 0, i32 0
  %.lowerBound12._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound12, i32 0, i32 0
  %.lowerBound12._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound12._rawValue, i32 0, i32 0
  store i8* %12, i8** %.lowerBound12._rawValue._rawValue, align 8
  %.upperBound13 = getelementptr inbounds %TSn, %TSn* %7, i32 0, i32 1
  %.upperBound13._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound13, i32 0, i32 0
  %.upperBound13._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound13._rawValue, i32 0, i32 0
  store i8* %13, i8** %.upperBound13._rawValue._rawValue, align 8
  %284 = bitcast %TSn* %7 to %swift.opaque*
  %285 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %120, i8** %126, %swift.opaque* noalias nocapture swiftself %284) #19
  %286 = bitcast %TSn* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %286)
  %287 = call token @llvm.coro.alloca.alloc.i64(i64 56, i32 16)
  %288 = call i8* @llvm.coro.alloca.get(token %287)
  %289 = bitcast i8* %288 to %swift.opaque*
  %290 = bitcast %swift.opaque* %289 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %291 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %290, i32 0, i32 1
  %292 = bitcast [8 x i8]* %291 to %swift.type**
  store %swift.type* %"\CF\84_0_0", %swift.type** %292, align 8
  %293 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %290, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %293, i32 0, i32 0
  store i8* %218, i8** %._rawValue, align 8
  %294 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %290, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %294, i32 0, i32 0
  store i64 %285, i64* %._value, align 8
  %295 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %290, i32 0, i32 4
  %.start14 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %295, i32 0, i32 0
  %.start14._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start14, i32 0, i32 0
  %.start14._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start14._rawValue, i32 0, i32 0
  store i8* %218, i8** %.start14._rawValue._rawValue, align 8
  %.count15 = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %295, i32 0, i32 1
  %.count15._value = getelementptr inbounds %TSi, %TSi* %.count15, i32 0, i32 0
  store i64 %219, i64* %.count15._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %"\CF\84_0_0", i64 %285, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.6" to i8*), %swift.opaque* %289, i8* %12, %swift.type* %"\CF\84_0_0", %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror) #19
  call void @llvm.coro.alloca.free(token %287)
  %296 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %296)
  br label %coro.end

coro.end:                                         ; preds = %202, %282
  %297 = call i1 @llvm.coro.end(i8* %11, i1 false)
  unreachable

298:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

299:                                              ; preds = %38
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

300:                                              ; preds = %57
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

301:                                              ; preds = %80
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

302:                                              ; preds = %93
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

303:                                              ; preds = %100
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

304:                                              ; preds = %257
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

305:                                              ; preds = %264
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

306:                                              ; preds = %274
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

307:                                              ; preds = %249
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

308:                                              ; preds = %237
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

309:                                              ; preds = %225
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable

310:                                              ; preds = %177
  call void asm sideeffect "", "n"(i32 12)
  call void @llvm.trap()
  unreachable

311:                                              ; preds = %184
  call void asm sideeffect "", "n"(i32 13)
  call void @llvm.trap()
  unreachable

312:                                              ; preds = %194
  call void asm sideeffect "", "n"(i32 14)
  call void @llvm.trap()
  unreachable

313:                                              ; preds = %169
  call void asm sideeffect "", "n"(i32 15)
  call void @llvm.trap()
  unreachable

314:                                              ; preds = %157
  call void asm sideeffect "", "n"(i32 16)
  call void @llvm.trap()
  unreachable

315:                                              ; preds = %145
  call void asm sideeffect "", "n"(i32 17)
  call void @llvm.trap()
  unreachable

316:                                              ; preds = %74
  call void asm sideeffect "", "n"(i32 18)
  call void @llvm.trap()
  unreachable

317:                                              ; preds = %51
  call void asm sideeffect "", "n"(i32 19)
  call void @llvm.trap()
  unreachable

318:                                              ; preds = %32
  call void asm sideeffect "", "n"(i32 20)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASM9partition2by5IndexQzSb7ElementQzKXE_tKFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, i8* %1, %swift.opaque* %2, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %6 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %7 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  call swiftcc void @"$sSMsSKRzrlE9partition2by5IndexSlQzSb7ElementSTQzKXE_tKF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %5, i8* %1, %swift.opaque* %2, %swift.type* %Self, i8** %6, i8** %SelfWitnessTable, %swift.opaque* nocapture swiftself %7, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #19
  %8 = load %swift.error*, %swift.error** %4, align 8
  %9 = icmp ne %swift.error* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %entry
  ret void

11:                                               ; preds = %entry
  %12 = phi %swift.error* [ %8, %entry ]
  store %swift.error* null, %swift.error** %4, align 8
  store %swift.error* %12, %swift.error** %4, align 8
  ret void
}

declare swiftcc void @"$sSMsSKRzrlE9partition2by5IndexSlQzSb7ElementSTQzKXE_tKF"(%swift.opaque* noalias nocapture sret(%swift.opaque), i8*, %swift.opaque*, %swift.type*, i8**, i8**, %swift.opaque* nocapture swiftself, %swift.error** noalias nocapture swifterror dereferenceable(8)) #0

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASM6swapAtyy5IndexQz_AGtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %5 = bitcast %T10BufferView07MutableaB0V* %2 to %swift.opaque*
  call swiftcc void @"$sSMsE6swapAtyy5IndexQz_ACtF"(%swift.opaque* noalias nocapture %3, %swift.opaque* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable, %swift.opaque* nocapture swiftself %5) #19
  ret void
}

declare swiftcc void @"$sSMsE6swapAtyy5IndexQz_ACtF"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.opaque* nocapture swiftself) #0

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASM011_withUnsafecA18PointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFTW"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, %swift.type* %"\CF\84_1_0", %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %swift.opaque* %0 to %TSq.16*
  %6 = bitcast %TSq.16* %5 to %TSq.25*
  %7 = bitcast %TSq.25* %6 to %swift.opaque*
  %8 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  call swiftcc void @"$sSMsE42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %7, i8* %1, %swift.opaque* %2, %swift.type* %Self, %swift.type* %"\CF\84_1_0", i8** %SelfWitnessTable, %swift.opaque* nocapture swiftself %8, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #19
  %9 = load %swift.error*, %swift.error** %4, align 8
  %10 = icmp ne %swift.error* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %entry
  ret void

12:                                               ; preds = %entry
  %13 = phi %swift.error* [ %9, %entry ]
  store %swift.error* null, %swift.error** %4, align 8
  store %swift.error* %13, %swift.error** %4, align 8
  ret void
}

declare swiftcc void @"$sSMsE42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque), i8*, %swift.opaque*, %swift.type*, %swift.type*, i8**, %swift.opaque* nocapture swiftself, %swift.error** noalias nocapture swifterror dereferenceable(8)) #0

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSMAASM014withContiguousC18StorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFTW"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, %swift.type* %"\CF\84_1_0", %T10BufferView07MutableaB0V* nocapture swiftself dereferenceable(16) %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %swift.opaque* %0 to %TSq.16*
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %7 = load i64, i64* %.count._value, align 8
  %8 = bitcast %swift.type* %Self to %swift.type**
  %9 = getelementptr inbounds %swift.type*, %swift.type** %8, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %9, align 8, !invariant.load !17
  %10 = bitcast %TSq.16* %5 to %swift.opaque*
  call swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %10, i8* %1, %swift.opaque* %2, i8* %6, i64 %7, %swift.type* %"\CF\84_0_0", %swift.type* %"\CF\84_1_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #19
  %11 = load %swift.error*, %swift.error** %4, align 8
  %12 = icmp ne %swift.error* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  ret void

14:                                               ; preds = %entry
  %15 = phi %swift.error* [ %11, %entry ]
  store %swift.error* null, %swift.error** %4, align 8
  store %swift.error* %15, %swift.error** %4, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSKAASK5index6before5IndexQzAH_tFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %13, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSKAASK9formIndex6beforey0E0Qzz_tFTW"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %._rawValue._rawValue, align 8
  %3 = bitcast %swift.type* %Self to %swift.type**
  %4 = getelementptr inbounds %swift.type*, %swift.type** %3, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %4, align 8, !invariant.load !17
  %5 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = getelementptr inbounds i8, i8* %2, i64 %10
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %12, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSKAASK5index_8offsetBy5IndexQzAH_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSKAASK5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %9 = bitcast %TSq.24* %5 to %swift.opaque*
  %10 = bitcast %T10BufferView07MutableaB0V* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %9, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %8, %swift.opaque* noalias nocapture swiftself %10) #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSKAASK8distance4from2toSi5IndexQz_AItFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSkAASk5index_8offsetBy5IndexQzAH_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView07MutableaB0VyxGSkAASk5index_8offsetBy07limitedF05IndexQzSgAI_SiAItFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = bitcast %TSq.24* %5 to %swift.opaque*
  %9 = bitcast %T10BufferView07MutableaB0V* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %8, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %SelfWitnessTable, %swift.opaque* noalias nocapture swiftself %9) #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView07MutableaB0VyxGSkAASk8distance4from2toSi5IndexQz_AItFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView07MutableaB0V* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferView07MutableaB0V10copyMemory4fromAA0aB5IndexVyxGA2AVyxG_tF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %bitcast = alloca i64, align 8
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 10
  %flags = load i32, i32* %7, align 8, !invariant.load !17
  %8 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %8, 0
  br i1 %flags.isTriviallyDestroyable, label %9, label %28

9:                                                ; preds = %entry
  %10 = icmp slt i64 %3, %1
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false)
  br i1 %11, label %33, label %12

12:                                               ; preds = %9
  %13 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %2, i64 %3, %swift.type* %Element)
  %14 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 9
  %stride = load i64, i64* %15, align 8, !invariant.load !17
  %16 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %17 = extractvalue { i64, i1 } %16, 0
  %18 = extractvalue { i64, i1 } %16, 1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  br i1 %19, label %34, label %20

20:                                               ; preds = %12
  %21 = icmp slt i64 %17, 0
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %13, i8* %0, i64 %17, i1 false)
  %24 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = getelementptr inbounds i8, i8* %2, i64 %25
  ret i8* %27

28:                                               ; preds = %entry
  %29 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %30 = bitcast i64* %bitcast to %swift.bridge**
  %31 = load %swift.bridge*, %swift.bridge** %30, align 8
  %32 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %31, i64 ptrtoint ([36 x i8]* @".str.35.BufferView/BufferView+Mutable.swift" to i64), i64 35, i8 2, i64 317, i32 0)
  unreachable

33:                                               ; preds = %9
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %12
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferViewAAV10startIndexAA0abD0VyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc void @"$s10BufferView07MutableaB0V6update9repeatingyx_tF"(%swift.opaque* noalias nocapture %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %3 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %4 = alloca i8, i64 48, align 16
  %5 = bitcast i8* %4 to %swift.opaque*
  %6 = bitcast %swift.opaque* %5 to <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>*
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %6, i32 0, i32 1
  %8 = bitcast [8 x i8]* %7 to %swift.type**
  store %swift.type* %Element, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %6, i32 0, i32 2
  store %swift.opaque* %0, %swift.opaque** %9, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %6, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %10, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %10, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %2, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V6update9repeatingyx_tFySpyxGXEfU_TA" to i8*), %swift.opaque* %5, i8* %3, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V6update9repeatingyx_tFySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* noalias nocapture %2, i8* %3, i64 %4, %swift.type* %Element, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  call swiftcc void @"$sSp6assign9repeating5countyx_SitF"(%swift.opaque* noalias nocapture %2, i64 %4, i8* %1, %swift.type* %Element)
  ret void
}

declare swiftcc void @"$sSp6assign9repeating5countyx_SitF"(%swift.opaque* noalias nocapture, i64, i8*, %swift.type*) #0

define swiftcc i8* @"$s10BufferView07MutableaB0V6update4from8IteratorQyd__9unwritten_AA0aB5IndexVyxG5indextqd___t7ElementQyd__RszSTRd__lF"(%swift.opaque* noalias nocapture %0, %swift.opaque* noalias nocapture %1, i8* %2, i64 %3, %swift.type* %Element, %swift.type* %S, i8** %S.Sequence) #0 {
entry:
  %4 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %Element) #10
  %5 = extractvalue %swift.metadata_response %4, 0
  %6 = bitcast %swift.type* %5 to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 8
  %size = load i64, i64* %9, align 8, !invariant.load !17
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %TSq.5*
  %12 = bitcast %swift.type* %Element to i8***
  %13 = getelementptr inbounds i8**, i8*** %12, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %13, align 8, !invariant.load !17, !dereferenceable !18
  %14 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 8
  %size1 = load i64, i64* %15, align 8, !invariant.load !17
  %16 = alloca i8, i64 %size1, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %16)
  %17 = bitcast i8* %16 to %swift.opaque*
  %18 = bitcast %swift.type* %S to i8***
  %19 = getelementptr inbounds i8**, i8*** %18, i64 -1
  %S.valueWitnesses = load i8**, i8*** %19, align 8, !invariant.load !17, !dereferenceable !18
  %20 = bitcast i8** %S.valueWitnesses to %swift.vwtable*
  %21 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %20, i32 0, i32 8
  %size2 = load i64, i64* %21, align 8, !invariant.load !17
  %22 = alloca i8, i64 %size2, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %22)
  %23 = bitcast i8* %22 to %swift.opaque*
  %24 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 0, i8** %S.Sequence, %swift.type* %S, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s8IteratorSTTl") #13
  %S.Iterator = extractvalue %swift.metadata_response %24, 0
  %25 = bitcast %swift.type* %S.Iterator to i8***
  %26 = getelementptr inbounds i8**, i8*** %25, i64 -1
  %S.Iterator.valueWitnesses = load i8**, i8*** %26, align 8, !invariant.load !17, !dereferenceable !18
  %27 = bitcast i8** %S.Iterator.valueWitnesses to %swift.vwtable*
  %28 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %27, i32 0, i32 8
  %size3 = load i64, i64* %28, align 8, !invariant.load !17
  %29 = alloca i8, i64 %size3, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %29)
  %30 = bitcast i8* %29 to %swift.opaque*
  %31 = getelementptr inbounds i8*, i8** %S.valueWitnesses, i32 2
  %32 = load i8*, i8** %31, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %32 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %33 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %23, %swift.opaque* noalias %1, %swift.type* %S) #9
  call swiftcc void @"$sST12makeIterator0B0QzyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %30, %swift.opaque* noalias nocapture swiftself %23, %swift.type* %S, i8** %S.Sequence)
  %34 = icmp eq i64 %3, 0
  br i1 %34, label %79, label %35

35:                                               ; preds = %entry
  %36 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %37 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %36, i32 0, i32 9
  %stride = load i64, i64* %37, align 8, !invariant.load !17
  %38 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %39 = extractvalue { i64, i1 } %38, 0
  %40 = extractvalue { i64, i1 } %38, 1
  %41 = getelementptr inbounds i8, i8* %2, i64 %39
  %42 = icmp ult i8* %2, %41
  br i1 %42, label %43, label %73

43:                                               ; preds = %35
  br label %44

44:                                               ; preds = %68, %43
  %45 = phi i8* [ %2, %43 ], [ %65, %68 ]
  %S.Iterator.IteratorProtocol = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %S.Sequence, %swift.type* %S, %swift.type* %S.Iterator, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$sST8IteratorST_StTn") #13
  %46 = bitcast %TSq.5* %11 to %TSq.40*
  %47 = bitcast %TSq.40* %46 to %swift.opaque*
  call swiftcc void @"$sSt4next7ElementQzSgyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %47, %swift.opaque* nocapture swiftself %30, %swift.type* %S.Iterator, i8** %S.Iterator.IteratorProtocol)
  %48 = bitcast %TSq.5* %11 to %swift.opaque*
  %49 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 6
  %50 = load i8*, i8** %49, align 8, !invariant.load !17
  %getEnumTagSinglePayload = bitcast i8* %50 to i32 (%swift.opaque*, i32, %swift.type*)*
  %51 = call i32 %getEnumTagSinglePayload(%swift.opaque* noalias %48, i32 1, %swift.type* %Element) #8
  %52 = icmp ne i32 %51, 1
  br i1 %52, label %54, label %69

53:                                               ; No predecessors!
  unreachable

54:                                               ; preds = %44
  %55 = bitcast %TSq.5* %11 to %swift.opaque*
  %56 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 4
  %57 = load i8*, i8** %56, align 8, !invariant.load !17
  %initializeWithTake4 = bitcast i8* %57 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %58 = call %swift.opaque* %initializeWithTake4(%swift.opaque* noalias %17, %swift.opaque* noalias %55, %swift.type* %Element) #9
  %59 = bitcast i8* %45 to %swift.opaque*
  %60 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %61 = load i8*, i8** %60, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %61 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %62 = call %swift.opaque* %assignWithCopy(%swift.opaque* %59, %swift.opaque* %17, %swift.type* %Element) #9
  %63 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %64 = load i8*, i8** %63, align 8, !invariant.load !17
  %destroy5 = bitcast i8* %64 to void (%swift.opaque*, %swift.type*)*
  call void %destroy5(%swift.opaque* noalias %17, %swift.type* %Element) #9
  %65 = getelementptr inbounds i8, i8* %45, i64 %stride
  %66 = icmp ult i8* %65, %41
  br i1 %66, label %68, label %67

67:                                               ; preds = %54
  br label %74

68:                                               ; preds = %54
  br label %44

69:                                               ; preds = %44
  %70 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %71 = load i8*, i8** %70, align 8, !invariant.load !17
  %destroy = bitcast i8* %71 to void (%swift.opaque*, %swift.type*)*
  %72 = bitcast %TSq.5* %11 to %swift.opaque*
  call void %destroy(%swift.opaque* noalias %72, %swift.type* %5) #9
  br label %74

73:                                               ; preds = %35
  br label %74

74:                                               ; preds = %67, %69, %73
  %75 = phi i8* [ %2, %73 ], [ %45, %69 ], [ %65, %67 ]
  %76 = getelementptr inbounds i8*, i8** %S.Iterator.valueWitnesses, i32 4
  %77 = load i8*, i8** %76, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %77 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %78 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %0, %swift.opaque* noalias %30, %swift.type* %S.Iterator) #9
  br label %83

79:                                               ; preds = %entry
  %80 = getelementptr inbounds i8*, i8** %S.Iterator.valueWitnesses, i32 4
  %81 = load i8*, i8** %80, align 8, !invariant.load !17
  %initializeWithTake6 = bitcast i8* %81 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %82 = call %swift.opaque* %initializeWithTake6(%swift.opaque* noalias %0, %swift.opaque* noalias %30, %swift.type* %S.Iterator) #9
  br label %83

83:                                               ; preds = %79, %74
  %84 = phi i8* [ %75, %74 ], [ %2, %79 ]
  %85 = bitcast %swift.opaque* %30 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %85)
  %86 = bitcast %swift.opaque* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %86)
  %87 = bitcast %swift.opaque* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %87)
  %88 = bitcast %TSq.5* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %88)
  ret i8* %84
}

define swiftcc i1 @"$s10BufferView0aB5IndexV1loiySbACyxG_AEtFZ"(i8* %0, i8* %1, %swift.type* %Element) #0 {
entry:
  %2 = icmp ult i8* %0, %1
  ret i1 %2
}

define swiftcc i8* @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lF"(%swift.opaque* noalias nocapture %0, i8* %1, i64 %2, %swift.type* %Element, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection") #0 {
entry:
  %3 = alloca %TSiSg, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %4 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %Element) #10
  %5 = extractvalue %swift.metadata_response %4, 0
  %6 = bitcast %swift.type* %5 to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 8
  %size = load i64, i64* %9, align 8, !invariant.load !17
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %TSq.6*
  %12 = bitcast %swift.type* %Element to i8***
  %13 = getelementptr inbounds i8**, i8*** %12, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %13, align 8, !invariant.load !17, !dereferenceable !18
  %14 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 8
  %size1 = load i64, i64* %15, align 8, !invariant.load !17
  %16 = alloca i8, i64 %size1, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %16)
  %17 = bitcast i8* %16 to %swift.opaque*
  %18 = getelementptr inbounds i8*, i8** %"some Collection<Element>.Collection", i32 1
  %19 = load i8*, i8** %18, align 8, !invariant.load !17
  %"some Collection<Element>.Sequence" = bitcast i8* %19 to i8**
  %20 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 0, i8** %"some Collection<Element>.Sequence", %swift.type* %"some Collection<Element>", %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s8IteratorSTTl") #13
  %"(some Collection<Element>).Iterator" = extractvalue %swift.metadata_response %20, 0
  %21 = bitcast %swift.type* %"(some Collection<Element>).Iterator" to i8***
  %22 = getelementptr inbounds i8**, i8*** %21, i64 -1
  %"(some Collection<Element>).Iterator.valueWitnesses" = load i8**, i8*** %22, align 8, !invariant.load !17, !dereferenceable !18
  %23 = bitcast i8** %"(some Collection<Element>).Iterator.valueWitnesses" to %swift.vwtable*
  %24 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %23, i32 0, i32 8
  %size2 = load i64, i64* %24, align 8, !invariant.load !17
  %25 = alloca i8, i64 %size2, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %25)
  %26 = bitcast i8* %25 to %swift.opaque*
  %27 = bitcast %swift.type* %"some Collection<Element>" to i8***
  %28 = getelementptr inbounds i8**, i8*** %27, i64 -1
  %"some Collection<Element>.valueWitnesses" = load i8**, i8*** %28, align 8, !invariant.load !17, !dereferenceable !18
  %29 = bitcast i8** %"some Collection<Element>.valueWitnesses" to %swift.vwtable*
  %30 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %29, i32 0, i32 8
  %size3 = load i64, i64* %30, align 8, !invariant.load !17
  %31 = alloca i8, i64 %size3, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %31)
  %32 = bitcast i8* %31 to %swift.opaque*
  %33 = bitcast %TSiSg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9, i8* %33)
  %34 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %35 = alloca i8, i64 56, align 16
  %36 = bitcast i8* %35 to %swift.opaque*
  %37 = bitcast %swift.opaque* %36 to <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>*
  %38 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %37, i32 0, i32 1
  %39 = bitcast [24 x i8]* %38 to %swift.type**
  store %swift.type* %Element, %swift.type** %39, align 8
  %40 = getelementptr inbounds %swift.type*, %swift.type** %39, i32 1
  store %swift.type* %"some Collection<Element>", %swift.type** %40, align 8
  %41 = getelementptr inbounds %swift.type*, %swift.type** %39, i32 2
  %42 = bitcast %swift.type** %41 to i8***
  store i8** %"some Collection<Element>.Collection", i8*** %42, align 8
  %43 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %37, i32 0, i32 2
  %._value = getelementptr inbounds %TSi, %TSi* %43, i32 0, i32 0
  store i64 %2, i64* %._value, align 8
  %44 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %37, i32 0, i32 3
  %._rawValue = getelementptr inbounds %TSv, %TSv* %44, i32 0, i32 0
  store i8* %34, i8** %._rawValue, align 8
  %45 = bitcast %TSiSg* %3 to %TSq.41*
  %46 = bitcast %TSq.41* %45 to %swift.opaque*
  call swiftcc void @"$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %46, i8* bitcast (void (%TSi*, i64, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_TA" to i8*), %swift.opaque* %36, %swift.type* @"$sSiN", %swift.opaque* noalias nocapture swiftself %0, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Sequence")
  %47 = bitcast %TSiSg* %3 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %TSiSg, %TSiSg* %3, i32 0, i32 1
  %50 = bitcast [1 x i8]* %49 to i1*
  %51 = load i1, i1* %50, align 8
  %52 = bitcast %TSiSg* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 9, i8* %52)
  br i1 %51, label %62, label %53

53:                                               ; preds = %entry
  br label %54

54:                                               ; preds = %53
  %55 = phi i64 [ %48, %53 ]
  %56 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %57 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %56, i32 0, i32 9
  %stride8 = load i64, i64* %57, align 8, !invariant.load !17
  %58 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %55, i64 %stride8)
  %59 = extractvalue { i64, i1 } %58, 0
  %60 = extractvalue { i64, i1 } %58, 1
  %61 = getelementptr inbounds i8, i8* %1, i64 %59
  br label %116

62:                                               ; preds = %entry
  %63 = icmp eq i64 %2, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %62
  %65 = getelementptr inbounds i8*, i8** %"some Collection<Element>.valueWitnesses", i32 2
  %66 = load i8*, i8** %65, align 8, !invariant.load !17
  %initializeWithCopy6 = bitcast i8* %66 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %67 = call %swift.opaque* %initializeWithCopy6(%swift.opaque* noalias %32, %swift.opaque* noalias %0, %swift.type* %"some Collection<Element>") #9
  %68 = call swiftcc i1 @"$sSl7isEmptySbvgTj"(%swift.opaque* noalias nocapture swiftself %32, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection")
  %69 = xor i1 %68, true
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %123, label %71

71:                                               ; preds = %64
  %72 = getelementptr inbounds i8*, i8** %"some Collection<Element>.valueWitnesses", i32 1
  %73 = load i8*, i8** %72, align 8, !invariant.load !17
  %destroy7 = bitcast i8* %73 to void (%swift.opaque*, %swift.type*)*
  call void %destroy7(%swift.opaque* noalias %32, %swift.type* %"some Collection<Element>") #9
  br label %116

74:                                               ; preds = %62
  %75 = getelementptr inbounds i8*, i8** %"some Collection<Element>.valueWitnesses", i32 2
  %76 = load i8*, i8** %75, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %76 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %77 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %32, %swift.opaque* noalias %0, %swift.type* %"some Collection<Element>") #9
  call swiftcc void @"$sST12makeIterator0B0QzyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %26, %swift.opaque* noalias nocapture swiftself %32, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Sequence")
  br label %78

78:                                               ; preds = %108, %74
  %79 = phi i8* [ %1, %74 ], [ %115, %108 ]
  %"(some Collection<Element>).Iterator.IteratorProtocol" = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %"some Collection<Element>.Sequence", %swift.type* %"some Collection<Element>", %swift.type* %"(some Collection<Element>).Iterator", %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$sST8IteratorST_StTn") #13
  %80 = bitcast %TSq.6* %11 to %TSq.40*
  %81 = bitcast %TSq.40* %80 to %swift.opaque*
  call swiftcc void @"$sSt4next7ElementQzSgyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %81, %swift.opaque* nocapture swiftself %26, %swift.type* %"(some Collection<Element>).Iterator", i8** %"(some Collection<Element>).Iterator.IteratorProtocol")
  %82 = bitcast %TSq.6* %11 to %swift.opaque*
  %83 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 6
  %84 = load i8*, i8** %83, align 8, !invariant.load !17
  %getEnumTagSinglePayload = bitcast i8* %84 to i32 (%swift.opaque*, i32, %swift.type*)*
  %85 = call i32 %getEnumTagSinglePayload(%swift.opaque* noalias %82, i32 1, %swift.type* %Element) #8
  %86 = icmp ne i32 %85, 1
  br i1 %86, label %94, label %88

87:                                               ; No predecessors!
  unreachable

88:                                               ; preds = %78
  %89 = getelementptr inbounds i8*, i8** %"(some Collection<Element>).Iterator.valueWitnesses", i32 1
  %90 = load i8*, i8** %89, align 8, !invariant.load !17
  %destroy = bitcast i8* %90 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %26, %swift.type* %"(some Collection<Element>).Iterator") #9
  %91 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %92 = load i8*, i8** %91, align 8, !invariant.load !17
  %destroy4 = bitcast i8* %92 to void (%swift.opaque*, %swift.type*)*
  %93 = bitcast %TSq.6* %11 to %swift.opaque*
  call void %destroy4(%swift.opaque* noalias %93, %swift.type* %5) #9
  br label %116

94:                                               ; preds = %78
  %95 = bitcast %TSq.6* %11 to %swift.opaque*
  %96 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 4
  %97 = load i8*, i8** %96, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %97 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %98 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %17, %swift.opaque* noalias %95, %swift.type* %Element) #9
  %99 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %100 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %99, i32 0, i32 9
  %stride = load i64, i64* %100, align 8, !invariant.load !17
  %101 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %102 = extractvalue { i64, i1 } %101, 0
  %103 = extractvalue { i64, i1 } %101, 1
  %104 = getelementptr inbounds i8, i8* %1, i64 %102
  %105 = icmp ult i8* %79, %104
  %106 = xor i1 %105, true
  %107 = call i1 @llvm.expect.i1(i1 %106, i1 false)
  br i1 %107, label %122, label %108

108:                                              ; preds = %94
  %109 = bitcast i8* %79 to %swift.opaque*
  %110 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %111 = load i8*, i8** %110, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %111 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %112 = call %swift.opaque* %assignWithCopy(%swift.opaque* %109, %swift.opaque* %17, %swift.type* %Element) #9
  %113 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %114 = load i8*, i8** %113, align 8, !invariant.load !17
  %destroy5 = bitcast i8* %114 to void (%swift.opaque*, %swift.type*)*
  call void %destroy5(%swift.opaque* noalias %17, %swift.type* %Element) #9
  %115 = getelementptr inbounds i8, i8* %79, i64 %stride
  br label %78

116:                                              ; preds = %54, %71, %88
  %117 = phi i8* [ %79, %88 ], [ %1, %71 ], [ %61, %54 ]
  %118 = bitcast %swift.opaque* %32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %118)
  %119 = bitcast %swift.opaque* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %119)
  %120 = bitcast %swift.opaque* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %120)
  %121 = bitcast %TSq.6* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %121)
  ret i8* %117

122:                                              ; preds = %94
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

123:                                              ; preds = %64
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define internal swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_"(%TSi* noalias nocapture sret(%TSi) %0, i64 %1, i64 %2, i64 %3, i8* %4, %swift.type* %Element, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection", %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i64 @"$sSR11baseAddressSPyxGSgvg"(i64 %1, i64 %2, %swift.type* %Element)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %entry
  %10 = inttoptr i64 %7 to i8*
  br label %12

11:                                               ; preds = %entry
  %._value = getelementptr inbounds %TSi, %TSi* %0, i32 0, i32 0
  store i64 0, i64* %._value, align 8
  br label %28

12:                                               ; preds = %9
  %13 = phi i8* [ %10, %9 ]
  %14 = icmp slt i64 %3, %2
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  %spsave = call i8* @llvm.stacksave()
  %17 = alloca i8, i64 64, align 16
  %18 = bitcast i8* %17 to %swift.opaque*
  %19 = bitcast %swift.opaque* %18 to <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>*
  %20 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %19, i32 0, i32 1
  %21 = bitcast [24 x i8]* %20 to %swift.type**
  store %swift.type* %Element, %swift.type** %21, align 8
  %22 = getelementptr inbounds %swift.type*, %swift.type** %21, i32 1
  store %swift.type* %"some Collection<Element>", %swift.type** %22, align 8
  %23 = getelementptr inbounds %swift.type*, %swift.type** %21, i32 2
  %24 = bitcast %swift.type** %23 to i8***
  store i8** %"some Collection<Element>.Collection", i8*** %24, align 8
  %25 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %19, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSP, %TSP* %25, i32 0, i32 0
  store i8* %13, i8** %._rawValue, align 8
  %26 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %19, i32 0, i32 3
  %._position = getelementptr inbounds %TSR.26, %TSR.26* %26, i32 0, i32 0
  %27 = bitcast %TSq.27* %._position to i64*
  store i64 %1, i64* %27, align 8
  %.count = getelementptr inbounds %TSR.26, %TSR.26* %26, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.type* %Element, i64 %2, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_ySpyxGXEfU_TA" to i8*), %swift.opaque* %18, i8* %4, %swift.type* %Element, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  call void @llvm.stackrestore(i8* %spsave)
  %._value1 = getelementptr inbounds %TSi, %TSi* %0, i32 0, i32 0
  store i64 %2, i64* %._value1, align 8
  br label %28

28:                                               ; preds = %16, %11
  ret void

29:                                               ; preds = %12
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i64 @"$sSR11baseAddressSPyxGSgvg"(i64, i64, %swift.type*) #0

define internal swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_ySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, i64 %4, %swift.type* %Element, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection", %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  call swiftcc void @"$sSp6assign4from5countySPyxG_SitF"(i8* %2, i64 %4, i8* %1, %swift.type* %Element)
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V20withUnsafeRawPointeryqd__qd__SV_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %24, label %16

16:                                               ; preds = %entry
  %17 = bitcast i8* %1 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %18 = bitcast %swift.opaque* %2 to %swift.refcounted*
  call swiftcc void %17(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %7, i64 %13, %swift.refcounted* swiftself %18, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %19 = load %swift.error*, %swift.error** %6, align 8
  %20 = icmp ne %swift.error* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  ret void

22:                                               ; preds = %16
  %23 = phi %swift.error* [ %19, %16 ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %23, %swift.error** %6, align 8
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC10RawPointeryqd__qd__Sv_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %24, label %16

16:                                               ; preds = %entry
  %17 = bitcast i8* %1 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %18 = bitcast %swift.opaque* %2 to %swift.refcounted*
  call swiftcc void %17(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %7, i64 %13, %swift.refcounted* swiftself %18, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %19 = load %swift.error*, %swift.error** %6, align 8
  %20 = icmp ne %swift.error* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  ret void

22:                                               ; preds = %16
  %23 = phi %swift.error* [ %19, %16 ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %23, %swift.error** %6, align 8
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca i8, i64 48, align 16
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = bitcast %swift.opaque* %8 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 1
  %11 = bitcast [16 x i8]* %10 to %swift.type**
  store %swift.type* %Element, %swift.type** %11, align 8
  %12 = getelementptr inbounds %swift.type*, %swift.type** %11, i32 1
  store %swift.type* %R, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$s10BufferView07MutableaB0V20withUnsafeRawPointeryqd__qd__SV_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlFqd__SV_SitKXEfU_TA" to i8*), %swift.opaque* %8, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %14 = load %swift.error*, %swift.error** %6, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %entry
  ret void

17:                                               ; preds = %entry
  %18 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %18, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlFqd__SV_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %3, %swift.opaque* %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = ptrtoint i8* %8 to i64
  %10 = bitcast i8* %3 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %11 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %10(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %7, i64 %9, %swift.refcounted* swiftself %11, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %12 = load %swift.error*, %swift.error** %6, align 8
  %13 = icmp ne %swift.error* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %entry
  ret void

15:                                               ; preds = %entry
  %16 = phi %swift.error* [ %12, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %16, %swift.error** %6, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca i8, i64 48, align 16
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = bitcast %swift.opaque* %8 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 1
  %11 = bitcast [16 x i8]* %10 to %swift.type**
  store %swift.type* %Element, %swift.type** %11, align 8
  %12 = getelementptr inbounds %swift.type*, %swift.type** %11, i32 1
  store %swift.type* %R, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC10RawPointeryqd__qd__Sv_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlFqd__Sv_SitKXEfU_TA" to i8*), %swift.opaque* %8, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %14 = load %swift.error*, %swift.error** %6, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %entry
  ret void

17:                                               ; preds = %entry
  %18 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %18, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlFqd__Sv_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %3, %swift.opaque* %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = ptrtoint i8* %8 to i64
  %10 = bitcast i8* %3 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %11 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %10(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %7, i64 %9, %swift.refcounted* swiftself %11, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %12 = load %swift.error*, %swift.error** %6, align 8
  %13 = icmp ne %swift.error* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %entry
  ret void

15:                                               ; preds = %entry
  %16 = phi %swift.error* [ %12, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %16, %swift.error** %6, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = alloca i8, i64 64, align 16
  %9 = bitcast i8* %8 to %swift.opaque*
  %10 = bitcast %swift.opaque* %9 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>*
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 1
  %12 = bitcast [16 x i8]* %11 to %swift.type**
  store %swift.type* %Element, %swift.type** %12, align 8
  %13 = getelementptr inbounds %swift.type*, %swift.type** %12, i32 1
  store %swift.type* %R, %swift.type** %13, align 8
  %14 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  %15 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %15, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %15, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %Element, i64 %4, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__SpyxGKXEfU_TA" to i8*), %swift.opaque* %9, i8* %7, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %16 = load %swift.error*, %swift.error** %6, align 8
  %17 = icmp ne %swift.error* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %entry
  ret void

19:                                               ; preds = %entry
  %20 = phi %swift.error* [ %16, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %20, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__SpyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, %swift.opaque* %3, i8* %4, i64 %5, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %2 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %3 to %swift.refcounted*
  call swiftcc void %8(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %10 = load %swift.error*, %swift.error** %7, align 8
  %11 = icmp ne %swift.error* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %entry
  ret void

13:                                               ; preds = %entry
  %14 = phi %swift.error* [ %10, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %14, %swift.error** %7, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca i8, i64 48, align 16
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = bitcast %swift.opaque* %8 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 1
  %11 = bitcast [16 x i8]* %10 to %swift.type**
  store %swift.type* %Element, %swift.type** %11, align 8
  %12 = getelementptr inbounds %swift.type*, %swift.type** %11, i32 1
  store %swift.type* %R, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_TA" to i8*), %swift.opaque* %8, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %14 = load %swift.error*, %swift.error** %6, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %entry
  ret void

17:                                               ; preds = %entry
  %18 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %18, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %3, %swift.opaque* %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = call swiftcc { i64, i64 } @"$sSR5start5countSRyxGSPyxGSg_SitcfC"(i64 %7, i64 %2, %swift.type* %Element)
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = bitcast i8* %3 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %12 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %11(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %9, i64 %10, %swift.refcounted* swiftself %12, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %13 = load %swift.error*, %swift.error** %6, align 8
  %14 = icmp ne %swift.error* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %entry
  ret void

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %13, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %17, %swift.error** %6, align 8
  ret void
}

declare swiftcc { i64, i64 } @"$sSR5start5countSRyxGSPyxGSg_SitcfC"(i64, i64, %swift.type*) #0

define swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = alloca i8, i64 64, align 16
  %9 = bitcast i8* %8 to %swift.opaque*
  %10 = bitcast %swift.opaque* %9 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>*
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 1
  %12 = bitcast [16 x i8]* %11 to %swift.type**
  store %swift.type* %Element, %swift.type** %12, align 8
  %13 = getelementptr inbounds %swift.type*, %swift.type** %12, i32 1
  store %swift.type* %R, %swift.type** %13, align 8
  %14 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  %15 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %10, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %15, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %15, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %Element, i64 %4, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlFqd__AEKXEfU_TA" to i8*), %swift.opaque* %9, i8* %7, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %16 = load %swift.error*, %swift.error** %6, align 8
  %17 = icmp ne %swift.error* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %entry
  ret void

19:                                               ; preds = %entry
  %20 = phi %swift.error* [ %16, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %20, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlFqd__AEKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, %swift.opaque* %3, i8* %4, i64 %5, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %2 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %3 to %swift.refcounted*
  call swiftcc void %8(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %10 = load %swift.error*, %swift.error** %7, align 8
  %11 = icmp ne %swift.error* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %entry
  ret void

13:                                               ; preds = %entry
  %14 = phi %swift.error* [ %10, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %14, %swift.error** %7, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca i8, i64 48, align 16
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = bitcast %swift.opaque* %8 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 1
  %11 = bitcast [16 x i8]* %10 to %swift.type**
  store %swift.type* %Element, %swift.type** %11, align 8
  %12 = getelementptr inbounds %swift.type*, %swift.type** %11, i32 1
  store %swift.type* %R, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlFqd__SpyxG_SitKXEfU_TA" to i8*), %swift.opaque* %8, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %14 = load %swift.error*, %swift.error** %6, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %entry
  ret void

17:                                               ; preds = %entry
  %18 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %18, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlFqd__SpyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %3, %swift.opaque* %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = call swiftcc { i64, i64 } @"$sSr5start5countSryxGSpyxGSg_SitcfC"(i64 %7, i64 %2, %swift.type* %Element)
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = bitcast i8* %3 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %12 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %11(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %9, i64 %10, %swift.refcounted* swiftself %12, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %13 = load %swift.error*, %swift.error** %6, align 8
  %14 = icmp ne %swift.error* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %entry
  ret void

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %13, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %17, %swift.error** %6, align 8
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V4load14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %3, i64 %4, %swift.type* %Element)
  %6 = extractvalue { i8*, i64 } %5, 0
  %7 = extractvalue { i8*, i64 } %5, 1
  call swiftcc void @"$s10BufferViewAAV4load14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %T, i8* %6, i64 %7, %swift.type* %Element, %swift.type* %T)
  ret void
}

define swiftcc void @"$s10BufferViewAAV4load14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %bitcast = alloca i64, align 8
  %5 = alloca %TSn.7, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = alloca %T10BufferView0aB5IndexV, align 8
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 10
  %flags = load i32, i32* %11, align 8, !invariant.load !17
  %12 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %12, 0
  br i1 %flags.isTriviallyDestroyable, label %13, label %66

13:                                               ; preds = %entry
  %14 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %14)
  %15 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  %17 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %16, i8** %._rawValue._rawValue, align 8
  %18 = bitcast %swift.type* %T to i8***
  %19 = getelementptr inbounds i8**, i8*** %18, i64 -1
  %T.valueWitnesses = load i8**, i8*** %19, align 8, !invariant.load !17, !dereferenceable !18
  %20 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %21 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %20, i32 0, i32 8
  %size = load i64, i64* %21, align 8, !invariant.load !17
  %22 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %size)
  %23 = extractvalue { i64, i1 } %22, 0
  %24 = extractvalue { i64, i1 } %22, 1
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %71, label %26

26:                                               ; preds = %13
  %27 = getelementptr inbounds i8, i8* %15, i64 %23
  %28 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %7, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %27, i8** %._rawValue1._rawValue, align 8
  %29 = bitcast %TSn.7* %5 to %TSn.19*
  %30 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %31 = bitcast %T10BufferView0aB5IndexV* %7 to %swift.opaque*
  %32 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %33 = extractvalue %swift.metadata_response %32, 0
  %34 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %33, i8*** undef) #8
  %35 = bitcast %TSn.19* %29 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %35, %swift.opaque* noalias nocapture %30, %swift.opaque* noalias nocapture %31, %swift.type* %33, i8** %34)
  %36 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36)
  %37 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37)
  %.lowerBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %38 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %39 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %40 = ptrtoint i8* %38 to i64
  %41 = ptrtoint i8* %3 to i64
  %42 = sub i64 %40, %41
  %43 = sdiv i64 %42, 1
  %44 = icmp slt i64 %43, 0
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  br i1 %45, label %72, label %46

46:                                               ; preds = %26
  %47 = ptrtoint i8* %39 to i64
  %48 = sub i64 %47, %40
  %49 = sdiv i64 %48, 1
  %50 = icmp slt i64 %49, 0
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  br i1 %51, label %73, label %52

52:                                               ; preds = %46
  %53 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %54 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %53, i32 0, i32 9
  %stride = load i64, i64* %54, align 8, !invariant.load !17
  %55 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %56 = extractvalue { i64, i1 } %55, 0
  %57 = extractvalue { i64, i1 } %55, 1
  %58 = getelementptr inbounds i8, i8* %3, i64 %56
  %59 = ptrtoint i8* %58 to i64
  %60 = sub i64 %59, %47
  %61 = sdiv i64 %60, 1
  %62 = icmp slt i64 %61, 0
  %63 = call i1 @llvm.expect.i1(i1 %62, i1 false)
  br i1 %63, label %74, label %64

64:                                               ; preds = %52
  %65 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %65)
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %T, i8* %15, %swift.type* %T)
  ret void

66:                                               ; preds = %entry
  %67 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %67)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %68 = bitcast i64* %bitcast to %swift.bridge**
  %69 = load %swift.bridge*, %swift.bridge** %68, align 8
  %70 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %69, i64 ptrtoint ([28 x i8]* @".str.27.BufferView/BufferView.swift" to i64), i64 27, i8 2, i64 332, i32 0)
  unreachable

71:                                               ; preds = %13
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

72:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

73:                                               ; preds = %46
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

74:                                               ; preds = %52
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V4load4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %3, i64 %4, %swift.type* %Element)
  %6 = extractvalue { i8*, i64 } %5, 0
  %7 = extractvalue { i8*, i64 } %5, 1
  call swiftcc void @"$s10BufferViewAAV4load4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %T, i8* %6, i64 %7, %swift.type* %Element, %swift.type* %T)
  ret void
}

define swiftcc void @"$s10BufferViewAAV4load4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Element to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 9
  %stride = load i64, i64* %12, align 8, !invariant.load !17
  %13 = icmp eq i64 %stride, 0
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %36, label %16

16:                                               ; preds = %entry
  %17 = icmp eq i64 %8, -9223372036854775808
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = icmp eq i64 %stride, -1
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %39, label %22

22:                                               ; preds = %18
  br label %24

23:                                               ; preds = %16
  br label %24

24:                                               ; preds = %22, %23
  %25 = sdiv i64 %8, %stride
  %26 = srem i64 %8, %stride
  %27 = icmp eq i64 %26, 0
  %28 = xor i1 %27, true
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %37, label %30

30:                                               ; preds = %24
  %31 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %25, i64 %stride)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  call swiftcc void @"$s10BufferViewAAV4load14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %32, %swift.type* %T, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T)
  ret void

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %24
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

38:                                               ; preds = %30
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

39:                                               ; preds = %18
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %3, i64 %4, %swift.type* %Element)
  %6 = extractvalue { i8*, i64 } %5, 0
  %7 = extractvalue { i8*, i64 } %5, 1
  call swiftcc void @"$s10BufferViewAAV13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %T, i8* %6, i64 %7, %swift.type* %Element, %swift.type* %T)
  ret void
}

define swiftcc void @"$s10BufferViewAAV13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %bitcast = alloca i64, align 8
  %5 = alloca %TSn.7, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = alloca %T10BufferView0aB5IndexV, align 8
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 10
  %flags = load i32, i32* %11, align 8, !invariant.load !17
  %12 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %12, 0
  br i1 %flags.isTriviallyDestroyable, label %13, label %19

13:                                               ; preds = %entry
  %14 = bitcast %swift.type* %T to i8***
  %15 = getelementptr inbounds i8**, i8*** %14, i64 -1
  %T.valueWitnesses = load i8**, i8*** %15, align 8, !invariant.load !17, !dereferenceable !18
  %16 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %17 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %16, i32 0, i32 10
  %flags1 = load i32, i32* %17, align 8, !invariant.load !17
  %18 = and i32 %flags1, 65536
  %flags1.isTriviallyDestroyable = icmp eq i32 %18, 0
  br i1 %flags1.isTriviallyDestroyable, label %21, label %20

19:                                               ; preds = %entry
  br label %72

20:                                               ; preds = %13
  br label %72

21:                                               ; preds = %13
  %22 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22)
  %23 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  %25 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %24, i8** %._rawValue._rawValue, align 8
  %26 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %27 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %26, i32 0, i32 8
  %size = load i64, i64* %27, align 8, !invariant.load !17
  %28 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %size)
  %29 = extractvalue { i64, i1 } %28, 0
  %30 = extractvalue { i64, i1 } %28, 1
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %77, label %32

32:                                               ; preds = %21
  %33 = getelementptr inbounds i8, i8* %23, i64 %29
  %34 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %7, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %33, i8** %._rawValue2._rawValue, align 8
  %35 = bitcast %TSn.7* %5 to %TSn.19*
  %36 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %37 = bitcast %T10BufferView0aB5IndexV* %7 to %swift.opaque*
  %38 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %39 = extractvalue %swift.metadata_response %38, 0
  %40 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %39, i8*** undef) #8
  %41 = bitcast %TSn.19* %35 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %41, %swift.opaque* noalias nocapture %36, %swift.opaque* noalias nocapture %37, %swift.type* %39, i8** %40)
  %42 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42)
  %43 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43)
  %.lowerBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %44 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %45 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %46 = ptrtoint i8* %44 to i64
  %47 = ptrtoint i8* %3 to i64
  %48 = sub i64 %46, %47
  %49 = sdiv i64 %48, 1
  %50 = icmp slt i64 %49, 0
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  br i1 %51, label %78, label %52

52:                                               ; preds = %32
  %53 = ptrtoint i8* %45 to i64
  %54 = sub i64 %53, %46
  %55 = sdiv i64 %54, 1
  %56 = icmp slt i64 %55, 0
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false)
  br i1 %57, label %79, label %58

58:                                               ; preds = %52
  %59 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %60 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %59, i32 0, i32 9
  %stride = load i64, i64* %60, align 8, !invariant.load !17
  %61 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %62 = extractvalue { i64, i1 } %61, 0
  %63 = extractvalue { i64, i1 } %61, 1
  %64 = getelementptr inbounds i8, i8* %3, i64 %62
  %65 = ptrtoint i8* %64 to i64
  %66 = sub i64 %65, %53
  %67 = sdiv i64 %66, 1
  %68 = icmp slt i64 %67, 0
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false)
  br i1 %69, label %80, label %70

70:                                               ; preds = %58
  %71 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %71)
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, %swift.type* %T, i8* %23, %swift.type* %T)
  ret void

72:                                               ; preds = %20, %19
  %73 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %73)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %74 = bitcast i64* %bitcast to %swift.bridge**
  %75 = load %swift.bridge*, %swift.bridge** %74, align 8
  %76 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %75, i64 ptrtoint ([28 x i8]* @".str.27.BufferView/BufferView.swift" to i64), i64 27, i8 2, i64 350, i32 0)
  unreachable

77:                                               ; preds = %21
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

78:                                               ; preds = %32
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

79:                                               ; preds = %52
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

80:                                               ; preds = %58
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V13loadUnaligned4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %3, i64 %4, %swift.type* %Element)
  %6 = extractvalue { i8*, i64 } %5, 0
  %7 = extractvalue { i8*, i64 } %5, 1
  call swiftcc void @"$s10BufferViewAAV13loadUnaligned4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %T, i8* %6, i64 %7, %swift.type* %Element, %swift.type* %T)
  ret void
}

define swiftcc void @"$s10BufferViewAAV13loadUnaligned4from2asqd__AA0aB5IndexVyxG_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Element to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 9
  %stride = load i64, i64* %12, align 8, !invariant.load !17
  %13 = icmp eq i64 %stride, 0
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %36, label %16

16:                                               ; preds = %entry
  %17 = icmp eq i64 %8, -9223372036854775808
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = icmp eq i64 %stride, -1
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %39, label %22

22:                                               ; preds = %18
  br label %24

23:                                               ; preds = %16
  br label %24

24:                                               ; preds = %22, %23
  %25 = sdiv i64 %8, %stride
  %26 = srem i64 %8, %stride
  %27 = icmp eq i64 %26, 0
  %28 = xor i1 %27, true
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %37, label %30

30:                                               ; preds = %24
  %31 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %25, i64 %stride)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  call swiftcc void @"$s10BufferViewAAV13loadUnaligned14fromByteOffset2asqd__Si_qd__mtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %32, %swift.type* %T, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T)
  ret void

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %24
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

38:                                               ; preds = %30
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

39:                                               ; preds = %18
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V10storeBytes2of12toByteOffset2asyqd___Siqd__mtlF"(%swift.opaque* noalias nocapture %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %bitcast = alloca i64, align 8
  %5 = alloca %TSn.7, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = alloca %T10BufferView0aB5IndexV, align 8
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 10
  %flags = load i32, i32* %11, align 8, !invariant.load !17
  %12 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %12, 0
  br i1 %flags.isTriviallyDestroyable, label %13, label %19

13:                                               ; preds = %entry
  %14 = bitcast %swift.type* %T to i8***
  %15 = getelementptr inbounds i8**, i8*** %14, i64 -1
  %T.valueWitnesses = load i8**, i8*** %15, align 8, !invariant.load !17, !dereferenceable !18
  %16 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %17 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %16, i32 0, i32 10
  %flags1 = load i32, i32* %17, align 8, !invariant.load !17
  %18 = and i32 %flags1, 65536
  %flags1.isTriviallyDestroyable = icmp eq i32 %18, 0
  br i1 %flags1.isTriviallyDestroyable, label %21, label %20

19:                                               ; preds = %entry
  br label %113

20:                                               ; preds = %13
  br label %113

21:                                               ; preds = %13
  %22 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22)
  %23 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %3, i64 %4, %swift.type* %Element)
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  %25 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %24, i8** %._rawValue._rawValue, align 8
  %26 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %27 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %26, i32 0, i32 8
  %size = load i64, i64* %27, align 8, !invariant.load !17
  %28 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %size)
  %29 = extractvalue { i64, i1 } %28, 0
  %30 = extractvalue { i64, i1 } %28, 1
  %31 = getelementptr inbounds i8, i8* %23, i64 %29
  %32 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %7, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %31, i8** %._rawValue2._rawValue, align 8
  %33 = bitcast %TSn.7* %5 to %TSn.19*
  %34 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %35 = bitcast %T10BufferView0aB5IndexV* %7 to %swift.opaque*
  %36 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %37 = extractvalue %swift.metadata_response %36, 0
  %38 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %37, i8*** undef) #8
  %39 = bitcast %TSn.19* %33 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %39, %swift.opaque* noalias nocapture %34, %swift.opaque* noalias nocapture %35, %swift.type* %37, i8** %38)
  %40 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40)
  %41 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41)
  %.lowerBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %42 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn.7, %TSn.7* %5, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %43 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %44 = ptrtoint i8* %42 to i64
  %45 = ptrtoint i8* %3 to i64
  %46 = sub i64 %44, %45
  %47 = sdiv i64 %46, 1
  %48 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %49 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %48, i32 0, i32 9
  %stride = load i64, i64* %49, align 8, !invariant.load !17
  %50 = icmp eq i64 %stride, 0
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  %52 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  br i1 %52, label %118, label %53

53:                                               ; preds = %21
  %54 = icmp eq i64 %47, -9223372036854775808
  br i1 %54, label %55, label %60

55:                                               ; preds = %53
  %56 = icmp eq i64 %stride, -1
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false)
  %58 = call i1 @llvm.expect.i1(i1 %57, i1 false)
  br i1 %58, label %124, label %59

59:                                               ; preds = %55
  br label %61

60:                                               ; preds = %53
  br label %61

61:                                               ; preds = %59, %60
  %62 = sdiv i64 %47, %stride
  %63 = srem i64 %47, %stride
  %64 = icmp eq i64 %63, 0
  %65 = xor i1 %64, true
  %66 = icmp slt i64 %62, 0
  %67 = or i1 %65, %66
  %68 = call i1 @llvm.expect.i1(i1 %67, i1 false)
  br i1 %68, label %119, label %69

69:                                               ; preds = %61
  %70 = ptrtoint i8* %43 to i64
  %71 = sub i64 %70, %44
  %72 = sdiv i64 %71, 1
  %73 = icmp eq i64 %72, -9223372036854775808
  br i1 %73, label %74, label %79

74:                                               ; preds = %69
  %75 = icmp eq i64 %stride, -1
  %76 = call i1 @llvm.expect.i1(i1 %75, i1 false)
  %77 = call i1 @llvm.expect.i1(i1 %76, i1 false)
  br i1 %77, label %123, label %78

78:                                               ; preds = %74
  br label %80

79:                                               ; preds = %69
  br label %80

80:                                               ; preds = %78, %79
  %81 = sdiv i64 %72, %stride
  %82 = srem i64 %72, %stride
  %83 = icmp eq i64 %82, 0
  %84 = xor i1 %83, true
  %85 = icmp slt i64 %81, 0
  %86 = or i1 %84, %85
  %87 = call i1 @llvm.expect.i1(i1 %86, i1 false)
  br i1 %87, label %120, label %88

88:                                               ; preds = %80
  %89 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %90 = extractvalue { i64, i1 } %89, 0
  %91 = extractvalue { i64, i1 } %89, 1
  %92 = getelementptr inbounds i8, i8* %3, i64 %90
  %93 = ptrtoint i8* %92 to i64
  %94 = sub i64 %93, %70
  %95 = sdiv i64 %94, 1
  %96 = icmp eq i64 %95, -9223372036854775808
  br i1 %96, label %97, label %102

97:                                               ; preds = %88
  %98 = icmp eq i64 %stride, -1
  %99 = call i1 @llvm.expect.i1(i1 %98, i1 false)
  %100 = call i1 @llvm.expect.i1(i1 %99, i1 false)
  br i1 %100, label %122, label %101

101:                                              ; preds = %97
  br label %103

102:                                              ; preds = %88
  br label %103

103:                                              ; preds = %101, %102
  %104 = sdiv i64 %95, %stride
  %105 = srem i64 %95, %stride
  %106 = icmp eq i64 %105, 0
  %107 = xor i1 %106, true
  %108 = icmp slt i64 %104, 0
  %109 = or i1 %107, %108
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false)
  br i1 %110, label %121, label %111

111:                                              ; preds = %103
  %112 = bitcast %TSn.7* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %112)
  call swiftcc void @_swift_se0349_UnsafeMutableRawPointer_storeBytes(%swift.opaque* noalias nocapture %0, i64 %1, %swift.type* %T, i8* %23, %swift.type* %T)
  ret void

113:                                              ; preds = %20, %19
  %114 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %114)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %115 = bitcast i64* %bitcast to %swift.bridge**
  %116 = load %swift.bridge*, %swift.bridge** %115, align 8
  %117 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %117)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %116, i64 ptrtoint ([36 x i8]* @".str.35.BufferView/BufferView+Mutable.swift" to i64), i64 35, i8 2, i64 498, i32 0)
  unreachable

118:                                              ; preds = %21
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

119:                                              ; preds = %61
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

120:                                              ; preds = %80
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

121:                                              ; preds = %103
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

122:                                              ; preds = %97
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

123:                                              ; preds = %74
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

124:                                              ; preds = %55
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @_swift_se0349_UnsafeMutableRawPointer_storeBytes(%swift.opaque* noalias nocapture %0, i64 %1, %swift.type* %2, i8* %3, %swift.type* %T) #0 {
entry:
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %4 = alloca i8, i64 40, align 16
  %5 = bitcast i8* %4 to %swift.opaque*
  %6 = bitcast %swift.opaque* %5 to <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>*
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %6, i32 0, i32 1
  %8 = bitcast [8 x i8]* %7 to %swift.type**
  store %swift.type* %T, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %6, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSv, %TSv* %9, i32 0, i32 0
  store i8* %3, i8** %._rawValue, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %6, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %10, i32 0, i32 0
  store i64 %1, i64* %._value, align 8
  call swiftcc void @"$ss17withUnsafePointer2to_q_x_q_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) undef, %swift.opaque* noalias nocapture %0, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$sSv10storeBytes2of12toByteOffset2asyx_SixmtlFySPyxGXEfU_TA" to i8*), %swift.opaque* %5, %swift.type* %T, %swift.type* getelementptr inbounds (%swift.full_existential_type, %swift.full_existential_type* @"$sytN", i32 0, i32 1), %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror)
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V10storeBytes2of2to2asyqd___AA0aB5IndexVyxGqd__mtlF"(%swift.opaque* noalias nocapture %0, i8* %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T) #0 {
entry:
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Element to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 9
  %stride = load i64, i64* %12, align 8, !invariant.load !17
  %13 = icmp eq i64 %stride, 0
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %36, label %16

16:                                               ; preds = %entry
  %17 = icmp eq i64 %8, -9223372036854775808
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = icmp eq i64 %stride, -1
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %39, label %22

22:                                               ; preds = %18
  br label %24

23:                                               ; preds = %16
  br label %24

24:                                               ; preds = %22, %23
  %25 = sdiv i64 %8, %stride
  %26 = srem i64 %8, %stride
  %27 = icmp eq i64 %26, 0
  %28 = xor i1 %27, true
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %37, label %30

30:                                               ; preds = %24
  %31 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %25, i64 %stride)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  call swiftcc void @"$s10BufferView07MutableaB0V10storeBytes2of12toByteOffset2asyqd___Siqd__mtlF"(%swift.opaque* noalias nocapture %0, i64 %32, %swift.type* %T, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %T)
  ret void

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %24
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

38:                                               ; preds = %30
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

39:                                               ; preds = %18
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V6offsetxSi_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = icmp slt i64 %1, 0
  %5 = icmp slt i64 %1, %3
  %6 = xor i1 %5, true
  %7 = or i1 %4, %6
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false)
  br i1 %8, label %24, label %9

9:                                                ; preds = %entry
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 9
  %stride = load i64, i64* %13, align 8, !invariant.load !17
  %14 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %15 = extractvalue { i64, i1 } %14, 0
  %16 = extractvalue { i64, i1 } %14, 1
  %17 = getelementptr inbounds i8, i8* %2, i64 %15
  %18 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %19 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %18, i32 0, i32 10
  %flags = load i32, i32* %19, align 8, !invariant.load !17
  %20 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %20, 0
  br i1 %flags.isTriviallyDestroyable, label %21, label %22

21:                                               ; preds = %9
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %17, %swift.type* %Element)
  br label %23

22:                                               ; preds = %9
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %17, %swift.type* %Element)
  br label %23

23:                                               ; preds = %21, %22
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V9uncheckedxSi_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %2, i64 %9
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 10
  %flags = load i32, i32* %13, align 8, !invariant.load !17
  %14 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %14, 0
  br i1 %flags.isTriviallyDestroyable, label %15, label %16

15:                                               ; preds = %entry
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %11, %swift.type* %Element)
  br label %17

16:                                               ; preds = %entry
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %11, %swift.type* %Element)
  br label %17

17:                                               ; preds = %15, %16
  ret void
}

; Function Attrs: noinline
define swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0V6offsetxSi_tciM"(i8* noalias dereferenceable(32) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #1 {
entry:
  %4 = alloca [32 x i8], align 8
  %5 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sSi10BufferView07MutableaB0VyxGxlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %6 = call i8* @llvm.coro.begin(token %5, i8* null)
  %7 = icmp slt i64 %1, 0
  %8 = icmp slt i64 %1, %3
  %9 = xor i1 %8, true
  %10 = or i1 %7, %9
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false)
  br i1 %11, label %25, label %12

12:                                               ; preds = %entry
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %13)
  %14 = call i8* @llvm.coro.prepare.retcon(i8* bitcast ({ i8*, %swift.opaque* } (i8*, i64, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxSi_tciM" to i8*))
  %15 = bitcast i8* %14 to { i8*, %swift.opaque* } (i8*, i64, i8*, i64, %swift.type*)*
  %16 = call swiftcc { i8*, %swift.opaque* } %15(i8* noalias dereferenceable(32) %13, i64 %1, i8* %2, i64 %3, %swift.type* %Element)
  %17 = extractvalue { i8*, %swift.opaque* } %16, 0
  %18 = extractvalue { i8*, %swift.opaque* } %16, 1
  %19 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %18)
  br i1 %19, label %22, label %20

20:                                               ; preds = %12
  %21 = bitcast i8* %17 to void (i8*, i1)*
  call swiftcc void %21(i8* noalias dereferenceable(32) %13, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %13)
  br label %coro.end

22:                                               ; preds = %12
  %23 = bitcast i8* %17 to void (i8*, i1)*
  call swiftcc void %23(i8* noalias dereferenceable(32) %13, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %13)
  br label %coro.end

coro.end:                                         ; preds = %20, %22
  %24 = call i1 @llvm.coro.end(i8* %6, i1 false)
  unreachable

25:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define swiftcc { i8*, %swift.opaque* } @"$s10BufferView07MutableaB0V9uncheckedxSi_tciM"(i8* noalias dereferenceable(32) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #1 {
entry:
  %4 = alloca [32 x i8], align 8
  %5 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sSi10BufferView07MutableaB0VyxGxlIetMAyyYl_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %6 = call i8* @llvm.coro.begin(token %5, i8* null)
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 %12
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %15)
  %16 = call i8* @llvm.coro.prepare.retcon(i8* bitcast ({ i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)* @"$s10BufferView07MutableaB0V9uncheckedxAA0aB5IndexVyxG_tciM" to i8*))
  %17 = bitcast i8* %16 to { i8*, %swift.opaque* } (i8*, i8*, i8*, i64, %swift.type*)*
  %18 = call swiftcc { i8*, %swift.opaque* } %17(i8* noalias dereferenceable(32) %15, i8* %14, i8* %2, i64 %3, %swift.type* %Element)
  %19 = extractvalue { i8*, %swift.opaque* } %18, 0
  %20 = extractvalue { i8*, %swift.opaque* } %18, 1
  %21 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %20)
  br i1 %21, label %24, label %22

22:                                               ; preds = %entry
  %23 = bitcast i8* %19 to void (i8*, i1)*
  call swiftcc void %23(i8* noalias dereferenceable(32) %15, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %15)
  br label %coro.end

24:                                               ; preds = %entry
  %25 = bitcast i8* %19 to void (i8*, i1)*
  call swiftcc void %25(i8* noalias dereferenceable(32) %15, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %15)
  br label %coro.end

coro.end:                                         ; preds = %22, %24
  %26 = call i1 @llvm.coro.end(i8* %6, i1 false)
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V6offsetxSi_tcis"(%swift.opaque* noalias nocapture %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = icmp slt i64 %1, 0
  %5 = icmp slt i64 %1, %3
  %6 = xor i1 %5, true
  %7 = or i1 %4, %6
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false)
  br i1 %8, label %24, label %9

9:                                                ; preds = %entry
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 9
  %stride = load i64, i64* %13, align 8, !invariant.load !17
  %14 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %15 = extractvalue { i64, i1 } %14, 0
  %16 = extractvalue { i64, i1 } %14, 1
  %17 = getelementptr inbounds i8, i8* %2, i64 %15
  %18 = bitcast i8* %17 to %swift.opaque*
  %19 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %20 = load i8*, i8** %19, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %20 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %21 = call %swift.opaque* %assignWithCopy(%swift.opaque* %18, %swift.opaque* %0, %swift.type* %Element) #9
  %22 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %23 = load i8*, i8** %22, align 8, !invariant.load !17
  %destroy = bitcast i8* %23 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %0, %swift.type* %Element) #9
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView07MutableaB0V9uncheckedxSi_tcis"(%swift.opaque* noalias nocapture %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %2, i64 %9
  %12 = bitcast i8* %11 to %swift.opaque*
  %13 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 3
  %14 = load i8*, i8** %13, align 8, !invariant.load !17
  %assignWithCopy = bitcast i8* %14 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %15 = call %swift.opaque* %assignWithCopy(%swift.opaque* %12, %swift.opaque* %0, %swift.type* %Element) #9
  %16 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 1
  %17 = load i8*, i8** %16, align 8, !invariant.load !17
  %destroy = bitcast i8* %17 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %0, %swift.type* %Element) #9
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V5firstxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.opaque* %0 to %TSq.32*
  %4 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %1, i64 %2, %swift.type* %Element)
  %5 = extractvalue { i8*, i64 } %4, 0
  %6 = extractvalue { i8*, i64 } %4, 1
  %7 = bitcast %TSq.32* %3 to %swift.opaque*
  call swiftcc void @"$s10BufferViewAAV5firstxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %7, i8* %5, i64 %6, %swift.type* %Element)
  ret void
}

define swiftcc void @"$s10BufferViewAAV5firstxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.opaque* %0 to %TSq.32*
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %5, label %11

5:                                                ; preds = %entry
  %6 = bitcast %TSq.32* %3 to %swift.opaque*
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses1 = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = getelementptr inbounds i8*, i8** %Element.valueWitnesses1, i32 7
  %10 = load i8*, i8** %9, align 8, !invariant.load !17
  %storeEnumTagSinglePayload2 = bitcast i8* %10 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload2(%swift.opaque* noalias %6, i32 1, i32 1, %swift.type* %Element) #9
  br label %24

11:                                               ; preds = %entry
  %12 = bitcast %TSq.32* %3 to %swift.opaque*
  %13 = bitcast %swift.type* %Element to i8***
  %14 = getelementptr inbounds i8**, i8*** %13, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %14, align 8, !invariant.load !17, !dereferenceable !18
  %15 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %16 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %15, i32 0, i32 10
  %flags = load i32, i32* %16, align 8, !invariant.load !17
  %17 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %17, 0
  br i1 %flags.isTriviallyDestroyable, label %18, label %19

18:                                               ; preds = %11
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %12, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %20

19:                                               ; preds = %11
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %12, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %20

20:                                               ; preds = %18, %19
  %21 = bitcast %TSq.32* %3 to %swift.opaque*
  %22 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 7
  %23 = load i8*, i8** %22, align 8, !invariant.load !17
  %storeEnumTagSinglePayload = bitcast i8* %23 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload(%swift.opaque* noalias %21, i32 0, i32 1, %swift.type* %Element) #9
  br label %24

24:                                               ; preds = %5, %20
  ret void
}

define swiftcc void @"$s10BufferView07MutableaB0V4lastxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.opaque* %0 to %TSq.32*
  %4 = call swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGAA07MutableaB0VyxGcfC"(i8* %1, i64 %2, %swift.type* %Element)
  %5 = extractvalue { i8*, i64 } %4, 0
  %6 = extractvalue { i8*, i64 } %4, 1
  %7 = bitcast %TSq.32* %3 to %swift.opaque*
  call swiftcc void @"$s10BufferViewAAV4lastxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %7, i8* %5, i64 %6, %swift.type* %Element)
  ret void
}

define swiftcc void @"$s10BufferViewAAV4lastxSgvg"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.opaque* %0 to %TSq.32*
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %5, label %11

5:                                                ; preds = %entry
  %6 = bitcast %TSq.32* %3 to %swift.opaque*
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses1 = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = getelementptr inbounds i8*, i8** %Element.valueWitnesses1, i32 7
  %10 = load i8*, i8** %9, align 8, !invariant.load !17
  %storeEnumTagSinglePayload2 = bitcast i8* %10 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload2(%swift.opaque* noalias %6, i32 1, i32 1, %swift.type* %Element) #9
  br label %33

11:                                               ; preds = %entry
  %12 = bitcast %TSq.32* %3 to %swift.opaque*
  %13 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 1)
  %14 = extractvalue { i64, i1 } %13, 0
  %15 = extractvalue { i64, i1 } %13, 1
  %16 = bitcast %swift.type* %Element to i8***
  %17 = getelementptr inbounds i8**, i8*** %16, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %17, align 8, !invariant.load !17, !dereferenceable !18
  %18 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %19 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %18, i32 0, i32 9
  %stride = load i64, i64* %19, align 8, !invariant.load !17
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %14, i64 %stride)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = getelementptr inbounds i8, i8* %1, i64 %21
  %24 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %25 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %24, i32 0, i32 10
  %flags = load i32, i32* %25, align 8, !invariant.load !17
  %26 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %26, 0
  br i1 %flags.isTriviallyDestroyable, label %27, label %28

27:                                               ; preds = %11
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %12, i64 0, %swift.type* %Element, i8* %23, %swift.type* %Element)
  br label %29

28:                                               ; preds = %11
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %12, i64 0, %swift.type* %Element, i8* %23, %swift.type* %Element)
  br label %29

29:                                               ; preds = %27, %28
  %30 = bitcast %TSq.32* %3 to %swift.opaque*
  %31 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 7
  %32 = load i8*, i8** %31, align 8, !invariant.load !17
  %storeEnumTagSinglePayload = bitcast i8* %32 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload(%swift.opaque* noalias %30, i32 0, i32 1, %swift.type* %Element) #9
  br label %33

33:                                               ; preds = %5, %29
  ret void
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V6prefixyACyxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferView07MutableaB0V, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %23, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %13)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %14 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  %15 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %16 = extractvalue %swift.metadata_response %15, 0
  %17 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %12, i64 %11, %swift.opaque* noalias nocapture %14, %swift.type* %Element, %swift.type* %16)
  %18 = extractvalue { i8*, i64 } %17, 0
  %19 = extractvalue { i8*, i64 } %17, 1
  %20 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20)
  %21 = insertvalue { i8*, i64 } undef, i8* %18, 0
  %22 = insertvalue { i8*, i64 } %21, i64 %19, 1
  ret { i8*, i64 } %22

23:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V6suffixyACyxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferView07MutableaB0V, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %36, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %11)
  %14 = extractvalue { i64, i1 } %13, 0
  %15 = extractvalue { i64, i1 } %13, 1
  %16 = bitcast %swift.type* %Element to i8***
  %17 = getelementptr inbounds i8**, i8*** %16, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %17, align 8, !invariant.load !17, !dereferenceable !18
  %18 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %19 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %18, i32 0, i32 9
  %stride = load i64, i64* %19, align 8, !invariant.load !17
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %14, i64 %stride)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %37, label %24

24:                                               ; preds = %10
  %25 = getelementptr inbounds i8, i8* %12, i64 %21
  %26 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %27 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  %28 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %29 = extractvalue %swift.metadata_response %28, 0
  %30 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %25, i64 %11, %swift.opaque* noalias nocapture %27, %swift.type* %Element, %swift.type* %29)
  %31 = extractvalue { i8*, i64 } %30, 0
  %32 = extractvalue { i8*, i64 } %30, 1
  %33 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33)
  %34 = insertvalue { i8*, i64 } undef, i8* %31, 0
  %35 = insertvalue { i8*, i64 } %34, i64 %32, 1
  ret { i8*, i64 } %35

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V9dropFirstyACyxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferView07MutableaB0V, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %36, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = bitcast %swift.type* %Element to i8***
  %14 = getelementptr inbounds i8**, i8*** %13, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %14, align 8, !invariant.load !17, !dereferenceable !18
  %15 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %16 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %15, i32 0, i32 9
  %stride = load i64, i64* %16, align 8, !invariant.load !17
  %17 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %11, i64 %stride)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %37, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds i8, i8* %12, i64 %18
  %23 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %11)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %27 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  %28 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %29 = extractvalue %swift.metadata_response %28, 0
  %30 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %22, i64 %24, %swift.opaque* noalias nocapture %27, %swift.type* %Element, %swift.type* %29)
  %31 = extractvalue { i8*, i64 } %30, 0
  %32 = extractvalue { i8*, i64 } %30, 1
  %33 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33)
  %34 = insertvalue { i8*, i64 } undef, i8* %31, 0
  %35 = insertvalue { i8*, i64 } %34, i64 %32, 1
  ret { i8*, i64 } %35

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V8dropLastyACyxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferView07MutableaB0V, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %26, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %12

8:                                                ; preds = %6
  %9 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %0)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  br label %13

12:                                               ; preds = %6
  br label %13

13:                                               ; preds = %8, %12
  %14 = phi i64 [ 0, %12 ], [ %10, %8 ]
  %15 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %16 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %16)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %17 = bitcast %T10BufferView07MutableaB0V* %3 to %swift.opaque*
  %18 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %19 = extractvalue %swift.metadata_response %18, 0
  %20 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %15, i64 %14, %swift.opaque* noalias nocapture %17, %swift.type* %Element, %swift.type* %19)
  %21 = extractvalue { i8*, i64 } %20, 0
  %22 = extractvalue { i8*, i64 } %20, 1
  %23 = bitcast %T10BufferView07MutableaB0V* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %23)
  %24 = insertvalue { i8*, i64 } undef, i8* %21, 0
  %25 = insertvalue { i8*, i64 } %24, i64 %22, 1
  ret { i8*, i64 } %25

26:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V6prefix4upToACyxGAA0aB5IndexVyxG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %TSn, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferView07MutableaB0V, align 8
  %7 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %1, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %0, i8** %._rawValue1._rawValue, align 8
  %10 = bitcast %TSn* %3 to %TSn.19*
  %11 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %12 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %13 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %14 = extractvalue %swift.metadata_response %13, 0
  %15 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %14, i8*** undef) #8
  %16 = bitcast %TSn.19* %10 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %16, %swift.opaque* noalias nocapture %11, %swift.opaque* noalias nocapture %12, %swift.type* %14, i8** %15)
  %17 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17)
  %18 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %19 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %20 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %21 = ptrtoint i8* %19 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = sub i64 %21, %22
  %24 = sdiv i64 %23, 1
  %25 = bitcast %swift.type* %Element to i8***
  %26 = getelementptr inbounds i8**, i8*** %25, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %26, align 8, !invariant.load !17, !dereferenceable !18
  %27 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %28 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %27, i32 0, i32 9
  %stride = load i64, i64* %28, align 8, !invariant.load !17
  %29 = icmp eq i64 %stride, 0
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %142, label %32

32:                                               ; preds = %entry
  %33 = icmp eq i64 %24, -9223372036854775808
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = icmp eq i64 %stride, -1
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %152, label %38

38:                                               ; preds = %34
  br label %40

39:                                               ; preds = %32
  br label %40

40:                                               ; preds = %38, %39
  %41 = sdiv i64 %24, %stride
  %42 = srem i64 %24, %stride
  %43 = icmp eq i64 %42, 0
  %44 = xor i1 %43, true
  %45 = icmp slt i64 %41, 0
  %46 = or i1 %44, %45
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  br i1 %47, label %143, label %48

48:                                               ; preds = %40
  %49 = ptrtoint i8* %20 to i64
  %50 = sub i64 %49, %21
  %51 = sdiv i64 %50, 1
  %52 = icmp eq i64 %51, -9223372036854775808
  br i1 %52, label %53, label %58

53:                                               ; preds = %48
  %54 = icmp eq i64 %stride, -1
  %55 = call i1 @llvm.expect.i1(i1 %54, i1 false)
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false)
  br i1 %56, label %151, label %57

57:                                               ; preds = %53
  br label %59

58:                                               ; preds = %48
  br label %59

59:                                               ; preds = %57, %58
  %60 = sdiv i64 %51, %stride
  %61 = srem i64 %51, %stride
  %62 = icmp eq i64 %61, 0
  %63 = xor i1 %62, true
  %64 = icmp slt i64 %60, 0
  %65 = or i1 %63, %64
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  br i1 %66, label %144, label %67

67:                                               ; preds = %59
  %68 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %69 = extractvalue { i64, i1 } %68, 0
  %70 = extractvalue { i64, i1 } %68, 1
  %71 = getelementptr inbounds i8, i8* %1, i64 %69
  %72 = ptrtoint i8* %71 to i64
  %73 = sub i64 %72, %49
  %74 = sdiv i64 %73, 1
  %75 = icmp eq i64 %74, -9223372036854775808
  br i1 %75, label %76, label %81

76:                                               ; preds = %67
  %77 = icmp eq i64 %stride, -1
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false)
  %79 = call i1 @llvm.expect.i1(i1 %78, i1 false)
  br i1 %79, label %150, label %80

80:                                               ; preds = %76
  br label %82

81:                                               ; preds = %67
  br label %82

82:                                               ; preds = %80, %81
  %83 = sdiv i64 %74, %stride
  %84 = srem i64 %74, %stride
  %85 = icmp eq i64 %84, 0
  %86 = xor i1 %85, true
  %87 = icmp slt i64 %83, 0
  %88 = or i1 %86, %87
  %89 = call i1 @llvm.expect.i1(i1 %88, i1 false)
  br i1 %89, label %145, label %90

90:                                               ; preds = %82
  %91 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %92 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %91, i32 0, i32 10
  %flags = load i32, i32* %92, align 8, !invariant.load !17
  %93 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %93, 0
  br i1 %flags.isTriviallyDestroyable, label %94, label %95

94:                                               ; preds = %90
  br label %112

95:                                               ; preds = %90
  %96 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %96, 255
  %97 = add i64 %flags.alignmentMask, 1
  %98 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %97, i64 1)
  %99 = extractvalue { i64, i1 } %98, 0
  %100 = extractvalue { i64, i1 } %98, 1
  %101 = call i1 @llvm.expect.i1(i1 %100, i1 false)
  br i1 %101, label %146, label %102

102:                                              ; preds = %95
  %103 = and i64 %21, %99
  %104 = icmp eq i64 %103, 0
  %105 = xor i1 %104, true
  %106 = and i64 %49, %99
  %107 = icmp eq i64 %106, 0
  %108 = xor i1 %107, true
  %109 = or i1 %105, %108
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false)
  br i1 %110, label %147, label %111

111:                                              ; preds = %102
  br label %112

112:                                              ; preds = %94, %111
  %113 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %113)
  %114 = call swiftcc i8* @"$s10BufferView07MutableaB0V11baseAddress33_16B4EDD70A1B7386F2645A9A4DF693F8LLSvvg"(i8* %1, i64 %2, %swift.type* %Element)
  %115 = ptrtoint i8* %0 to i64
  %116 = sub i64 %115, %22
  %117 = sdiv i64 %116, 1
  %118 = icmp eq i64 %117, -9223372036854775808
  br i1 %118, label %119, label %124

119:                                              ; preds = %112
  %120 = icmp eq i64 %stride, -1
  %121 = call i1 @llvm.expect.i1(i1 %120, i1 false)
  %122 = call i1 @llvm.expect.i1(i1 %121, i1 false)
  br i1 %122, label %149, label %123

123:                                              ; preds = %119
  br label %125

124:                                              ; preds = %112
  br label %125

125:                                              ; preds = %123, %124
  %126 = sdiv i64 %117, %stride
  %127 = srem i64 %117, %stride
  %128 = icmp eq i64 %127, 0
  %129 = xor i1 %128, true
  %130 = call i1 @llvm.expect.i1(i1 %129, i1 false)
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = bitcast %T10BufferView07MutableaB0V* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %132)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %6, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %6, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %133 = bitcast %T10BufferView07MutableaB0V* %6 to %swift.opaque*
  %134 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %135 = extractvalue %swift.metadata_response %134, 0
  %136 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %114, i64 %126, %swift.opaque* noalias nocapture %133, %swift.type* %Element, %swift.type* %135)
  %137 = extractvalue { i8*, i64 } %136, 0
  %138 = extractvalue { i8*, i64 } %136, 1
  %139 = bitcast %T10BufferView07MutableaB0V* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %139)
  %140 = insertvalue { i8*, i64 } undef, i8* %137, 0
  %141 = insertvalue { i8*, i64 } %140, i64 %138, 1
  ret { i8*, i64 } %141

142:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

143:                                              ; preds = %40
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

144:                                              ; preds = %59
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

145:                                              ; preds = %82
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

146:                                              ; preds = %95
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

147:                                              ; preds = %102
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

148:                                              ; preds = %125
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

149:                                              ; preds = %119
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

150:                                              ; preds = %76
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

151:                                              ; preds = %53
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

152:                                              ; preds = %34
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V6suffix4fromACyxGAA0aB5IndexVyxG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %TSn, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferView07MutableaB0V, align 8
  %7 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %0, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %swift.type* %Element to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 9
  %stride = load i64, i64* %12, align 8, !invariant.load !17
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %14 = extractvalue { i64, i1 } %13, 0
  %15 = extractvalue { i64, i1 } %13, 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %14
  %17 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %16, i8** %._rawValue1._rawValue, align 8
  %18 = bitcast %TSn* %3 to %TSn.19*
  %19 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %20 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %21 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %22 = extractvalue %swift.metadata_response %21, 0
  %23 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %22, i8*** undef) #8
  %24 = bitcast %TSn.19* %18 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %24, %swift.opaque* noalias nocapture %19, %swift.opaque* noalias nocapture %20, %swift.type* %22, i8** %23)
  %25 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25)
  %26 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %27 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %28 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %29 = ptrtoint i8* %27 to i64
  %30 = ptrtoint i8* %1 to i64
  %31 = sub i64 %29, %30
  %32 = sdiv i64 %31, 1
  %33 = icmp eq i64 %stride, 0
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false)
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false)
  br i1 %35, label %141, label %36

36:                                               ; preds = %entry
  %37 = icmp eq i64 %32, -9223372036854775808
  br i1 %37, label %38, label %43

38:                                               ; preds = %36
  %39 = icmp eq i64 %stride, -1
  %40 = call i1 @llvm.expect.i1(i1 %39, i1 false)
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %151, label %42

42:                                               ; preds = %38
  br label %44

43:                                               ; preds = %36
  br label %44

44:                                               ; preds = %42, %43
  %45 = sdiv i64 %32, %stride
  %46 = srem i64 %32, %stride
  %47 = icmp eq i64 %46, 0
  %48 = xor i1 %47, true
  %49 = icmp slt i64 %45, 0
  %50 = or i1 %48, %49
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  br i1 %51, label %142, label %52

52:                                               ; preds = %44
  %53 = ptrtoint i8* %28 to i64
  %54 = sub i64 %53, %29
  %55 = sdiv i64 %54, 1
  %56 = icmp eq i64 %55, -9223372036854775808
  br i1 %56, label %57, label %62

57:                                               ; preds = %52
  %58 = icmp eq i64 %stride, -1
  %59 = call i1 @llvm.expect.i1(i1 %58, i1 false)
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false)
  br i1 %60, label %150, label %61

61:                                               ; preds = %57
  br label %63

62:                                               ; preds = %52
  br label %63

63:                                               ; preds = %61, %62
  %64 = sdiv i64 %55, %stride
  %65 = srem i64 %55, %stride
  %66 = icmp eq i64 %65, 0
  %67 = xor i1 %66, true
  %68 = icmp slt i64 %64, 0
  %69 = or i1 %67, %68
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %143, label %71

71:                                               ; preds = %63
  %72 = ptrtoint i8* %16 to i64
  %73 = sub i64 %72, %53
  %74 = sdiv i64 %73, 1
  %75 = icmp eq i64 %74, -9223372036854775808
  br i1 %75, label %76, label %81

76:                                               ; preds = %71
  %77 = icmp eq i64 %stride, -1
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false)
  %79 = call i1 @llvm.expect.i1(i1 %78, i1 false)
  br i1 %79, label %149, label %80

80:                                               ; preds = %76
  br label %82

81:                                               ; preds = %71
  br label %82

82:                                               ; preds = %80, %81
  %83 = sdiv i64 %74, %stride
  %84 = srem i64 %74, %stride
  %85 = icmp eq i64 %84, 0
  %86 = xor i1 %85, true
  %87 = icmp slt i64 %83, 0
  %88 = or i1 %86, %87
  %89 = call i1 @llvm.expect.i1(i1 %88, i1 false)
  br i1 %89, label %144, label %90

90:                                               ; preds = %82
  %91 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %92 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %91, i32 0, i32 10
  %flags = load i32, i32* %92, align 8, !invariant.load !17
  %93 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %93, 0
  br i1 %flags.isTriviallyDestroyable, label %94, label %95

94:                                               ; preds = %90
  br label %112

95:                                               ; preds = %90
  %96 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %96, 255
  %97 = add i64 %flags.alignmentMask, 1
  %98 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %97, i64 1)
  %99 = extractvalue { i64, i1 } %98, 0
  %100 = extractvalue { i64, i1 } %98, 1
  %101 = call i1 @llvm.expect.i1(i1 %100, i1 false)
  br i1 %101, label %145, label %102

102:                                              ; preds = %95
  %103 = and i64 %29, %99
  %104 = icmp eq i64 %103, 0
  %105 = xor i1 %104, true
  %106 = and i64 %53, %99
  %107 = icmp eq i64 %106, 0
  %108 = xor i1 %107, true
  %109 = or i1 %105, %108
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false)
  br i1 %110, label %146, label %111

111:                                              ; preds = %102
  br label %112

112:                                              ; preds = %94, %111
  %113 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %113)
  %114 = ptrtoint i8* %0 to i64
  %115 = sub i64 %72, %114
  %116 = sdiv i64 %115, 1
  %117 = icmp eq i64 %116, -9223372036854775808
  br i1 %117, label %118, label %123

118:                                              ; preds = %112
  %119 = icmp eq i64 %stride, -1
  %120 = call i1 @llvm.expect.i1(i1 %119, i1 false)
  %121 = call i1 @llvm.expect.i1(i1 %120, i1 false)
  br i1 %121, label %148, label %122

122:                                              ; preds = %118
  br label %124

123:                                              ; preds = %112
  br label %124

124:                                              ; preds = %122, %123
  %125 = sdiv i64 %116, %stride
  %126 = srem i64 %116, %stride
  %127 = icmp eq i64 %126, 0
  %128 = xor i1 %127, true
  %129 = call i1 @llvm.expect.i1(i1 %128, i1 false)
  br i1 %129, label %147, label %130

130:                                              ; preds = %124
  %131 = bitcast %T10BufferView07MutableaB0V* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %131)
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %6, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %6, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %132 = bitcast %T10BufferView07MutableaB0V* %6 to %swift.opaque*
  %133 = call swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 0, %swift.type* %Element) #10
  %134 = extractvalue %swift.metadata_response %133, 0
  %135 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %125, %swift.opaque* noalias nocapture %132, %swift.type* %Element, %swift.type* %134)
  %136 = extractvalue { i8*, i64 } %135, 0
  %137 = extractvalue { i8*, i64 } %135, 1
  %138 = bitcast %T10BufferView07MutableaB0V* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %138)
  %139 = insertvalue { i8*, i64 } undef, i8* %136, 0
  %140 = insertvalue { i8*, i64 } %139, i64 %137, 1
  ret { i8*, i64 } %140

141:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

142:                                              ; preds = %44
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

143:                                              ; preds = %63
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

144:                                              ; preds = %82
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

145:                                              ; preds = %95
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

146:                                              ; preds = %102
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

147:                                              ; preds = %124
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

148:                                              ; preds = %118
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

149:                                              ; preds = %76
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

150:                                              ; preds = %57
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

151:                                              ; preds = %38
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferViewAAV5startAA0aB5IndexVyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc i64 @"$s10BufferViewAAV5countSivg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i64 %1
}

define internal swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #19
  %4 = extractvalue { i8*, i64 } %3, 0
  %5 = extractvalue { i8*, i64 } %3, 1
  %6 = bitcast %swift.type* %Owner to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %9 = load i8*, i8** %8, align 8, !invariant.load !17
  %destroy = bitcast i8* %9 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %10 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %11 = insertvalue { i8*, i64 } %10, i64 %5, 1
  ret { i8*, i64 } %11
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV5start5count9dependsOnAByxGAA0aB5IndexVyxG_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = bitcast %swift.type* %Owner to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %6 = load i8*, i8** %5, align 8, !invariant.load !17
  %destroy = bitcast i8* %6 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %7 = icmp slt i64 %1, 0
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false)
  br i1 %8, label %33, label %9

9:                                                ; preds = %entry
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 10
  %flags = load i32, i32* %13, align 8, !invariant.load !17
  %14 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %14, 0
  br i1 %flags.isTriviallyDestroyable, label %29, label %15

15:                                               ; preds = %9
  %16 = ptrtoint i8* %0 to i64
  %17 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %17, 255
  %18 = add i64 %flags.alignmentMask, 1
  %19 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %18, i64 1)
  %20 = extractvalue { i64, i1 } %19, 0
  %21 = extractvalue { i64, i1 } %19, 1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  br i1 %22, label %34, label %23

23:                                               ; preds = %15
  %24 = and i64 %16, %20
  %25 = icmp eq i64 %24, 0
  %26 = xor i1 %25, true
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false)
  br i1 %27, label %35, label %28

28:                                               ; preds = %23
  br label %30

29:                                               ; preds = %9
  br label %30

30:                                               ; preds = %29, %28
  %31 = insertvalue { i8*, i64 } undef, i8* %0, 0
  %32 = insertvalue { i8*, i64 } %31, i64 %1, 1
  ret { i8*, i64 } %32

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %15
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i64, i64 } @"$s10BufferViewAAV06unsafeA7Pointer9dependsOnAByxGSgSRyxG_qd__tclufC"(i64 %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = call swiftcc i64 @"$sSR11baseAddressSPyxGSgvg"(i64 %0, i64 %1, %swift.type* %Element)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %entry
  %6 = inttoptr i64 %3 to i8*
  br label %8

7:                                                ; preds = %entry
  br label %14

8:                                                ; preds = %5
  %9 = phi i8* [ %6, %5 ]
  %10 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %9, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner)
  %11 = extractvalue { i8*, i64 } %10, 0
  %12 = extractvalue { i8*, i64 } %10, 1
  %13 = ptrtoint i8* %11 to i64
  br label %14

14:                                               ; preds = %8, %7
  %15 = phi i64 [ 0, %7 ], [ %13, %8 ]
  %16 = phi i64 [ 0, %7 ], [ %12, %8 ]
  %17 = bitcast %swift.type* %Owner to i8***
  %18 = getelementptr inbounds i8**, i8*** %17, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %18, align 8, !invariant.load !17, !dereferenceable !18
  %19 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %20 = load i8*, i8** %19, align 8, !invariant.load !17
  %destroy = bitcast i8* %20 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %21 = insertvalue { i64, i64 } undef, i64 %15, 0
  %22 = insertvalue { i64, i64 } %21, i64 %16, 1
  ret { i64, i64 } %22
}

define swiftcc { i64, i64 } @"$s10BufferViewAAV09unsafeRawA7Pointer9dependsOnAByxGSgSW_qd__tclufC"(i64 %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %bitcast = alloca i64, align 8
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 10
  %flags = load i32, i32* %6, align 8, !invariant.load !17
  %7 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %7, 0
  br i1 %flags.isTriviallyDestroyable, label %8, label %49

8:                                                ; preds = %entry
  %9 = icmp eq i64 %0, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = inttoptr i64 %0 to i8*
  br label %13

12:                                               ; preds = %8
  br label %54

13:                                               ; preds = %10
  %14 = phi i8* [ %11, %10 ]
  %15 = inttoptr i64 %0 to i8*
  %16 = inttoptr i64 %1 to i8*
  %17 = ptrtoint i8* %16 to i64
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %17, %18
  %20 = sdiv i64 %19, 1
  %21 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %22 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %21, i32 0, i32 9
  %stride = load i64, i64* %22, align 8, !invariant.load !17
  %23 = icmp eq i64 %stride, 0
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %63, label %26

26:                                               ; preds = %13
  %27 = icmp eq i64 %20, -9223372036854775808
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = icmp eq i64 %stride, -1
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %66, label %32

32:                                               ; preds = %28
  br label %34

33:                                               ; preds = %26
  br label %34

34:                                               ; preds = %32, %33
  %35 = phi i1 [ false, %33 ], [ %29, %32 ]
  %36 = sdiv i64 %20, %stride
  %37 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false)
  br i1 %38, label %64, label %39

39:                                               ; preds = %34
  %40 = srem i64 %20, %stride
  %41 = icmp eq i64 %40, 0
  %42 = xor i1 %41, true
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %65, label %44

44:                                               ; preds = %39
  %45 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %14, i64 %36, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner)
  %46 = extractvalue { i8*, i64 } %45, 0
  %47 = extractvalue { i8*, i64 } %45, 1
  %48 = ptrtoint i8* %46 to i64
  br label %54

49:                                               ; preds = %entry
  %50 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %50)
  store i64 -2305843009213693952, i64* %bitcast, align 8
  %51 = bitcast i64* %bitcast to %swift.bridge**
  %52 = load %swift.bridge*, %swift.bridge** %51, align 8
  %53 = bitcast i64* %bitcast to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53)
  call swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64 ptrtoint ([12 x i8]* @".str.11.Fatal error" to i64), i64 11, i8 2, i64 0, %swift.bridge* %52, i64 ptrtoint ([28 x i8]* @".str.27.BufferView/BufferView.swift" to i64), i64 27, i8 2, i64 62, i32 0)
  unreachable

54:                                               ; preds = %44, %12
  %55 = phi i64 [ 0, %12 ], [ %48, %44 ]
  %56 = phi i64 [ 0, %12 ], [ %47, %44 ]
  %57 = bitcast %swift.type* %Owner to i8***
  %58 = getelementptr inbounds i8**, i8*** %57, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %58, align 8, !invariant.load !17, !dereferenceable !18
  %59 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 1
  %60 = load i8*, i8** %59, align 8, !invariant.load !17
  %destroy = bitcast i8* %60 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %2, %swift.type* %Owner) #9
  %61 = insertvalue { i64, i64 } undef, i64 %55, 0
  %62 = insertvalue { i64, i64 } %61, i64 %56, 1
  ret { i64, i64 } %62

63:                                               ; preds = %13
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

64:                                               ; preds = %34
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

65:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

66:                                               ; preds = %28
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i8* } @"$s10BufferViewAAV12makeIteratorAA0abD0VyxGyF"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  %10 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %11 = extractvalue %swift.metadata_response %10, 0
  %12 = call swiftcc { i8*, i8* } @"$s10BufferView0aB8IteratorV4from2to9dependsOnACyxGAA0aB5IndexVyxG_AJqd__tclufCTf4nndd_n"(i8* %0, i8* %9, %swift.type* %Element, %swift.type* %11)
  %13 = extractvalue { i8*, i8* } %12, 0
  %14 = extractvalue { i8*, i8* } %12, 1
  %15 = insertvalue { i8*, i8* } undef, i8* %13, 0
  %16 = insertvalue { i8*, i8* } %15, i8* %14, 1
  ret { i8*, i8* } %16
}

define swiftcc i8* @"$s10BufferViewAAV8endIndexAA0abD0VyxGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  ret i8* %9
}

define internal swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFqd__SPyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, %swift.opaque* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = call swiftcc { i64, i64 } @"$sSR5start5countSRyxGSPyxGSg_SitcfC"(i64 %7, i64 %4, %swift.type* %Element)
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = bitcast i8* %2 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %12 = bitcast %swift.opaque* %3 to %swift.refcounted*
  call swiftcc void %11(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %9, i64 %10, %swift.refcounted* swiftself %12, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %13 = load %swift.error*, %swift.error** %6, align 8
  %14 = icmp ne %swift.error* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %entry
  ret void

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %13, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %17, %swift.error** %6, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSTAAST12makeIterator0D0QzyFTW"(%T10BufferView0aB8IteratorV* noalias nocapture sret(%T10BufferView0aB8IteratorV) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %3 = load i64, i64* %.count._value, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = call swiftcc { i8*, i8* } @"$s10BufferViewAAV12makeIteratorAA0abD0VyxGyF"(i8* %2, i64 %3, %swift.type* %"\CF\84_0_0") #19
  %7 = extractvalue { i8*, i8* } %6, 0
  %8 = extractvalue { i8*, i8* } %6, 1
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  store i8* %7, i8** %.curPointer._rawValue, align 8
  %.endPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 1
  %.endPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.endPointer, i32 0, i32 0
  store i8* %8, i8** %.endPointer._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSTAAST19underestimatedCountSivgTW"(%T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %1 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %2 = bitcast %T10BufferViewAAV* %0 to %swift.opaque*
  %3 = call swiftcc i64 @"$sSlsE19underestimatedCountSivg"(%swift.type* %Self, i8** %1, %swift.opaque* noalias nocapture swiftself %2) #19
  ret i64 %3
}

define linkonce_odr hidden swiftcc i8 @"$s10BufferViewAAVyxGSTAAST31_customContainsEquatableElementySbSg0F0QzFTW"(%swift.opaque* noalias nocapture %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  ret i8 2
}

define linkonce_odr hidden swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$s10BufferViewAAVyxGSTAAST22_copyToContiguousArrays0eF0Vy7ElementQzGyFTW"(%T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %1 = alloca %T10BufferViewAAV, align 8
  %2 = bitcast %T10BufferViewAAV* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %4 = load i64, i64* %.count._value, align 8
  %.start1 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %4, i64* %.count2._value, align 8
  %5 = bitcast %T10BufferViewAAV* %1 to %swift.opaque*
  %6 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %7 = call swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$sSlsE22_copyToContiguousArrays0cD0Vy7ElementQzGyFTf4g_n"(%swift.opaque* noalias nocapture %5, %swift.type* %Self, i8** %6) #19
  %8 = bitcast %T10BufferViewAAV* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8)
  ret %Ts28__ContiguousArrayStorageBaseC* %7
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSTAAST13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tFTW"(%T10BufferView0aB8IteratorV* noalias nocapture %0, i64 %1, i64 %2, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %4 = alloca %T10BufferViewAAV, align 8
  %5 = bitcast %T10BufferViewAAV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %7 = load i64, i64* %.count._value, align 8
  %.start1 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %4, i32 0, i32 0
  %.start1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start1, i32 0, i32 0
  %.start1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start1._rawValue, i32 0, i32 0
  store i8* %6, i8** %.start1._rawValue._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %4, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %7, i64* %.count2._value, align 8
  %8 = bitcast %T10BufferView0aB8IteratorV* %0 to %swift.opaque*
  %9 = bitcast %T10BufferViewAAV* %4 to %swift.opaque*
  %10 = call swiftcc i64 @"$sSTsE13_copyContents12initializing8IteratorQz_SitSry7ElementQzG_tF"(%swift.opaque* noalias nocapture %8, i64 %1, i64 %2, %swift.type* %Self, i8** %SelfWitnessTable, %swift.opaque* noalias nocapture swiftself %9) #19
  %11 = bitcast %T10BufferViewAAV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11)
  ret i64 %10
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSTAAST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTW"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, %swift.type* %"\CF\84_1_0", %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %swift.opaque* %0 to %TSq.16*
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %7 = load i64, i64* %.count._value, align 8
  %8 = bitcast %swift.type* %Self to %swift.type**
  %9 = getelementptr inbounds %swift.type*, %swift.type** %8, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %9, align 8, !invariant.load !17
  %10 = bitcast %TSq.16* %5 to %swift.opaque*
  call swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %10, i8* %1, %swift.opaque* %2, i8* %6, i64 %7, %swift.type* %"\CF\84_0_0", %swift.type* %"\CF\84_1_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #19
  %11 = load %swift.error*, %swift.error** %4, align 8
  %12 = icmp ne %swift.error* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  ret void

14:                                               ; preds = %entry
  %15 = phi %swift.error* [ %11, %entry ]
  store %swift.error* null, %swift.error** %4, align 8
  store %swift.error* %15, %swift.error** %4, align 8
  ret void
}

declare swiftcc i1 @"$sSxsE2eeoiySbx_xtFZ"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.type* swiftself) #0

declare swiftcc void @"$ss3zipys12Zip2SequenceVyxq_Gx_q_tSTRzSTR_r0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, %swift.type*, i8**, i8**) #0

declare swiftcc void @"$ss12Zip2SequenceV12makeIteratorAB0D0Vyxq__GyF"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.type*, %Ts12Zip2SequenceV.34* noalias nocapture swiftself) #0

declare swiftcc void @"$ss12Zip2SequenceV8IteratorV4next7ElementQz_AFQy_tSgyF"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.type*, %Ts12Zip2SequenceV8IteratorV.35* nocapture swiftself) #0

define swiftcc { i8*, i8* } @"$s10BufferViewAAV7indicesSnyAA0aB5IndexVyxGGvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = alloca %TSn, align 8
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5)
  %6 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %0, i8** %._rawValue._rawValue, align 8
  %7 = bitcast %swift.type* %Element to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %0, i64 %12
  %15 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  %16 = bitcast %TSn* %2 to %TSn.19*
  %17 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %18 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %19 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %20 = extractvalue %swift.metadata_response %19, 0
  %21 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %20, i8*** undef) #8
  %22 = bitcast %TSn.19* %16 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %22, %swift.opaque* noalias nocapture %17, %swift.opaque* noalias nocapture %18, %swift.type* %20, i8** %21)
  %23 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23)
  %24 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %25 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %26 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %27 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %27)
  %28 = insertvalue { i8*, i8* } undef, i8* %25, 0
  %29 = insertvalue { i8*, i8* } %28, i8* %26, 1
  ret { i8*, i8* } %29
}

define swiftcc i1 @"$s10BufferViewAAV7isEmptySbvg"(i8* %0, i64 %1, %swift.type* %Element) #0 {
entry:
  %2 = icmp eq i64 %1, 0
  ret i1 %2
}

define swiftcc void @"$s10BufferViewAAV12_checkBoundsyyAA0aB5IndexVyxGF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %8 = extractvalue %swift.metadata_response %7, 0
  %9 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %0, i8** %._rawValue._rawValue, align 8
  %10 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %1, i8** %._rawValue1._rawValue, align 8
  %11 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %12 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %13 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %8, i8*** undef) #8
  %14 = call swiftcc i1 @"$sSLsE2geoiySbx_xtFZ"(%swift.opaque* noalias nocapture %11, %swift.opaque* noalias nocapture %12, %swift.type* %8, i8** %13, %swift.type* swiftself %8)
  %15 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15)
  %16 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16)
  %17 = xor i1 %14, true
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %57, label %19

19:                                               ; preds = %entry
  %20 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %0, i8** %._rawValue2._rawValue, align 8
  %21 = bitcast %swift.type* %Element to i8***
  %22 = getelementptr inbounds i8**, i8*** %21, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %22, align 8, !invariant.load !17, !dereferenceable !18
  %23 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %24 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %23, i32 0, i32 9
  %stride = load i64, i64* %24, align 8, !invariant.load !17
  %25 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  %28 = getelementptr inbounds i8, i8* %1, i64 %26
  %29 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29)
  %._rawValue3 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue3._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue3, i32 0, i32 0
  store i8* %28, i8** %._rawValue3._rawValue, align 8
  %30 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %31 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %32 = call swiftcc i1 @"$sSLsE2leoiySbx_xtFZ"(%swift.opaque* noalias nocapture %30, %swift.opaque* noalias nocapture %31, %swift.type* %8, i8** %13, %swift.type* swiftself %8)
  %33 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33)
  %34 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34)
  %35 = xor i1 %32, true
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  br i1 %36, label %58, label %37

37:                                               ; preds = %19
  %38 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %39 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %38, i32 0, i32 10
  %flags = load i32, i32* %39, align 8, !invariant.load !17
  %40 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %40, 0
  br i1 %flags.isTriviallyDestroyable, label %55, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i8* %0 to i64
  %43 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %43, 255
  %44 = add i64 %flags.alignmentMask, 1
  %45 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %44, i64 1)
  %46 = extractvalue { i64, i1 } %45, 0
  %47 = extractvalue { i64, i1 } %45, 1
  %48 = call i1 @llvm.expect.i1(i1 %47, i1 false)
  br i1 %48, label %59, label %49

49:                                               ; preds = %41
  %50 = and i64 %42, %46
  %51 = icmp eq i64 %50, 0
  %52 = xor i1 %51, true
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false)
  br i1 %53, label %60, label %54

54:                                               ; preds = %49
  br label %56

55:                                               ; preds = %37
  br label %56

56:                                               ; preds = %55, %54
  ret void

57:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

58:                                               ; preds = %19
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

59:                                               ; preds = %41
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

60:                                               ; preds = %49
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i1 @"$sSLsE2geoiySbx_xtFZ"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.type* swiftself) #0

declare swiftcc i1 @"$sSLsE2leoiySbx_xtFZ"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.type* swiftself) #0

define swiftcc void @"$s10BufferViewAAV12_checkBoundsyySnyAA0aB5IndexVyxGGF"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 10
  %flags = load i32, i32* %7, align 8, !invariant.load !17
  %8 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %8, 0
  br i1 %flags.isTriviallyDestroyable, label %9, label %35

9:                                                ; preds = %entry
  %10 = ptrtoint i8* %0 to i64
  %11 = ptrtoint i8* %2 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv i64 %12, 1
  %14 = icmp slt i64 %13, 0
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %130, label %16

16:                                               ; preds = %9
  %17 = ptrtoint i8* %1 to i64
  %18 = sub i64 %17, %10
  %19 = sdiv i64 %18, 1
  %20 = icmp slt i64 %19, 0
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %131, label %22

22:                                               ; preds = %16
  %23 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %24 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %23, i32 0, i32 9
  %stride1 = load i64, i64* %24, align 8, !invariant.load !17
  %25 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride1)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  %28 = getelementptr inbounds i8, i8* %2, i64 %26
  %29 = ptrtoint i8* %28 to i64
  %30 = sub i64 %29, %17
  %31 = sdiv i64 %30, 1
  %32 = icmp slt i64 %31, 0
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %132, label %34

34:                                               ; preds = %22
  br label %120

35:                                               ; preds = %entry
  %36 = ptrtoint i8* %0 to i64
  %37 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %37, 255
  %38 = add i64 %flags.alignmentMask, 1
  %39 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %38, i64 1)
  %40 = extractvalue { i64, i1 } %39, 0
  %41 = extractvalue { i64, i1 } %39, 1
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  br i1 %42, label %121, label %43

43:                                               ; preds = %35
  %44 = and i64 %36, %40
  %45 = icmp eq i64 %44, 0
  %46 = xor i1 %45, true
  %47 = ptrtoint i8* %1 to i64
  %48 = and i64 %47, %40
  %49 = icmp eq i64 %48, 0
  %50 = xor i1 %49, true
  %51 = or i1 %46, %50
  %52 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  br i1 %52, label %122, label %53

53:                                               ; preds = %43
  %54 = ptrtoint i8* %2 to i64
  %55 = sub i64 %36, %54
  %56 = sdiv i64 %55, 1
  %57 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %58 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %57, i32 0, i32 9
  %stride = load i64, i64* %58, align 8, !invariant.load !17
  %59 = icmp eq i64 %stride, 0
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false)
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  br i1 %61, label %123, label %62

62:                                               ; preds = %53
  %63 = icmp eq i64 %56, -9223372036854775808
  br i1 %63, label %64, label %69

64:                                               ; preds = %62
  %65 = icmp eq i64 %stride, -1
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  %67 = call i1 @llvm.expect.i1(i1 %66, i1 false)
  br i1 %67, label %129, label %68

68:                                               ; preds = %64
  br label %70

69:                                               ; preds = %62
  br label %70

70:                                               ; preds = %68, %69
  %71 = sdiv i64 %56, %stride
  %72 = srem i64 %56, %stride
  %73 = icmp eq i64 %72, 0
  %74 = xor i1 %73, true
  %75 = icmp slt i64 %71, 0
  %76 = or i1 %74, %75
  %77 = call i1 @llvm.expect.i1(i1 %76, i1 false)
  br i1 %77, label %124, label %78

78:                                               ; preds = %70
  %79 = sub i64 %47, %36
  %80 = sdiv i64 %79, 1
  %81 = icmp eq i64 %80, -9223372036854775808
  br i1 %81, label %82, label %87

82:                                               ; preds = %78
  %83 = icmp eq i64 %stride, -1
  %84 = call i1 @llvm.expect.i1(i1 %83, i1 false)
  %85 = call i1 @llvm.expect.i1(i1 %84, i1 false)
  br i1 %85, label %128, label %86

86:                                               ; preds = %82
  br label %88

87:                                               ; preds = %78
  br label %88

88:                                               ; preds = %86, %87
  %89 = sdiv i64 %80, %stride
  %90 = srem i64 %80, %stride
  %91 = icmp eq i64 %90, 0
  %92 = xor i1 %91, true
  %93 = icmp slt i64 %89, 0
  %94 = or i1 %92, %93
  %95 = call i1 @llvm.expect.i1(i1 %94, i1 false)
  br i1 %95, label %125, label %96

96:                                               ; preds = %88
  %97 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %98 = extractvalue { i64, i1 } %97, 0
  %99 = extractvalue { i64, i1 } %97, 1
  %100 = getelementptr inbounds i8, i8* %2, i64 %98
  %101 = ptrtoint i8* %100 to i64
  %102 = sub i64 %101, %47
  %103 = sdiv i64 %102, 1
  %104 = icmp eq i64 %103, -9223372036854775808
  br i1 %104, label %105, label %110

105:                                              ; preds = %96
  %106 = icmp eq i64 %stride, -1
  %107 = call i1 @llvm.expect.i1(i1 %106, i1 false)
  %108 = call i1 @llvm.expect.i1(i1 %107, i1 false)
  br i1 %108, label %127, label %109

109:                                              ; preds = %105
  br label %111

110:                                              ; preds = %96
  br label %111

111:                                              ; preds = %109, %110
  %112 = sdiv i64 %103, %stride
  %113 = srem i64 %103, %stride
  %114 = icmp eq i64 %113, 0
  %115 = xor i1 %114, true
  %116 = icmp slt i64 %112, 0
  %117 = or i1 %115, %116
  %118 = call i1 @llvm.expect.i1(i1 %117, i1 false)
  br i1 %118, label %126, label %119

119:                                              ; preds = %111
  br label %120

120:                                              ; preds = %34, %119
  ret void

121:                                              ; preds = %35
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

122:                                              ; preds = %43
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

123:                                              ; preds = %53
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

124:                                              ; preds = %70
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

125:                                              ; preds = %88
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

126:                                              ; preds = %111
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

127:                                              ; preds = %105
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

128:                                              ; preds = %82
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

129:                                              ; preds = %64
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

130:                                              ; preds = %9
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

131:                                              ; preds = %16
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

132:                                              ; preds = %22
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferViewAAV8distance4from2toSiAA0aB5IndexVyxG_AHtF"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv i64 %6, 1
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = icmp eq i64 %stride, 0
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %30, label %15

15:                                               ; preds = %entry
  %16 = icmp eq i64 %7, -9223372036854775808
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = icmp eq i64 %stride, -1
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  br label %23

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %21, %22
  %24 = sdiv i64 %7, %stride
  %25 = srem i64 %7, %stride
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  ret i64 %24

30:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

31:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

32:                                               ; preds = %17
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferViewAAV5index5afterAA0aB5IndexVyxGAG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 9
  %stride = load i64, i64* %6, align 8, !invariant.load !17
  %7 = getelementptr inbounds i8, i8* %0, i64 %stride
  ret i8* %7
}

define swiftcc i8* @"$s10BufferViewAAV5index6beforeAA0aB5IndexVyxGAG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = bitcast %swift.type* %Element to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 9
  %stride = load i64, i64* %6, align 8, !invariant.load !17
  %7 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %8 = extractvalue { i64, i1 } %7, 0
  %9 = extractvalue { i64, i1 } %7, 1
  %10 = getelementptr inbounds i8, i8* %0, i64 %8
  ret i8* %10
}

define swiftcc void @"$s10BufferViewAAV9formIndex5afteryAA0abD0VyxGz_tF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = getelementptr inbounds i8, i8* %3, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %8, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc void @"$s10BufferViewAAV9formIndex6beforeyAA0abD0VyxGz_tF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %3, i64 %9
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %11, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc i8* @"$s10BufferViewAAV5index_8offsetByAA0aB5IndexVyxGAG_SitF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %0, i64 %9
  ret i8* %11
}

define swiftcc void @"$s10BufferViewAAV9formIndex_8offsetByyAA0abD0VyxGz_SitF"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Element to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = getelementptr inbounds i8, i8* %4, i64 %10
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %12, i8** %._rawValue1._rawValue, align 8
  ret void
}

define swiftcc void @"$s10BufferViewAAVyxAA0aB5IndexVyxGcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = alloca %T10BufferView0aB5IndexV, align 8
  %8 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %9 = extractvalue %swift.metadata_response %8, 0
  %10 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %1, i8** %._rawValue._rawValue, align 8
  %11 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %2, i8** %._rawValue1._rawValue, align 8
  %12 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %13 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %14 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %9, i8*** undef) #8
  %15 = call swiftcc i1 @"$sSLsE2geoiySbx_xtFZ"(%swift.opaque* noalias nocapture %12, %swift.opaque* noalias nocapture %13, %swift.type* %9, i8** %14, %swift.type* swiftself %9)
  %16 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16)
  %17 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17)
  %18 = xor i1 %15, true
  %19 = call i1 @llvm.expect.i1(i1 %18, i1 false)
  br i1 %19, label %58, label %20

20:                                               ; preds = %entry
  %21 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %1, i8** %._rawValue2._rawValue, align 8
  %22 = bitcast %swift.type* %Element to i8***
  %23 = getelementptr inbounds i8**, i8*** %22, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %23, align 8, !invariant.load !17, !dereferenceable !18
  %24 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %25 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %24, i32 0, i32 9
  %stride = load i64, i64* %25, align 8, !invariant.load !17
  %26 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %27 = extractvalue { i64, i1 } %26, 0
  %28 = extractvalue { i64, i1 } %26, 1
  %29 = getelementptr inbounds i8, i8* %2, i64 %27
  %30 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30)
  %._rawValue3 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %7, i32 0, i32 0
  %._rawValue3._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue3, i32 0, i32 0
  store i8* %29, i8** %._rawValue3._rawValue, align 8
  %31 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %32 = bitcast %T10BufferView0aB5IndexV* %7 to %swift.opaque*
  %33 = call swiftcc i1 @"$sSLsE2leoiySbx_xtFZ"(%swift.opaque* noalias nocapture %31, %swift.opaque* noalias nocapture %32, %swift.type* %9, i8** %14, %swift.type* swiftself %9)
  %34 = bitcast %T10BufferView0aB5IndexV* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34)
  %35 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35)
  %36 = xor i1 %33, true
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %59, label %38

38:                                               ; preds = %20
  %39 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %40 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %39, i32 0, i32 10
  %flags = load i32, i32* %40, align 8, !invariant.load !17
  %41 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %41, 0
  br i1 %flags.isTriviallyDestroyable, label %56, label %42

42:                                               ; preds = %38
  %43 = ptrtoint i8* %1 to i64
  %44 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %44, 255
  %45 = add i64 %flags.alignmentMask, 1
  %46 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %45, i64 1)
  %47 = extractvalue { i64, i1 } %46, 0
  %48 = extractvalue { i64, i1 } %46, 1
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false)
  br i1 %49, label %60, label %50

50:                                               ; preds = %42
  %51 = and i64 %43, %47
  %52 = icmp eq i64 %51, 0
  %53 = xor i1 %52, true
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %61, label %55

55:                                               ; preds = %50
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %57

56:                                               ; preds = %38
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %57

57:                                               ; preds = %56, %55
  ret void

58:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

59:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

60:                                               ; preds = %42
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

61:                                               ; preds = %50
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferViewAAV9uncheckedxAA0aB5IndexVyxG_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 10
  %flags = load i32, i32* %7, align 8, !invariant.load !17
  %8 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %8, 0
  br i1 %flags.isTriviallyDestroyable, label %9, label %10

9:                                                ; preds = %entry
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %11

10:                                               ; preds = %entry
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %1, %swift.type* %Element)
  br label %11

11:                                               ; preds = %9, %10
  ret void
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAVyAByxGSnyAA0aB5IndexVyxGGcig"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %5 = alloca %T10BufferViewAAV, align 8
  %6 = bitcast %swift.type* %Element to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 10
  %flags = load i32, i32* %9, align 8, !invariant.load !17
  %10 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %10, 0
  br i1 %flags.isTriviallyDestroyable, label %40, label %11

11:                                               ; preds = %entry
  %12 = ptrtoint i8* %0 to i64
  %13 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %13, 255
  %14 = add i64 %flags.alignmentMask, 1
  %15 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %14, i64 1)
  %16 = extractvalue { i64, i1 } %15, 0
  %17 = extractvalue { i64, i1 } %15, 1
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %149, label %19

19:                                               ; preds = %11
  %20 = and i64 %12, %16
  %21 = icmp eq i64 %20, 0
  %22 = xor i1 %21, true
  %23 = ptrtoint i8* %1 to i64
  %24 = and i64 %23, %16
  %25 = icmp eq i64 %24, 0
  %26 = xor i1 %25, true
  %27 = or i1 %22, %26
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  br i1 %28, label %150, label %29

29:                                               ; preds = %19
  %30 = ptrtoint i8* %2 to i64
  %31 = sub i64 %12, %30
  %32 = sdiv i64 %31, 1
  %33 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %34 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %33, i32 0, i32 9
  %stride = load i64, i64* %34, align 8, !invariant.load !17
  %35 = icmp eq i64 %stride, 0
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %151, label %38

38:                                               ; preds = %29
  %39 = icmp eq i64 %32, -9223372036854775808
  br i1 %39, label %93, label %98

40:                                               ; preds = %entry
  %41 = ptrtoint i8* %0 to i64
  %42 = ptrtoint i8* %2 to i64
  %43 = sub i64 %41, %42
  %44 = sdiv i64 %43, 1
  %45 = icmp slt i64 %44, 0
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  br i1 %46, label %158, label %47

47:                                               ; preds = %40
  %48 = ptrtoint i8* %1 to i64
  %49 = sub i64 %48, %41
  %50 = sdiv i64 %49, 1
  %51 = icmp slt i64 %50, 0
  %52 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  br i1 %52, label %159, label %53

53:                                               ; preds = %47
  %54 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %55 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %54, i32 0, i32 9
  %stride1 = load i64, i64* %55, align 8, !invariant.load !17
  %56 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride1)
  %57 = extractvalue { i64, i1 } %56, 0
  %58 = extractvalue { i64, i1 } %56, 1
  %59 = getelementptr inbounds i8, i8* %2, i64 %57
  %60 = ptrtoint i8* %59 to i64
  %61 = sub i64 %60, %48
  %62 = sdiv i64 %61, 1
  %63 = icmp slt i64 %62, 0
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false)
  br i1 %64, label %160, label %65

65:                                               ; preds = %53
  br label %66

66:                                               ; preds = %65, %148
  %67 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %67)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %0, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.upperBound._rawValue._rawValue, align 8
  %68 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %69 = extractvalue %swift.metadata_response %68, 0
  %70 = extractvalue %swift.metadata_response %68, 1
  %71 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %69, i8*** undef) #8
  %72 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %69, i8** %71) #10
  %73 = extractvalue %swift.metadata_response %72, 0
  %74 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %69, i8*** undef) #8
  %75 = call i8** @"$sS2iSZsWl"() #10
  %76 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %77 = getelementptr inbounds i8**, i8*** %76, i32 0
  store i8** %74, i8*** %77, align 8
  %78 = getelementptr inbounds i8**, i8*** %76, i32 1
  store i8** %75, i8*** %78, align 8
  %79 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %73, i8*** %76) #8
  %80 = bitcast %TSn* %4 to %swift.opaque*
  %81 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %73, i8** %79, %swift.opaque* noalias nocapture swiftself %80)
  %82 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %82)
  %83 = bitcast %T10BufferViewAAV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %83)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %5, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %2, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %84 = bitcast %T10BufferViewAAV* %5 to %swift.opaque*
  %85 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %86 = extractvalue %swift.metadata_response %85, 0
  %87 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %81, %swift.opaque* noalias nocapture %84, %swift.type* %Element, %swift.type* %86)
  %88 = extractvalue { i8*, i64 } %87, 0
  %89 = extractvalue { i8*, i64 } %87, 1
  %90 = bitcast %T10BufferViewAAV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %90)
  %91 = insertvalue { i8*, i64 } undef, i8* %88, 0
  %92 = insertvalue { i8*, i64 } %91, i64 %89, 1
  ret { i8*, i64 } %92

93:                                               ; preds = %38
  %94 = icmp eq i64 %stride, -1
  %95 = call i1 @llvm.expect.i1(i1 %94, i1 false)
  %96 = call i1 @llvm.expect.i1(i1 %95, i1 false)
  br i1 %96, label %157, label %97

97:                                               ; preds = %93
  br label %99

98:                                               ; preds = %38
  br label %99

99:                                               ; preds = %97, %98
  %100 = sdiv i64 %32, %stride
  %101 = srem i64 %32, %stride
  %102 = icmp eq i64 %101, 0
  %103 = xor i1 %102, true
  %104 = icmp slt i64 %100, 0
  %105 = or i1 %103, %104
  %106 = call i1 @llvm.expect.i1(i1 %105, i1 false)
  br i1 %106, label %152, label %107

107:                                              ; preds = %99
  %108 = sub i64 %23, %12
  %109 = sdiv i64 %108, 1
  %110 = icmp eq i64 %109, -9223372036854775808
  br i1 %110, label %111, label %116

111:                                              ; preds = %107
  %112 = icmp eq i64 %stride, -1
  %113 = call i1 @llvm.expect.i1(i1 %112, i1 false)
  %114 = call i1 @llvm.expect.i1(i1 %113, i1 false)
  br i1 %114, label %156, label %115

115:                                              ; preds = %111
  br label %117

116:                                              ; preds = %107
  br label %117

117:                                              ; preds = %115, %116
  %118 = sdiv i64 %109, %stride
  %119 = srem i64 %109, %stride
  %120 = icmp eq i64 %119, 0
  %121 = xor i1 %120, true
  %122 = icmp slt i64 %118, 0
  %123 = or i1 %121, %122
  %124 = call i1 @llvm.expect.i1(i1 %123, i1 false)
  br i1 %124, label %153, label %125

125:                                              ; preds = %117
  %126 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %127 = extractvalue { i64, i1 } %126, 0
  %128 = extractvalue { i64, i1 } %126, 1
  %129 = getelementptr inbounds i8, i8* %2, i64 %127
  %130 = ptrtoint i8* %129 to i64
  %131 = sub i64 %130, %23
  %132 = sdiv i64 %131, 1
  %133 = icmp eq i64 %132, -9223372036854775808
  br i1 %133, label %134, label %139

134:                                              ; preds = %125
  %135 = icmp eq i64 %stride, -1
  %136 = call i1 @llvm.expect.i1(i1 %135, i1 false)
  %137 = call i1 @llvm.expect.i1(i1 %136, i1 false)
  br i1 %137, label %155, label %138

138:                                              ; preds = %134
  br label %140

139:                                              ; preds = %125
  br label %140

140:                                              ; preds = %138, %139
  %141 = sdiv i64 %132, %stride
  %142 = srem i64 %132, %stride
  %143 = icmp eq i64 %142, 0
  %144 = xor i1 %143, true
  %145 = icmp slt i64 %141, 0
  %146 = or i1 %144, %145
  %147 = call i1 @llvm.expect.i1(i1 %146, i1 false)
  br i1 %147, label %154, label %148

148:                                              ; preds = %140
  br label %66

149:                                              ; preds = %11
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

150:                                              ; preds = %19
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

151:                                              ; preds = %29
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

152:                                              ; preds = %99
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

153:                                              ; preds = %117
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

154:                                              ; preds = %140
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

155:                                              ; preds = %134
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

156:                                              ; preds = %111
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

157:                                              ; preds = %93
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

158:                                              ; preds = %40
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

159:                                              ; preds = %47
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

160:                                              ; preds = %53
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV9uncheckedAByxGSnyAA0aB5IndexVyxGG_tcig"(i8* %0, i8* %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %5 = alloca %T10BufferViewAAV, align 8
  %6 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  store i8* %0, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %4, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  store i8* %1, i8** %.upperBound._rawValue._rawValue, align 8
  %7 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %Element) #10
  %8 = extractvalue %swift.metadata_response %7, 0
  %9 = extractvalue %swift.metadata_response %7, 1
  %10 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %8, i8*** undef) #8
  %11 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %8, i8** %10) #10
  %12 = extractvalue %swift.metadata_response %11, 0
  %13 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %8, i8*** undef) #8
  %14 = call i8** @"$sS2iSZsWl"() #10
  %15 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %16 = getelementptr inbounds i8**, i8*** %15, i32 0
  store i8** %13, i8*** %16, align 8
  %17 = getelementptr inbounds i8**, i8*** %15, i32 1
  store i8** %14, i8*** %17, align 8
  %18 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %12, i8*** %15) #8
  %19 = bitcast %TSn* %4 to %swift.opaque*
  %20 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %12, i8** %18, %swift.opaque* noalias nocapture swiftself %19)
  %21 = bitcast %TSn* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21)
  %22 = bitcast %T10BufferViewAAV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %5, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %2, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %23 = bitcast %T10BufferViewAAV* %5 to %swift.opaque*
  %24 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %25 = extractvalue %swift.metadata_response %24, 0
  %26 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %20, %swift.opaque* noalias nocapture %23, %swift.type* %Element, %swift.type* %25)
  %27 = extractvalue { i8*, i64 } %26, 0
  %28 = extractvalue { i8*, i64 } %26, 1
  %29 = bitcast %T10BufferViewAAV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29)
  %30 = insertvalue { i8*, i64 } undef, i8* %27, 0
  %31 = insertvalue { i8*, i64 } %30, i64 %28, 1
  ret { i8*, i64 } %31
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl10startIndex0D0QzvgTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %2, i8** %._rawValue._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl8endIndex0D0QzvgTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %3 = load i64, i64* %.count._value, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = getelementptr inbounds i8, i8* %2, i64 %11
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %13, i8** %._rawValue._rawValue, align 8
  ret void
}

; Function Attrs: noinline
define linkonce_odr hidden swiftcc { i8*, %swift.opaque* } @"$s10BufferViewAAVyxGSlAASly7ElementQz5IndexQzcirTW"(i8* noalias dereferenceable(32) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #1 {
entry:
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferView0aB5IndexV, align 8
  %7 = call token @llvm.coro.id.retcon.once(i32 32, i32 8, i8* %0, i8* bitcast (void (i8*, i1)* @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGA2AVyxGxIsetWAnnYn_TC" to i8*), i8* bitcast (i8* (i64)* @malloc to i8*), i8* bitcast (void (i8*)* @free to i8*))
  %8 = call i8* @llvm.coro.begin(token %7, i8* null)
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 8
  %size = load i64, i64* %14, align 8, !invariant.load !17
  %15 = call token @llvm.coro.alloca.alloc.i64(i64 %size, i32 16)
  %16 = call i8* @llvm.coro.alloca.get(token %15)
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %16)
  %17 = bitcast i8* %16 to %swift.opaque*
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %18 = load i8*, i8** %._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %19 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %20 = load i64, i64* %.count._value, align 8
  %21 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %"\CF\84_0_0") #10
  %22 = extractvalue %swift.metadata_response %21, 0
  %23 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %18, i8** %._rawValue1._rawValue, align 8
  %24 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24)
  %._rawValue2 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue2._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue2, i32 0, i32 0
  store i8* %19, i8** %._rawValue2._rawValue, align 8
  %25 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %26 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %27 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %22, i8*** undef) #8
  %28 = call swiftcc i1 @"$sSLsE2geoiySbx_xtFZ"(%swift.opaque* noalias nocapture %25, %swift.opaque* noalias nocapture %26, %swift.type* %22, i8** %27, %swift.type* swiftself %22) #19
  %29 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29)
  %30 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30)
  %31 = xor i1 %28, true
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false)
  br i1 %32, label %79, label %33

33:                                               ; preds = %entry
  %34 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34)
  %._rawValue3 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue3._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue3, i32 0, i32 0
  store i8* %18, i8** %._rawValue3._rawValue, align 8
  %35 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %36 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %35, i32 0, i32 9
  %stride = load i64, i64* %36, align 8, !invariant.load !17
  %37 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %20, i64 %stride)
  %38 = extractvalue { i64, i1 } %37, 0
  %39 = extractvalue { i64, i1 } %37, 1
  %40 = getelementptr inbounds i8, i8* %19, i64 %38
  %41 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41)
  %._rawValue4 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %6, i32 0, i32 0
  %._rawValue4._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue4, i32 0, i32 0
  store i8* %40, i8** %._rawValue4._rawValue, align 8
  %42 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %43 = bitcast %T10BufferView0aB5IndexV* %6 to %swift.opaque*
  %44 = call swiftcc i1 @"$sSLsE2leoiySbx_xtFZ"(%swift.opaque* noalias nocapture %42, %swift.opaque* noalias nocapture %43, %swift.type* %22, i8** %27, %swift.type* swiftself %22) #19
  %45 = bitcast %T10BufferView0aB5IndexV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45)
  %46 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46)
  %47 = xor i1 %44, true
  %48 = call i1 @llvm.expect.i1(i1 %47, i1 false)
  br i1 %48, label %80, label %49

49:                                               ; preds = %33
  %50 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %51 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %50, i32 0, i32 10
  %flags = load i32, i32* %51, align 8, !invariant.load !17
  %52 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %52, 0
  br i1 %flags.isTriviallyDestroyable, label %53, label %54

53:                                               ; preds = %49
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %17, i64 0, %swift.type* %"\CF\84_0_0", i8* %18, %swift.type* %"\CF\84_0_0") #19
  br label %68

54:                                               ; preds = %49
  %55 = ptrtoint i8* %18 to i64
  %56 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %56, 255
  %57 = add i64 %flags.alignmentMask, 1
  %58 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %57, i64 1)
  %59 = extractvalue { i64, i1 } %58, 0
  %60 = extractvalue { i64, i1 } %58, 1
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  br i1 %61, label %81, label %62

62:                                               ; preds = %54
  %63 = and i64 %55, %59
  %64 = icmp eq i64 %63, 0
  %65 = xor i1 %64, true
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  br i1 %66, label %82, label %67

67:                                               ; preds = %62
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %17, i64 0, %swift.type* %"\CF\84_0_0", i8* %18, %swift.type* %"\CF\84_0_0") #19
  br label %68

68:                                               ; preds = %53, %67
  %69 = call i1 (...) @llvm.coro.suspend.retcon.i1(%swift.opaque* %17)
  br i1 %69, label %74, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 1
  %72 = load i8*, i8** %71, align 8, !invariant.load !17
  %destroy5 = bitcast i8* %72 to void (%swift.opaque*, %swift.type*)*
  call void %destroy5(%swift.opaque* noalias %17, %swift.type* %"\CF\84_0_0") #9
  %73 = bitcast %swift.opaque* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %73)
  call void @llvm.coro.alloca.free(token %15)
  br label %coro.end

74:                                               ; preds = %68
  %75 = getelementptr inbounds i8*, i8** %"\CF\84_0_0.valueWitnesses", i32 1
  %76 = load i8*, i8** %75, align 8, !invariant.load !17
  %destroy = bitcast i8* %76 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %17, %swift.type* %"\CF\84_0_0") #9
  %77 = bitcast %swift.opaque* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %77)
  call void @llvm.coro.alloca.free(token %15)
  br label %coro.end

coro.end:                                         ; preds = %70, %74
  %78 = call i1 @llvm.coro.end(i8* %8, i1 false)
  unreachable

79:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

80:                                               ; preds = %33
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

81:                                               ; preds = %54
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

82:                                               ; preds = %62
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASly11SubSequenceQzSny5IndexQzGcigTW"(%T10BufferViewAAV* noalias nocapture sret(%T10BufferViewAAV) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = alloca %TSn, align 8
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %4 = alloca %T10BufferViewAAV, align 8
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %5 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %1, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %6 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %2, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %7 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %2, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %8 = load i64, i64* %.count._value, align 8
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 10
  %flags = load i32, i32* %14, align 8, !invariant.load !17
  %15 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %15, 0
  br i1 %flags.isTriviallyDestroyable, label %45, label %16

16:                                               ; preds = %entry
  %17 = ptrtoint i8* %5 to i64
  %18 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %18, 255
  %19 = add i64 %flags.alignmentMask, 1
  %20 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %19, i64 1)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %150, label %24

24:                                               ; preds = %16
  %25 = and i64 %17, %21
  %26 = icmp eq i64 %25, 0
  %27 = xor i1 %26, true
  %28 = ptrtoint i8* %6 to i64
  %29 = and i64 %28, %21
  %30 = icmp eq i64 %29, 0
  %31 = xor i1 %30, true
  %32 = or i1 %27, %31
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %151, label %34

34:                                               ; preds = %24
  %35 = ptrtoint i8* %7 to i64
  %36 = sub i64 %17, %35
  %37 = sdiv i64 %36, 1
  %38 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %39 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %38, i32 0, i32 9
  %stride = load i64, i64* %39, align 8, !invariant.load !17
  %40 = icmp eq i64 %stride, 0
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  br i1 %42, label %152, label %43

43:                                               ; preds = %34
  %44 = icmp eq i64 %37, -9223372036854775808
  br i1 %44, label %94, label %99

45:                                               ; preds = %entry
  %46 = ptrtoint i8* %5 to i64
  %47 = ptrtoint i8* %7 to i64
  %48 = sub i64 %46, %47
  %49 = sdiv i64 %48, 1
  %50 = icmp slt i64 %49, 0
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  br i1 %51, label %159, label %52

52:                                               ; preds = %45
  %53 = ptrtoint i8* %6 to i64
  %54 = sub i64 %53, %46
  %55 = sdiv i64 %54, 1
  %56 = icmp slt i64 %55, 0
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false)
  br i1 %57, label %160, label %58

58:                                               ; preds = %52
  %59 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %60 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %59, i32 0, i32 9
  %stride7 = load i64, i64* %60, align 8, !invariant.load !17
  %61 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %8, i64 %stride7)
  %62 = extractvalue { i64, i1 } %61, 0
  %63 = extractvalue { i64, i1 } %61, 1
  %64 = getelementptr inbounds i8, i8* %7, i64 %62
  %65 = ptrtoint i8* %64 to i64
  %66 = sub i64 %65, %53
  %67 = sdiv i64 %66, 1
  %68 = icmp slt i64 %67, 0
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false)
  br i1 %69, label %161, label %70

70:                                               ; preds = %58
  br label %71

71:                                               ; preds = %70, %149
  %72 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %72)
  %.lowerBound1 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound1._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound1, i32 0, i32 0
  %.lowerBound1._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound1._rawValue, i32 0, i32 0
  store i8* %5, i8** %.lowerBound1._rawValue._rawValue, align 8
  %.upperBound2 = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound2, i32 0, i32 0
  %.upperBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound2._rawValue, i32 0, i32 0
  store i8* %6, i8** %.upperBound2._rawValue._rawValue, align 8
  %73 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 255, %swift.type* %"\CF\84_0_0") #10
  %74 = extractvalue %swift.metadata_response %73, 0
  %75 = extractvalue %swift.metadata_response %73, 1
  %76 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %74, i8*** undef) #8
  %77 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %74, i8** %76) #10
  %78 = extractvalue %swift.metadata_response %77, 0
  %79 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %74, i8*** undef) #8
  %80 = call i8** @"$sS2iSZsWl"() #10
  %81 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %82 = getelementptr inbounds i8**, i8*** %81, i32 0
  store i8** %79, i8*** %82, align 8
  %83 = getelementptr inbounds i8**, i8*** %81, i32 1
  store i8** %80, i8*** %83, align 8
  %84 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %78, i8*** %81) #8
  %85 = bitcast %TSn* %3 to %swift.opaque*
  %86 = call swiftcc i64 @"$sSlsE5countSivg"(%swift.type* %78, i8** %84, %swift.opaque* noalias nocapture swiftself %85) #19
  %87 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %87)
  %88 = bitcast %T10BufferViewAAV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %88)
  %.start3 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %4, i32 0, i32 0
  %.start3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start3, i32 0, i32 0
  %.start3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start3._rawValue, i32 0, i32 0
  store i8* %7, i8** %.start3._rawValue._rawValue, align 8
  %.count4 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %4, i32 0, i32 1
  %.count4._value = getelementptr inbounds %TSi, %TSi* %.count4, i32 0, i32 0
  store i64 %8, i64* %.count4._value, align 8
  %89 = bitcast %T10BufferViewAAV* %4 to %swift.opaque*
  %90 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %5, i64 %86, %swift.opaque* noalias nocapture %89, %swift.type* %"\CF\84_0_0", %swift.type* %Self) #19
  %91 = extractvalue { i8*, i64 } %90, 0
  %92 = extractvalue { i8*, i64 } %90, 1
  %93 = bitcast %T10BufferViewAAV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %93)
  %.start5 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 0
  %.start5._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start5, i32 0, i32 0
  %.start5._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start5._rawValue, i32 0, i32 0
  store i8* %91, i8** %.start5._rawValue._rawValue, align 8
  %.count6 = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 1
  %.count6._value = getelementptr inbounds %TSi, %TSi* %.count6, i32 0, i32 0
  store i64 %92, i64* %.count6._value, align 8
  ret void

94:                                               ; preds = %43
  %95 = icmp eq i64 %stride, -1
  %96 = call i1 @llvm.expect.i1(i1 %95, i1 false)
  %97 = call i1 @llvm.expect.i1(i1 %96, i1 false)
  br i1 %97, label %158, label %98

98:                                               ; preds = %94
  br label %100

99:                                               ; preds = %43
  br label %100

100:                                              ; preds = %98, %99
  %101 = sdiv i64 %37, %stride
  %102 = srem i64 %37, %stride
  %103 = icmp eq i64 %102, 0
  %104 = xor i1 %103, true
  %105 = icmp slt i64 %101, 0
  %106 = or i1 %104, %105
  %107 = call i1 @llvm.expect.i1(i1 %106, i1 false)
  br i1 %107, label %153, label %108

108:                                              ; preds = %100
  %109 = sub i64 %28, %17
  %110 = sdiv i64 %109, 1
  %111 = icmp eq i64 %110, -9223372036854775808
  br i1 %111, label %112, label %117

112:                                              ; preds = %108
  %113 = icmp eq i64 %stride, -1
  %114 = call i1 @llvm.expect.i1(i1 %113, i1 false)
  %115 = call i1 @llvm.expect.i1(i1 %114, i1 false)
  br i1 %115, label %157, label %116

116:                                              ; preds = %112
  br label %118

117:                                              ; preds = %108
  br label %118

118:                                              ; preds = %116, %117
  %119 = sdiv i64 %110, %stride
  %120 = srem i64 %110, %stride
  %121 = icmp eq i64 %120, 0
  %122 = xor i1 %121, true
  %123 = icmp slt i64 %119, 0
  %124 = or i1 %122, %123
  %125 = call i1 @llvm.expect.i1(i1 %124, i1 false)
  br i1 %125, label %154, label %126

126:                                              ; preds = %118
  %127 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %8, i64 %stride)
  %128 = extractvalue { i64, i1 } %127, 0
  %129 = extractvalue { i64, i1 } %127, 1
  %130 = getelementptr inbounds i8, i8* %7, i64 %128
  %131 = ptrtoint i8* %130 to i64
  %132 = sub i64 %131, %28
  %133 = sdiv i64 %132, 1
  %134 = icmp eq i64 %133, -9223372036854775808
  br i1 %134, label %135, label %140

135:                                              ; preds = %126
  %136 = icmp eq i64 %stride, -1
  %137 = call i1 @llvm.expect.i1(i1 %136, i1 false)
  %138 = call i1 @llvm.expect.i1(i1 %137, i1 false)
  br i1 %138, label %156, label %139

139:                                              ; preds = %135
  br label %141

140:                                              ; preds = %126
  br label %141

141:                                              ; preds = %139, %140
  %142 = sdiv i64 %133, %stride
  %143 = srem i64 %133, %stride
  %144 = icmp eq i64 %143, 0
  %145 = xor i1 %144, true
  %146 = icmp slt i64 %142, 0
  %147 = or i1 %145, %146
  %148 = call i1 @llvm.expect.i1(i1 %147, i1 false)
  br i1 %148, label %155, label %149

149:                                              ; preds = %141
  br label %71

150:                                              ; preds = %16
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

151:                                              ; preds = %24
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

152:                                              ; preds = %34
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

153:                                              ; preds = %100
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

154:                                              ; preds = %118
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

155:                                              ; preds = %141
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

156:                                              ; preds = %135
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

157:                                              ; preds = %112
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

158:                                              ; preds = %94
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

159:                                              ; preds = %45
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

160:                                              ; preds = %52
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

161:                                              ; preds = %58
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl7indices7IndicesQzvgTW"(%TSn* noalias nocapture sret(%TSn) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %2 = alloca %TSn, align 8
  %3 = alloca %T10BufferView0aB5IndexV, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %5 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %1, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %6 = load i64, i64* %.count._value, align 8
  %7 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %3, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %5, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %6, i64 %stride)
  %16 = extractvalue { i64, i1 } %15, 0
  %17 = extractvalue { i64, i1 } %15, 1
  %18 = getelementptr inbounds i8, i8* %5, i64 %16
  %19 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %18, i8** %._rawValue1._rawValue, align 8
  %20 = bitcast %TSn* %2 to %TSn.19*
  %21 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %22 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %23 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %"\CF\84_0_0") #10
  %24 = extractvalue %swift.metadata_response %23, 0
  %25 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %24, i8*** undef) #8
  %26 = bitcast %TSn.19* %20 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %26, %swift.opaque* noalias nocapture %21, %swift.opaque* noalias nocapture %22, %swift.type* %24, i8** %25) #19
  %27 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27)
  %28 = bitcast %T10BufferView0aB5IndexV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %29 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %2, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %30 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %31 = bitcast %TSn* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %31)
  %.lowerBound2 = getelementptr inbounds %TSn, %TSn* %0, i32 0, i32 0
  %.lowerBound2._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound2, i32 0, i32 0
  %.lowerBound2._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound2._rawValue, i32 0, i32 0
  store i8* %29, i8** %.lowerBound2._rawValue._rawValue, align 8
  %.upperBound3 = getelementptr inbounds %TSn, %TSn* %0, i32 0, i32 1
  %.upperBound3._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound3, i32 0, i32 0
  %.upperBound3._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound3._rawValue, i32 0, i32 0
  store i8* %30, i8** %.upperBound3._rawValue._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferViewAAVyxGSlAASl7isEmptySbvgTW"(%T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %1 = load i64, i64* %.count._value, align 8
  %2 = icmp eq i64 %1, 0
  ret i1 %2
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSlAASl5countSivgTW"(%T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %1 = load i64, i64* %.count._value, align 8
  ret i64 %1
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl30_customIndexOfEquatableElementy0D0QzSgSg0G0QzFTW"(%TSq.22* noalias nocapture sret(%TSq.22) %0, %swift.opaque* noalias nocapture %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSq.22* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %TSq.22, %TSq.22* %0, i32 0, i32 1
  %5 = bitcast [1 x i8]* %4 to i1*
  store i1 true, i1* %5, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl34_customLastIndexOfEquatableElementy0E0QzSgSg0H0QzFTW"(%TSq.22* noalias nocapture sret(%TSq.22) %0, %swift.opaque* noalias nocapture %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSq.22* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %TSq.22, %TSq.22* %0, i32 0, i32 1
  %5 = bitcast [1 x i8]* %4 to i1*
  store i1 true, i1* %5, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl5index_8offsetBy5IndexQzAG_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %9 = bitcast %TSq.24* %5 to %swift.opaque*
  %10 = bitcast %T10BufferViewAAV* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %9, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %8, %swift.opaque* noalias nocapture swiftself %10) #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSlAASl8distance4from2toSi5IndexQz_AHtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SnyAGGtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %TSn* %1 to %TSn.4*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %3, %TSn.4* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsy5IndexQz_SNyAGGtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %TSN.42* noalias nocapture dereferenceable(16) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %TSN.42* %1 to %TSN*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %3, %TSN* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl20_failEarlyRangeCheck_6boundsySny5IndexQzG_AHtFTW"(%TSn* noalias nocapture dereferenceable(16) %0, %TSn* noalias nocapture dereferenceable(16) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %TSn* %0 to %TSn.4*
  %4 = bitcast %TSn* %1 to %TSn.4*
  call swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTf4nnd_n"(%TSn.4* noalias nocapture %3, %TSn.4* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable) #19
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl5index5after5IndexQzAG_tFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = getelementptr inbounds i8, i8* %3, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %10, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSlAASl9formIndex5aftery0D0Qzz_tFTW"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %._rawValue._rawValue, align 8
  %3 = bitcast %swift.type* %Self to %swift.type**
  %4 = getelementptr inbounds %swift.type*, %swift.type** %3, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %4, align 8, !invariant.load !17
  %5 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = getelementptr inbounds i8, i8* %2, i64 %stride
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %9, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSKAASK5index6before5IndexQzAG_tFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %4 = bitcast %swift.type* %Self to %swift.type**
  %5 = getelementptr inbounds %swift.type*, %swift.type** %4, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %5, align 8, !invariant.load !17
  %6 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %13, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSKAASK9formIndex6beforey0D0Qzz_tFTW"(%T10BufferView0aB5IndexV* nocapture dereferenceable(8) %0, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %._rawValue._rawValue, align 8
  %3 = bitcast %swift.type* %Self to %swift.type**
  %4 = getelementptr inbounds %swift.type*, %swift.type** %3, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %4, align 8, !invariant.load !17
  %5 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 -1, i64 %stride)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = getelementptr inbounds i8, i8* %2, i64 %10
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %12, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSKAASK5index_8offsetBy5IndexQzAG_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSKAASK5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %9 = bitcast %TSq.24* %5 to %swift.opaque*
  %10 = bitcast %T10BufferViewAAV* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %9, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %8, %swift.opaque* noalias nocapture swiftself %10) #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSKAASK8distance4from2toSi5IndexQz_AHtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSkAASk5index_8offsetBy5IndexQzAG_SitFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %3, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferViewAAVyxGSkAASk5index_8offsetBy07limitedE05IndexQzSgAH_SiAHtFTW"(%TSq.23* noalias nocapture sret(%TSq.23) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, i64 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %4, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %5 = bitcast %TSq.23* %0 to %TSq.24*
  %6 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %7 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %8 = bitcast %TSq.24* %5 to %swift.opaque*
  %9 = bitcast %T10BufferViewAAV* %4 to %swift.opaque*
  call swiftcc void @"$sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %8, %swift.opaque* noalias nocapture %6, i64 %2, %swift.opaque* noalias nocapture %7, %swift.type* %Self, i8** %SelfWitnessTable, %swift.opaque* noalias nocapture swiftself %9) #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferViewAAVyxGSkAASk8distance4from2toSi5IndexQz_AHtFTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferViewAAV* noalias nocapture swiftself dereferenceable(16) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  ret i64 %27

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferViewAAV20withUnsafeRawPointeryqd__qd__SV_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = bitcast %swift.type* %Element to i8***
  %9 = getelementptr inbounds i8**, i8*** %8, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %9, align 8, !invariant.load !17, !dereferenceable !18
  %10 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %11 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %10, i32 0, i32 9
  %stride = load i64, i64* %11, align 8, !invariant.load !17
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %stride)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %24, label %16

16:                                               ; preds = %entry
  %17 = bitcast i8* %1 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %18 = bitcast %swift.opaque* %2 to %swift.refcounted*
  call swiftcc void %17(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %7, i64 %13, %swift.refcounted* swiftself %18, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %19 = load %swift.error*, %swift.error** %6, align 8
  %20 = icmp ne %swift.error* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  ret void

22:                                               ; preds = %16
  %23 = phi %swift.error* [ %19, %16 ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %23, %swift.error** %6, align 8
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferViewAAV15withUnsafeBytesyqd__qd__SWKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds i8, i8* %7, i64 %4
  %10 = ptrtoint i8* %9 to i64
  %11 = bitcast i8* %1 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %12 = bitcast %swift.opaque* %2 to %swift.refcounted*
  call swiftcc void %11(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %8, i64 %10, %swift.refcounted* swiftself %12, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %13 = load %swift.error*, %swift.error** %6, align 8
  %14 = icmp ne %swift.error* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %entry
  ret void

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %13, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %17, %swift.error** %6, align 8
  ret void
}

define swiftcc void @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %3, i64 %4, %swift.type* %Element)
  %8 = alloca i8, i64 64, align 16
  %9 = bitcast i8* %8 to %swift.opaque*
  %10 = bitcast %swift.opaque* %9 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>*
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %10, i32 0, i32 1
  %12 = bitcast [16 x i8]* %11 to %swift.type**
  store %swift.type* %Element, %swift.type** %12, align 8
  %13 = getelementptr inbounds %swift.type*, %swift.type** %12, i32 1
  store %swift.type* %R, %swift.type** %13, align 8
  %14 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %10, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %14, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  %15 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %10, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %15, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %3, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %15, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  call swiftcc void @"$sSV17withMemoryRebound2to8capacity_q_xm_Siq_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %Element, i64 %4, i8* bitcast (void (%swift.opaque*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__ADKXEfU_TA" to i8*), %swift.opaque* %9, i8* %7, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %16 = load %swift.error*, %swift.error** %6, align 8
  %17 = icmp ne %swift.error* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %entry
  ret void

19:                                               ; preds = %entry
  %20 = phi %swift.error* [ %16, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %20, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__ADKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, %swift.opaque* %3, i8* %4, i64 %5, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %2 to void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %3 to %swift.refcounted*
  call swiftcc void %8(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %10 = load %swift.error*, %swift.error** %7, align 8
  %11 = icmp ne %swift.error* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %entry
  ret void

13:                                               ; preds = %entry
  %14 = phi %swift.error* [ %10, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %14, %swift.error** %7, align 8
  ret void
}

define swiftcc void @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca i8, i64 48, align 16
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = bitcast %swift.opaque* %8 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 1
  %11 = bitcast [16 x i8]* %10 to %swift.type**
  store %swift.type* %Element, %swift.type** %11, align 8
  %12 = getelementptr inbounds %swift.type*, %swift.type** %11, i32 1
  store %swift.type* %R, %swift.type** %12, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %9, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %13, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  call swiftcc void @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* bitcast (void (%swift.opaque*, i8*, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_TA" to i8*), %swift.opaque* %8, i8* %3, i64 %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %14 = load %swift.error*, %swift.error** %6, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %entry
  ret void

17:                                               ; preds = %entry
  %18 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %18, %swift.error** %6, align 8
  ret void
}

define internal swiftcc void @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %3, %swift.opaque* %4, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = ptrtoint i8* %1 to i64
  %8 = call swiftcc { i64, i64 } @"$sSR5start5countSRyxGSPyxGSg_SitcfC"(i64 %7, i64 %2, %swift.type* %Element)
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = bitcast i8* %3 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %12 = bitcast %swift.opaque* %4 to %swift.refcounted*
  call swiftcc void %11(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %9, i64 %10, %swift.refcounted* swiftself %12, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %13 = load %swift.error*, %swift.error** %6, align 8
  %14 = icmp ne %swift.error* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %entry
  ret void

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %13, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  store %swift.error* %17, %swift.error** %6, align 8
  ret void
}

define swiftcc void @"$s10BufferViewAAV6offsetxSi_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = icmp slt i64 %1, 0
  %5 = icmp slt i64 %1, %3
  %6 = xor i1 %5, true
  %7 = or i1 %4, %6
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false)
  br i1 %8, label %24, label %9

9:                                                ; preds = %entry
  %10 = bitcast %swift.type* %Element to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 9
  %stride = load i64, i64* %13, align 8, !invariant.load !17
  %14 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %15 = extractvalue { i64, i1 } %14, 0
  %16 = extractvalue { i64, i1 } %14, 1
  %17 = getelementptr inbounds i8, i8* %2, i64 %15
  %18 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %19 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %18, i32 0, i32 10
  %flags = load i32, i32* %19, align 8, !invariant.load !17
  %20 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %20, 0
  br i1 %flags.isTriviallyDestroyable, label %21, label %22

21:                                               ; preds = %9
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %17, %swift.type* %Element)
  br label %23

22:                                               ; preds = %9
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %17, %swift.type* %Element)
  br label %23

23:                                               ; preds = %21, %22
  ret void

24:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferViewAAV15uncheckedOffsetxSi_tcig"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i8* %2, i64 %3, %swift.type* %Element) #0 {
entry:
  %4 = bitcast %swift.type* %Element to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %7 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %6, i32 0, i32 9
  %stride = load i64, i64* %7, align 8, !invariant.load !17
  %8 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = getelementptr inbounds i8, i8* %2, i64 %9
  %12 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 10
  %flags = load i32, i32* %13, align 8, !invariant.load !17
  %14 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %14, 0
  br i1 %flags.isTriviallyDestroyable, label %15, label %16

15:                                               ; preds = %entry
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %11, %swift.type* %Element)
  br label %17

16:                                               ; preds = %entry
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 0, %swift.type* %Element, i8* %11, %swift.type* %Element)
  br label %17

17:                                               ; preds = %15, %16
  ret void
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV6prefixyAByxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferViewAAV, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %23, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %13)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %14 = bitcast %T10BufferViewAAV* %3 to %swift.opaque*
  %15 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %16 = extractvalue %swift.metadata_response %15, 0
  %17 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %12, i64 %11, %swift.opaque* noalias nocapture %14, %swift.type* %Element, %swift.type* %16)
  %18 = extractvalue { i8*, i64 } %17, 0
  %19 = extractvalue { i8*, i64 } %17, 1
  %20 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20)
  %21 = insertvalue { i8*, i64 } undef, i8* %18, 0
  %22 = insertvalue { i8*, i64 } %21, i64 %19, 1
  ret { i8*, i64 } %22

23:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV6suffixyAByxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferViewAAV, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %36, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %11)
  %14 = extractvalue { i64, i1 } %13, 0
  %15 = extractvalue { i64, i1 } %13, 1
  %16 = bitcast %swift.type* %Element to i8***
  %17 = getelementptr inbounds i8**, i8*** %16, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %17, align 8, !invariant.load !17, !dereferenceable !18
  %18 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %19 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %18, i32 0, i32 9
  %stride = load i64, i64* %19, align 8, !invariant.load !17
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %14, i64 %stride)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %37, label %24

24:                                               ; preds = %10
  %25 = getelementptr inbounds i8, i8* %12, i64 %21
  %26 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %27 = bitcast %T10BufferViewAAV* %3 to %swift.opaque*
  %28 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %29 = extractvalue %swift.metadata_response %28, 0
  %30 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %25, i64 %11, %swift.opaque* noalias nocapture %27, %swift.type* %Element, %swift.type* %29)
  %31 = extractvalue { i8*, i64 } %30, 0
  %32 = extractvalue { i8*, i64 } %30, 1
  %33 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33)
  %34 = insertvalue { i8*, i64 } undef, i8* %31, 0
  %35 = insertvalue { i8*, i64 } %34, i64 %32, 1
  ret { i8*, i64 } %35

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV9dropFirstyAByxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferViewAAV, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %36, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %8, %9
  %11 = phi i64 [ %2, %9 ], [ %0, %8 ]
  %12 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %1, i64 %2, %swift.type* %Element)
  %13 = bitcast %swift.type* %Element to i8***
  %14 = getelementptr inbounds i8**, i8*** %13, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %14, align 8, !invariant.load !17, !dereferenceable !18
  %15 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %16 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %15, i32 0, i32 9
  %stride = load i64, i64* %16, align 8, !invariant.load !17
  %17 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %11, i64 %stride)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false)
  br i1 %20, label %37, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds i8, i8* %12, i64 %18
  %23 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %11)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %27 = bitcast %T10BufferViewAAV* %3 to %swift.opaque*
  %28 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %29 = extractvalue %swift.metadata_response %28, 0
  %30 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %22, i64 %24, %swift.opaque* noalias nocapture %27, %swift.type* %Element, %swift.type* %29)
  %31 = extractvalue { i8*, i64 } %30, 0
  %32 = extractvalue { i8*, i64 } %30, 1
  %33 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33)
  %34 = insertvalue { i8*, i64 } undef, i8* %31, 0
  %35 = insertvalue { i8*, i64 } %34, i64 %32, 1
  ret { i8*, i64 } %35

36:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

37:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV8dropLastyAByxGSiF"(i64 %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %T10BufferViewAAV, align 8
  %4 = icmp slt i64 %0, 0
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false)
  br i1 %5, label %26, label %6

6:                                                ; preds = %entry
  %7 = icmp slt i64 %0, %2
  br i1 %7, label %8, label %12

8:                                                ; preds = %6
  %9 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 %0)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  br label %13

12:                                               ; preds = %6
  br label %13

13:                                               ; preds = %8, %12
  %14 = phi i64 [ 0, %12 ], [ %10, %8 ]
  %15 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %1, i64 %2, %swift.type* %Element)
  %16 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %16)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %3, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %17 = bitcast %T10BufferViewAAV* %3 to %swift.opaque*
  %18 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %19 = extractvalue %swift.metadata_response %18, 0
  %20 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %15, i64 %14, %swift.opaque* noalias nocapture %17, %swift.type* %Element, %swift.type* %19)
  %21 = extractvalue { i8*, i64 } %20, 0
  %22 = extractvalue { i8*, i64 } %20, 1
  %23 = bitcast %T10BufferViewAAV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %23)
  %24 = insertvalue { i8*, i64 } undef, i8* %21, 0
  %25 = insertvalue { i8*, i64 } %24, i64 %22, 1
  ret { i8*, i64 } %25

26:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV6prefix4upToAByxGAA0aB5IndexVyxG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %TSn, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferViewAAV, align 8
  %7 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %1, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %0, i8** %._rawValue1._rawValue, align 8
  %10 = bitcast %TSn* %3 to %TSn.19*
  %11 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %12 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %13 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %14 = extractvalue %swift.metadata_response %13, 0
  %15 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %14, i8*** undef) #8
  %16 = bitcast %TSn.19* %10 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %16, %swift.opaque* noalias nocapture %11, %swift.opaque* noalias nocapture %12, %swift.type* %14, i8** %15)
  %17 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17)
  %18 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %19 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %20 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %21 = bitcast %swift.type* %Element to i8***
  %22 = getelementptr inbounds i8**, i8*** %21, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %22, align 8, !invariant.load !17, !dereferenceable !18
  %23 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %24 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %23, i32 0, i32 10
  %flags = load i32, i32* %24, align 8, !invariant.load !17
  %25 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %25, 0
  br i1 %flags.isTriviallyDestroyable, label %55, label %26

26:                                               ; preds = %entry
  %27 = ptrtoint i8* %19 to i64
  %28 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %28, 255
  %29 = add i64 %flags.alignmentMask, 1
  %30 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %29, i64 1)
  %31 = extractvalue { i64, i1 } %30, 0
  %32 = extractvalue { i64, i1 } %30, 1
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %174, label %34

34:                                               ; preds = %26
  %35 = and i64 %27, %31
  %36 = icmp eq i64 %35, 0
  %37 = xor i1 %36, true
  %38 = ptrtoint i8* %20 to i64
  %39 = and i64 %38, %31
  %40 = icmp eq i64 %39, 0
  %41 = xor i1 %40, true
  %42 = or i1 %37, %41
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %175, label %44

44:                                               ; preds = %34
  %45 = ptrtoint i8* %1 to i64
  %46 = sub i64 %27, %45
  %47 = sdiv i64 %46, 1
  %48 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %49 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %48, i32 0, i32 9
  %stride = load i64, i64* %49, align 8, !invariant.load !17
  %50 = icmp eq i64 %stride, 0
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false)
  %52 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  br i1 %52, label %176, label %53

53:                                               ; preds = %44
  %54 = icmp eq i64 %47, -9223372036854775808
  br i1 %54, label %95, label %100

55:                                               ; preds = %entry
  %56 = ptrtoint i8* %19 to i64
  %57 = ptrtoint i8* %1 to i64
  %58 = sub i64 %56, %57
  %59 = sdiv i64 %58, 1
  %60 = icmp slt i64 %59, 0
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  br i1 %61, label %186, label %62

62:                                               ; preds = %55
  %63 = ptrtoint i8* %20 to i64
  %64 = sub i64 %63, %56
  %65 = sdiv i64 %64, 1
  %66 = icmp slt i64 %65, 0
  %67 = call i1 @llvm.expect.i1(i1 %66, i1 false)
  br i1 %67, label %187, label %68

68:                                               ; preds = %62
  %69 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %70 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %69, i32 0, i32 9
  %stride3 = load i64, i64* %70, align 8, !invariant.load !17
  %71 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride3)
  %72 = extractvalue { i64, i1 } %71, 0
  %73 = extractvalue { i64, i1 } %71, 1
  %74 = getelementptr inbounds i8, i8* %1, i64 %72
  %75 = ptrtoint i8* %74 to i64
  %76 = sub i64 %75, %63
  %77 = sdiv i64 %76, 1
  %78 = icmp slt i64 %77, 0
  %79 = call i1 @llvm.expect.i1(i1 %78, i1 false)
  br i1 %79, label %188, label %80

80:                                               ; preds = %68
  br label %81

81:                                               ; preds = %80, %150
  %82 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %82)
  %83 = call swiftcc i8* @"$s10BufferViewAAV11baseAddress33_33310AA7C1FAAF00F56EED8A671B7A06LLSVvg"(i8* %1, i64 %2, %swift.type* %Element)
  %84 = ptrtoint i8* %0 to i64
  %85 = ptrtoint i8* %1 to i64
  %86 = sub i64 %84, %85
  %87 = sdiv i64 %86, 1
  %88 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %89 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %88, i32 0, i32 9
  %stride2 = load i64, i64* %89, align 8, !invariant.load !17
  %90 = icmp eq i64 %stride2, 0
  %91 = call i1 @llvm.expect.i1(i1 %90, i1 false)
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false)
  br i1 %92, label %180, label %93

93:                                               ; preds = %81
  %94 = icmp eq i64 %87, -9223372036854775808
  br i1 %94, label %151, label %156

95:                                               ; preds = %53
  %96 = icmp eq i64 %stride, -1
  %97 = call i1 @llvm.expect.i1(i1 %96, i1 false)
  %98 = call i1 @llvm.expect.i1(i1 %97, i1 false)
  br i1 %98, label %185, label %99

99:                                               ; preds = %95
  br label %101

100:                                              ; preds = %53
  br label %101

101:                                              ; preds = %99, %100
  %102 = sdiv i64 %47, %stride
  %103 = srem i64 %47, %stride
  %104 = icmp eq i64 %103, 0
  %105 = xor i1 %104, true
  %106 = icmp slt i64 %102, 0
  %107 = or i1 %105, %106
  %108 = call i1 @llvm.expect.i1(i1 %107, i1 false)
  br i1 %108, label %177, label %109

109:                                              ; preds = %101
  %110 = sub i64 %38, %27
  %111 = sdiv i64 %110, 1
  %112 = icmp eq i64 %111, -9223372036854775808
  br i1 %112, label %113, label %118

113:                                              ; preds = %109
  %114 = icmp eq i64 %stride, -1
  %115 = call i1 @llvm.expect.i1(i1 %114, i1 false)
  %116 = call i1 @llvm.expect.i1(i1 %115, i1 false)
  br i1 %116, label %184, label %117

117:                                              ; preds = %113
  br label %119

118:                                              ; preds = %109
  br label %119

119:                                              ; preds = %117, %118
  %120 = sdiv i64 %111, %stride
  %121 = srem i64 %111, %stride
  %122 = icmp eq i64 %121, 0
  %123 = xor i1 %122, true
  %124 = icmp slt i64 %120, 0
  %125 = or i1 %123, %124
  %126 = call i1 @llvm.expect.i1(i1 %125, i1 false)
  br i1 %126, label %178, label %127

127:                                              ; preds = %119
  %128 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %129 = extractvalue { i64, i1 } %128, 0
  %130 = extractvalue { i64, i1 } %128, 1
  %131 = getelementptr inbounds i8, i8* %1, i64 %129
  %132 = ptrtoint i8* %131 to i64
  %133 = sub i64 %132, %38
  %134 = sdiv i64 %133, 1
  %135 = icmp eq i64 %134, -9223372036854775808
  br i1 %135, label %136, label %141

136:                                              ; preds = %127
  %137 = icmp eq i64 %stride, -1
  %138 = call i1 @llvm.expect.i1(i1 %137, i1 false)
  %139 = call i1 @llvm.expect.i1(i1 %138, i1 false)
  br i1 %139, label %183, label %140

140:                                              ; preds = %136
  br label %142

141:                                              ; preds = %127
  br label %142

142:                                              ; preds = %140, %141
  %143 = sdiv i64 %134, %stride
  %144 = srem i64 %134, %stride
  %145 = icmp eq i64 %144, 0
  %146 = xor i1 %145, true
  %147 = icmp slt i64 %143, 0
  %148 = or i1 %146, %147
  %149 = call i1 @llvm.expect.i1(i1 %148, i1 false)
  br i1 %149, label %179, label %150

150:                                              ; preds = %142
  br label %81

151:                                              ; preds = %93
  %152 = icmp eq i64 %stride2, -1
  %153 = call i1 @llvm.expect.i1(i1 %152, i1 false)
  %154 = call i1 @llvm.expect.i1(i1 %153, i1 false)
  br i1 %154, label %182, label %155

155:                                              ; preds = %151
  br label %157

156:                                              ; preds = %93
  br label %157

157:                                              ; preds = %155, %156
  %158 = sdiv i64 %87, %stride2
  %159 = srem i64 %87, %stride2
  %160 = icmp eq i64 %159, 0
  %161 = xor i1 %160, true
  %162 = call i1 @llvm.expect.i1(i1 %161, i1 false)
  br i1 %162, label %181, label %163

163:                                              ; preds = %157
  %164 = bitcast %T10BufferViewAAV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %164)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %6, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %6, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %165 = bitcast %T10BufferViewAAV* %6 to %swift.opaque*
  %166 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %167 = extractvalue %swift.metadata_response %166, 0
  %168 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %83, i64 %158, %swift.opaque* noalias nocapture %165, %swift.type* %Element, %swift.type* %167)
  %169 = extractvalue { i8*, i64 } %168, 0
  %170 = extractvalue { i8*, i64 } %168, 1
  %171 = bitcast %T10BufferViewAAV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %171)
  %172 = insertvalue { i8*, i64 } undef, i8* %169, 0
  %173 = insertvalue { i8*, i64 } %172, i64 %170, 1
  ret { i8*, i64 } %173

174:                                              ; preds = %26
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

175:                                              ; preds = %34
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

176:                                              ; preds = %44
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

177:                                              ; preds = %101
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

178:                                              ; preds = %119
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

179:                                              ; preds = %142
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

180:                                              ; preds = %81
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

181:                                              ; preds = %157
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

182:                                              ; preds = %151
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

183:                                              ; preds = %136
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

184:                                              ; preds = %113
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

185:                                              ; preds = %95
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable

186:                                              ; preds = %55
  call void asm sideeffect "", "n"(i32 12)
  call void @llvm.trap()
  unreachable

187:                                              ; preds = %62
  call void asm sideeffect "", "n"(i32 13)
  call void @llvm.trap()
  unreachable

188:                                              ; preds = %68
  call void asm sideeffect "", "n"(i32 14)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferViewAAV6suffix4fromAByxGAA0aB5IndexVyxG_tF"(i8* %0, i8* %1, i64 %2, %swift.type* %Element) #0 {
entry:
  %3 = alloca %TSn, align 8
  %4 = alloca %T10BufferView0aB5IndexV, align 8
  %5 = alloca %T10BufferView0aB5IndexV, align 8
  %6 = alloca %T10BufferViewAAV, align 8
  %7 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %4, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  store i8* %0, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %swift.type* %Element to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 9
  %stride = load i64, i64* %12, align 8, !invariant.load !17
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %2, i64 %stride)
  %14 = extractvalue { i64, i1 } %13, 0
  %15 = extractvalue { i64, i1 } %13, 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %14
  %17 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17)
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %5, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %16, i8** %._rawValue1._rawValue, align 8
  %18 = bitcast %TSn* %3 to %TSn.19*
  %19 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %20 = bitcast %T10BufferView0aB5IndexV* %5 to %swift.opaque*
  %21 = call swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 0, %swift.type* %Element) #10
  %22 = extractvalue %swift.metadata_response %21, 0
  %23 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %22, i8*** undef) #8
  %24 = bitcast %TSn.19* %18 to %swift.opaque*
  call swiftcc void @"$sSn15uncheckedBoundsSnyxGx5lower_x5uppert_tcfC"(%swift.opaque* noalias nocapture sret(%swift.opaque) %24, %swift.opaque* noalias nocapture %19, %swift.opaque* noalias nocapture %20, %swift.type* %22, i8** %23)
  %25 = bitcast %T10BufferView0aB5IndexV* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25)
  %26 = bitcast %T10BufferView0aB5IndexV* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26)
  %.lowerBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 0
  %.lowerBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.lowerBound, i32 0, i32 0
  %.lowerBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.lowerBound._rawValue, i32 0, i32 0
  %27 = load i8*, i8** %.lowerBound._rawValue._rawValue, align 8
  %.upperBound = getelementptr inbounds %TSn, %TSn* %3, i32 0, i32 1
  %.upperBound._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.upperBound, i32 0, i32 0
  %.upperBound._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.upperBound._rawValue, i32 0, i32 0
  %28 = load i8*, i8** %.upperBound._rawValue._rawValue, align 8
  %29 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %30 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %29, i32 0, i32 10
  %flags = load i32, i32* %30, align 8, !invariant.load !17
  %31 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %31, 0
  br i1 %flags.isTriviallyDestroyable, label %59, label %32

32:                                               ; preds = %entry
  %33 = ptrtoint i8* %27 to i64
  %34 = zext i32 %flags to i64
  %flags.alignmentMask = and i64 %34, 255
  %35 = add i64 %flags.alignmentMask, 1
  %36 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %35, i64 1)
  %37 = extractvalue { i64, i1 } %36, 0
  %38 = extractvalue { i64, i1 } %36, 1
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false)
  br i1 %39, label %165, label %40

40:                                               ; preds = %32
  %41 = and i64 %33, %37
  %42 = icmp eq i64 %41, 0
  %43 = xor i1 %42, true
  %44 = ptrtoint i8* %28 to i64
  %45 = and i64 %44, %37
  %46 = icmp eq i64 %45, 0
  %47 = xor i1 %46, true
  %48 = or i1 %43, %47
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false)
  br i1 %49, label %166, label %50

50:                                               ; preds = %40
  %51 = ptrtoint i8* %1 to i64
  %52 = sub i64 %33, %51
  %53 = sdiv i64 %52, 1
  %54 = icmp eq i64 %stride, 0
  %55 = call i1 @llvm.expect.i1(i1 %54, i1 false)
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false)
  br i1 %56, label %167, label %57

57:                                               ; preds = %50
  %58 = icmp eq i64 %53, -9223372036854775808
  br i1 %58, label %90, label %95

59:                                               ; preds = %entry
  %60 = ptrtoint i8* %27 to i64
  %61 = ptrtoint i8* %1 to i64
  %62 = sub i64 %60, %61
  %63 = sdiv i64 %62, 1
  %64 = icmp slt i64 %63, 0
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false)
  br i1 %65, label %177, label %66

66:                                               ; preds = %59
  %67 = ptrtoint i8* %28 to i64
  %68 = sub i64 %67, %60
  %69 = sdiv i64 %68, 1
  %70 = icmp slt i64 %69, 0
  %71 = call i1 @llvm.expect.i1(i1 %70, i1 false)
  br i1 %71, label %178, label %72

72:                                               ; preds = %66
  %73 = ptrtoint i8* %16 to i64
  %74 = sub i64 %73, %67
  %75 = sdiv i64 %74, 1
  %76 = icmp slt i64 %75, 0
  %77 = call i1 @llvm.expect.i1(i1 %76, i1 false)
  br i1 %77, label %179, label %78

78:                                               ; preds = %72
  br label %79

79:                                               ; preds = %78, %141
  %80 = bitcast %TSn* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %80)
  %81 = ptrtoint i8* %16 to i64
  %82 = ptrtoint i8* %0 to i64
  %83 = sub i64 %81, %82
  %84 = sdiv i64 %83, 1
  %85 = icmp eq i64 %stride, 0
  %86 = call i1 @llvm.expect.i1(i1 %85, i1 false)
  %87 = call i1 @llvm.expect.i1(i1 %86, i1 false)
  br i1 %87, label %171, label %88

88:                                               ; preds = %79
  %89 = icmp eq i64 %84, -9223372036854775808
  br i1 %89, label %142, label %147

90:                                               ; preds = %57
  %91 = icmp eq i64 %stride, -1
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false)
  %93 = call i1 @llvm.expect.i1(i1 %92, i1 false)
  br i1 %93, label %176, label %94

94:                                               ; preds = %90
  br label %96

95:                                               ; preds = %57
  br label %96

96:                                               ; preds = %94, %95
  %97 = sdiv i64 %53, %stride
  %98 = srem i64 %53, %stride
  %99 = icmp eq i64 %98, 0
  %100 = xor i1 %99, true
  %101 = icmp slt i64 %97, 0
  %102 = or i1 %100, %101
  %103 = call i1 @llvm.expect.i1(i1 %102, i1 false)
  br i1 %103, label %168, label %104

104:                                              ; preds = %96
  %105 = sub i64 %44, %33
  %106 = sdiv i64 %105, 1
  %107 = icmp eq i64 %106, -9223372036854775808
  br i1 %107, label %108, label %113

108:                                              ; preds = %104
  %109 = icmp eq i64 %stride, -1
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false)
  %111 = call i1 @llvm.expect.i1(i1 %110, i1 false)
  br i1 %111, label %175, label %112

112:                                              ; preds = %108
  br label %114

113:                                              ; preds = %104
  br label %114

114:                                              ; preds = %112, %113
  %115 = sdiv i64 %106, %stride
  %116 = srem i64 %106, %stride
  %117 = icmp eq i64 %116, 0
  %118 = xor i1 %117, true
  %119 = icmp slt i64 %115, 0
  %120 = or i1 %118, %119
  %121 = call i1 @llvm.expect.i1(i1 %120, i1 false)
  br i1 %121, label %169, label %122

122:                                              ; preds = %114
  %123 = ptrtoint i8* %16 to i64
  %124 = sub i64 %123, %44
  %125 = sdiv i64 %124, 1
  %126 = icmp eq i64 %125, -9223372036854775808
  br i1 %126, label %127, label %132

127:                                              ; preds = %122
  %128 = icmp eq i64 %stride, -1
  %129 = call i1 @llvm.expect.i1(i1 %128, i1 false)
  %130 = call i1 @llvm.expect.i1(i1 %129, i1 false)
  br i1 %130, label %174, label %131

131:                                              ; preds = %127
  br label %133

132:                                              ; preds = %122
  br label %133

133:                                              ; preds = %131, %132
  %134 = sdiv i64 %125, %stride
  %135 = srem i64 %125, %stride
  %136 = icmp eq i64 %135, 0
  %137 = xor i1 %136, true
  %138 = icmp slt i64 %134, 0
  %139 = or i1 %137, %138
  %140 = call i1 @llvm.expect.i1(i1 %139, i1 false)
  br i1 %140, label %170, label %141

141:                                              ; preds = %133
  br label %79

142:                                              ; preds = %88
  %143 = icmp eq i64 %stride, -1
  %144 = call i1 @llvm.expect.i1(i1 %143, i1 false)
  %145 = call i1 @llvm.expect.i1(i1 %144, i1 false)
  br i1 %145, label %173, label %146

146:                                              ; preds = %142
  br label %148

147:                                              ; preds = %88
  br label %148

148:                                              ; preds = %146, %147
  %149 = sdiv i64 %84, %stride
  %150 = srem i64 %84, %stride
  %151 = icmp eq i64 %150, 0
  %152 = xor i1 %151, true
  %153 = call i1 @llvm.expect.i1(i1 %152, i1 false)
  br i1 %153, label %172, label %154

154:                                              ; preds = %148
  %155 = bitcast %T10BufferViewAAV* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %155)
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %6, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  store i8* %1, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %6, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %2, i64* %.count._value, align 8
  %156 = bitcast %T10BufferViewAAV* %6 to %swift.opaque*
  %157 = call swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 0, %swift.type* %Element) #10
  %158 = extractvalue %swift.metadata_response %157, 0
  %159 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %149, %swift.opaque* noalias nocapture %156, %swift.type* %Element, %swift.type* %158)
  %160 = extractvalue { i8*, i64 } %159, 0
  %161 = extractvalue { i8*, i64 } %159, 1
  %162 = bitcast %T10BufferViewAAV* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %162)
  %163 = insertvalue { i8*, i64 } undef, i8* %160, 0
  %164 = insertvalue { i8*, i64 } %163, i64 %161, 1
  ret { i8*, i64 } %164

165:                                              ; preds = %32
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

166:                                              ; preds = %40
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

167:                                              ; preds = %50
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

168:                                              ; preds = %96
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

169:                                              ; preds = %114
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

170:                                              ; preds = %133
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

171:                                              ; preds = %79
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

172:                                              ; preds = %148
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

173:                                              ; preds = %142
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

174:                                              ; preds = %127
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

175:                                              ; preds = %108
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

176:                                              ; preds = %90
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable

177:                                              ; preds = %59
  call void asm sideeffect "", "n"(i32 12)
  call void @llvm.trap()
  unreachable

178:                                              ; preds = %66
  call void asm sideeffect "", "n"(i32 13)
  call void @llvm.trap()
  unreachable

179:                                              ; preds = %72
  call void asm sideeffect "", "n"(i32 14)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferView0aB5IndexV9_rawValueSVvg"(i8* %0, %swift.type* %Element) #0 {
entry:
  ret i8* %0
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferView0aB5IndexVyxGSQAASQ2eeoiySbx_xtFZTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %swift.type* swiftself %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %5 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %Self, i8*** undef) #8
  %6 = call swiftcc i1 @"$sSxsE2eeoiySbx_xtFZ"(%swift.opaque* noalias nocapture %3, %swift.opaque* noalias nocapture %4, %swift.type* %Self, i8** %5, %swift.type* swiftself %2) #19
  ret i1 %6
}

define swiftcc void @"$s10BufferView0aB5IndexV4hash4intoys6HasherVz_tF"(%Ts6HasherV* nocapture dereferenceable(72) %0, i8* %1, %swift.type* %Element) #0 {
entry:
  %2 = ptrtoint i8* %1 to i64
  call swiftcc void @"$ss6HasherV8_combineyySuF"(i64 %2, %Ts6HasherV* nocapture swiftself dereferenceable(72) %0)
  ret void
}

define swiftcc i64 @"$s10BufferView0aB5IndexV9hashValueSivg"(i8* %0, %swift.type* %Element) #0 {
entry:
  %1 = alloca %Ts6HasherV, align 8
  %2 = alloca %Ts6HasherV, align 8
  %3 = bitcast %Ts6HasherV* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %3)
  %4 = bitcast %Ts6HasherV* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %4)
  call swiftcc void @"$ss6HasherV5_seedABSi_tcfC"(%Ts6HasherV* noalias nocapture sret(%Ts6HasherV) %1, i64 0)
  %5 = bitcast %Ts6HasherV* %2 to i8*
  %6 = bitcast %Ts6HasherV* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 72, i1 false)
  call swiftcc void @"$s10BufferView0aB5IndexV4hash4intoys6HasherVz_tF"(%Ts6HasherV* nocapture dereferenceable(72) %2, i8* %0, %swift.type* %Element)
  %7 = call swiftcc i64 @"$ss6HasherV9_finalizeSiyF"(%Ts6HasherV* nocapture swiftself dereferenceable(72) %2)
  %8 = bitcast %Ts6HasherV* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %8)
  %9 = bitcast %Ts6HasherV* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %9)
  ret i64 %7
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView0aB5IndexVyxGSHAASH9hashValueSivgTW"(%T10BufferView0aB5IndexV* noalias nocapture swiftself dereferenceable(8) %0, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %1 = load i8*, i8** %._rawValue._rawValue, align 8
  %2 = bitcast %swift.type* %Self to %swift.type**
  %3 = getelementptr inbounds %swift.type*, %swift.type** %2, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %3, align 8, !invariant.load !17
  %4 = call swiftcc i64 @"$s10BufferView0aB5IndexV9hashValueSivg"(i8* %1, %swift.type* %"\CF\84_0_0") #19
  ret i64 %4
}

define linkonce_odr hidden swiftcc void @"$s10BufferView0aB5IndexVyxGSHAASH4hash4intoys6HasherVz_tFTW"(%Ts6HasherV* nocapture dereferenceable(72) %0, %T10BufferView0aB5IndexV* noalias nocapture swiftself dereferenceable(8) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %2 = load i8*, i8** %._rawValue._rawValue, align 8
  %3 = bitcast %swift.type* %Self to %swift.type**
  %4 = getelementptr inbounds %swift.type*, %swift.type** %3, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %4, align 8, !invariant.load !17
  call swiftcc void @"$s10BufferView0aB5IndexV4hash4intoys6HasherVz_tF"(%Ts6HasherV* nocapture dereferenceable(72) %0, i8* %2, %swift.type* %"\CF\84_0_0") #19
  ret void
}

define linkonce_odr hidden swiftcc i64 @"$s10BufferView0aB5IndexVyxGSHAASH13_rawHashValue4seedS2i_tFTW"(i64 %0, %T10BufferView0aB5IndexV* noalias nocapture swiftself dereferenceable(8) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %2 = alloca %Ts6HasherV, align 8
  %3 = alloca %Ts6HasherV, align 8
  %4 = bitcast %Ts6HasherV* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %4)
  %5 = bitcast %Ts6HasherV* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %5)
  call swiftcc void @"$ss6HasherV5_seedABSi_tcfC"(%Ts6HasherV* noalias nocapture sret(%Ts6HasherV) %2, i64 %0) #19
  %6 = bitcast %Ts6HasherV* %3 to i8*
  %7 = bitcast %Ts6HasherV* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 72, i1 false)
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue._rawValue, align 8
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  call swiftcc void @"$s10BufferView0aB5IndexV4hash4intoys6HasherVz_tF"(%Ts6HasherV* nocapture dereferenceable(72) %3, i8* %8, %swift.type* %"\CF\84_0_0") #19
  %11 = call swiftcc i64 @"$ss6HasherV9_finalizeSiyF"(%Ts6HasherV* nocapture swiftself dereferenceable(72) %3) #19
  %12 = bitcast %Ts6HasherV* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %12)
  %13 = bitcast %Ts6HasherV* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %13)
  ret i64 %11
}

define linkonce_odr hidden swiftcc void @"$s10BufferView0aB5IndexVyxGSxAASx8distance2to6StrideQzx_tFTW"(%TSi* noalias nocapture sret(%TSi) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %T10BufferView0aB5IndexV* noalias nocapture swiftself dereferenceable(8) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %2, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = ptrtoint i8* %3 to i64
  %6 = ptrtoint i8* %4 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv i64 %7, 1
  %9 = bitcast %swift.type* %Self to %swift.type**
  %10 = getelementptr inbounds %swift.type*, %swift.type** %9, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %10, align 8, !invariant.load !17
  %11 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %12 = getelementptr inbounds i8**, i8*** %11, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %12, align 8, !invariant.load !17, !dereferenceable !18
  %13 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %14 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %13, i32 0, i32 9
  %stride = load i64, i64* %14, align 8, !invariant.load !17
  %15 = icmp eq i64 %stride, 0
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %33, label %18

18:                                               ; preds = %entry
  %19 = icmp eq i64 %8, -9223372036854775808
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp eq i64 %stride, -1
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %35, label %24

24:                                               ; preds = %20
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %24, %25
  %27 = sdiv i64 %8, %stride
  %28 = srem i64 %8, %stride
  %29 = icmp eq i64 %28, 0
  %30 = xor i1 %29, true
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false)
  br i1 %31, label %34, label %32

32:                                               ; preds = %26
  %._value = getelementptr inbounds %TSi, %TSi* %0, i32 0, i32 0
  store i64 %27, i64* %._value, align 8
  ret void

33:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

34:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$s10BufferView0aB5IndexVyxGSxAASx8advanced2byx6StrideQz_tFTW"(%T10BufferView0aB5IndexV* noalias nocapture sret(%T10BufferView0aB5IndexV) %0, %TSi* noalias nocapture dereferenceable(8) %1, %T10BufferView0aB5IndexV* noalias nocapture swiftself dereferenceable(8) %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._value = getelementptr inbounds %TSi, %TSi* %1, i32 0, i32 0
  %3 = load i64, i64* %._value, align 8
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %2, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue._rawValue, align 8
  %5 = bitcast %swift.type* %Self to %swift.type**
  %6 = getelementptr inbounds %swift.type*, %swift.type** %5, i64 2
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8, !invariant.load !17
  %7 = bitcast %swift.type* %"\CF\84_0_0" to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %"\CF\84_0_0.valueWitnesses" = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %"\CF\84_0_0.valueWitnesses" to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 9
  %stride = load i64, i64* %10, align 8, !invariant.load !17
  %11 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 %stride)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = getelementptr inbounds i8, i8* %4, i64 %12
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  store i8* %14, i8** %._rawValue1._rawValue, align 8
  ret void
}

define linkonce_odr hidden swiftcc { i64, i8 } @"$s10BufferView0aB5IndexVyxGSxAASx5_step5after4from2bySiSg5index_x5valuetAiJ_xAKt_x6StrideQztFZTW"(%T10BufferView0aB5IndexV* noalias nocapture %0, i64 %1, i8 %2, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %3, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %4, %TSi* noalias nocapture dereferenceable(8) %5, %swift.type* swiftself %6, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %7 = trunc i8 %2 to i1
  %8 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %9 = bitcast %T10BufferView0aB5IndexV* %3 to %swift.opaque*
  %10 = bitcast %T10BufferView0aB5IndexV* %4 to %swift.opaque*
  %11 = bitcast %TSi* %5 to %swift.opaque*
  %12 = zext i1 %7 to i8
  %13 = call swiftcc { i64, i8 } @"$sSxsE5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZ"(%swift.opaque* noalias nocapture %8, i64 %1, i8 %12, %swift.opaque* noalias nocapture %9, %swift.opaque* noalias nocapture %10, %swift.opaque* noalias nocapture %11, %swift.type* %Self, i8** %SelfWitnessTable, %swift.type* swiftself %6) #19
  %14 = extractvalue { i64, i8 } %13, 0
  %15 = extractvalue { i64, i8 } %13, 1
  %16 = trunc i8 %15 to i1
  %17 = zext i1 %16 to i8
  %18 = insertvalue { i64, i8 } undef, i64 %14, 0
  %19 = insertvalue { i64, i8 } %18, i8 %17, 1
  ret { i64, i8 } %19
}

declare swiftcc { i64, i8 } @"$sSxsE5_step5after4from2bySiSg5index_x5valuetAeF_xAGt_x6StrideQztFZ"(%swift.opaque* noalias nocapture, i64, i8, %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.type* swiftself) #0

define linkonce_odr hidden swiftcc i1 @"$s10BufferView0aB5IndexVyxGSLAASL1loiySbx_xtFZTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %swift.type* swiftself %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %3 = load i8*, i8** %._rawValue._rawValue, align 8
  %._rawValue1 = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %1, i32 0, i32 0
  %._rawValue1._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue1, i32 0, i32 0
  %4 = load i8*, i8** %._rawValue1._rawValue, align 8
  %5 = icmp ult i8* %3, %4
  ret i1 %5
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferView0aB5IndexVyxGSLAASL2leoiySbx_xtFZTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %swift.type* swiftself %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %5 = call swiftcc i1 @"$sSLsE2leoiySbx_xtFZ"(%swift.opaque* noalias nocapture %3, %swift.opaque* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable, %swift.type* swiftself %2) #19
  ret i1 %5
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferView0aB5IndexVyxGSLAASL2geoiySbx_xtFZTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %swift.type* swiftself %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %5 = call swiftcc i1 @"$sSLsE2geoiySbx_xtFZ"(%swift.opaque* noalias nocapture %3, %swift.opaque* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable, %swift.type* swiftself %2) #19
  ret i1 %5
}

define linkonce_odr hidden swiftcc i1 @"$s10BufferView0aB5IndexVyxGSLAASL1goiySbx_xtFZTW"(%T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %0, %T10BufferView0aB5IndexV* noalias nocapture dereferenceable(8) %1, %swift.type* swiftself %2, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %3 = bitcast %T10BufferView0aB5IndexV* %0 to %swift.opaque*
  %4 = bitcast %T10BufferView0aB5IndexV* %1 to %swift.opaque*
  %5 = call swiftcc i1 @"$sSLsE1goiySbx_xtFZ"(%swift.opaque* noalias nocapture %3, %swift.opaque* noalias nocapture %4, %swift.type* %Self, i8** %SelfWitnessTable, %swift.type* swiftself %2) #19
  ret i1 %5
}

declare swiftcc i1 @"$sSLsE1goiySbx_xtFZ"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, i8**, %swift.type* swiftself) #0

define swiftcc void @"$s10BufferView0aB8IteratorV4nextxSgyF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %swift.type* %"BufferViewIterator<Element>", %T10BufferView0aB8IteratorV* nocapture swiftself dereferenceable(16) %1) #0 {
entry:
  %2 = bitcast %swift.opaque* %0 to %TSq.32*
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %1, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  %3 = load i8*, i8** %.curPointer._rawValue, align 8
  %.endPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %1, i32 0, i32 1
  %.endPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.endPointer, i32 0, i32 0
  %4 = load i8*, i8** %.endPointer._rawValue, align 8
  %5 = icmp ult i8* %3, %4
  br i1 %5, label %6, label %24

6:                                                ; preds = %entry
  %7 = bitcast %swift.type* %"BufferViewIterator<Element>" to %swift.type**
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i64 2
  %Element1 = load %swift.type*, %swift.type** %8, align 8, !invariant.load !17
  %9 = bitcast %swift.type* %Element1 to i8***
  %10 = getelementptr inbounds i8**, i8*** %9, i64 -1
  %Element1.valueWitnesses = load i8**, i8*** %10, align 8, !invariant.load !17, !dereferenceable !18
  %11 = bitcast i8** %Element1.valueWitnesses to %swift.vwtable*
  %12 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %11, i32 0, i32 10
  %flags = load i32, i32* %12, align 8, !invariant.load !17
  %13 = and i32 %flags, 65536
  %flags.isTriviallyDestroyable = icmp eq i32 %13, 0
  br i1 %flags.isTriviallyDestroyable, label %14, label %19

14:                                               ; preds = %6
  %15 = bitcast %TSq.32* %2 to %swift.opaque*
  call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %15, i64 0, %swift.type* %Element1, i8* %3, %swift.type* %Element1)
  %16 = bitcast %TSq.32* %2 to %swift.opaque*
  %17 = getelementptr inbounds i8*, i8** %Element1.valueWitnesses, i32 7
  %18 = load i8*, i8** %17, align 8, !invariant.load !17
  %storeEnumTagSinglePayload3 = bitcast i8* %18 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload3(%swift.opaque* noalias %16, i32 0, i32 1, %swift.type* %Element1) #9
  call swiftcc void @"$s10BufferView0aB8IteratorV4nextxSgyF6$deferL_yylF"(%T10BufferView0aB8IteratorV* nocapture dereferenceable(16) %1, %swift.type* %Element1)
  br label %32

19:                                               ; preds = %6
  %20 = bitcast %TSq.32* %2 to %swift.opaque*
  call swiftcc void @"$sSV4load14fromByteOffset2asxSi_xmtlF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %20, i64 0, %swift.type* %Element1, i8* %3, %swift.type* %Element1)
  %21 = bitcast %TSq.32* %2 to %swift.opaque*
  %22 = getelementptr inbounds i8*, i8** %Element1.valueWitnesses, i32 7
  %23 = load i8*, i8** %22, align 8, !invariant.load !17
  %storeEnumTagSinglePayload2 = bitcast i8* %23 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload2(%swift.opaque* noalias %21, i32 0, i32 1, %swift.type* %Element1) #9
  call swiftcc void @"$s10BufferView0aB8IteratorV4nextxSgyF6$deferL_yylF"(%T10BufferView0aB8IteratorV* nocapture dereferenceable(16) %1, %swift.type* %Element1)
  br label %32

24:                                               ; preds = %entry
  %25 = bitcast %TSq.32* %2 to %swift.opaque*
  %26 = bitcast %swift.type* %"BufferViewIterator<Element>" to %swift.type**
  %27 = getelementptr inbounds %swift.type*, %swift.type** %26, i64 2
  %Element = load %swift.type*, %swift.type** %27, align 8, !invariant.load !17
  %28 = bitcast %swift.type* %Element to i8***
  %29 = getelementptr inbounds i8**, i8*** %28, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %29, align 8, !invariant.load !17, !dereferenceable !18
  %30 = getelementptr inbounds i8*, i8** %Element.valueWitnesses, i32 7
  %31 = load i8*, i8** %30, align 8, !invariant.load !17
  %storeEnumTagSinglePayload = bitcast i8* %31 to void (%swift.opaque*, i32, i32, %swift.type*)*
  call void %storeEnumTagSinglePayload(%swift.opaque* noalias %25, i32 1, i32 1, %swift.type* %Element) #9
  br label %32

32:                                               ; preds = %14, %19, %24
  ret void
}

define internal swiftcc void @"$s10BufferView0aB8IteratorV4nextxSgyF6$deferL_yylF"(%T10BufferView0aB8IteratorV* nocapture dereferenceable(16) %0, %swift.type* %Element) #0 {
entry:
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  %1 = load i8*, i8** %.curPointer._rawValue, align 8
  %2 = bitcast %swift.type* %Element to i8***
  %3 = getelementptr inbounds i8**, i8*** %2, i64 -1
  %Element.valueWitnesses = load i8**, i8*** %3, align 8, !invariant.load !17, !dereferenceable !18
  %4 = bitcast i8** %Element.valueWitnesses to %swift.vwtable*
  %5 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %4, i32 0, i32 9
  %stride = load i64, i64* %5, align 8, !invariant.load !17
  %6 = getelementptr inbounds i8, i8* %1, i64 %stride
  %.curPointer._rawValue1 = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  store i8* %6, i8** %.curPointer._rawValue1, align 8
  ret void
}

define linkonce_odr hidden swiftcc void @"$s10BufferView0aB8IteratorVyxGStAASt4next7ElementQzSgyFTW"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, %T10BufferView0aB8IteratorV* nocapture swiftself dereferenceable(16) %1, %swift.type* %Self, i8** %SelfWitnessTable) #0 {
entry:
  %2 = bitcast %swift.opaque* %0 to %TSq.32*
  %3 = bitcast %TSq.32* %2 to %swift.opaque*
  call swiftcc void @"$s10BufferView0aB8IteratorV4nextxSgyF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %3, %swift.type* %Self, %T10BufferView0aB8IteratorV* nocapture swiftself dereferenceable(16) %1) #19
  ret void
}

define swiftcc i64 @"$s10BufferView15bufferviewtest1ySiA2AVySiGF"(i8* %0, i64 %1) #0 {
entry:
  %2 = alloca %TSiSg, align 8
  %3 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %4 = extractvalue { i64, i1 } %3, 0
  %5 = extractvalue { i64, i1 } %3, 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %4
  br label %7

7:                                                ; preds = %41, %entry
  %8 = phi i64 [ 0, %entry ], [ %44, %41 ]
  %9 = phi i8* [ %0, %entry ], [ %33, %41 ]
  %10 = bitcast %TSiSg* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9, i8* %10)
  %11 = icmp ult i8* %9, %6
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  br i1 true, label %17, label %25

13:                                               ; preds = %7
  %14 = bitcast %TSiSg* %2 to i64*
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %TSiSg, %TSiSg* %2, i32 0, i32 1
  %16 = bitcast [1 x i8]* %15 to i1*
  store i1 true, i1* %16, align 8
  br label %32

17:                                               ; preds = %12
  %18 = bitcast %TSiSg* %2 to %TSi*
  %19 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %19, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %9, i64 8, i1 false)
  %20 = bitcast i8* %temp_alloc to %TSi*
  %._value2 = getelementptr inbounds %TSi, %TSi* %20, i32 0, i32 0
  %21 = load i64, i64* %._value2, align 8
  call void @llvm.stackrestore(i8* %spsave)
  %._value3 = getelementptr inbounds %TSi, %TSi* %18, i32 0, i32 0
  store i64 %21, i64* %._value3, align 8
  %22 = getelementptr inbounds %TSiSg, %TSiSg* %2, i32 0, i32 1
  %23 = bitcast [1 x i8]* %22 to i1*
  store i1 false, i1* %23, align 8
  %24 = getelementptr inbounds i8, i8* %9, i64 8
  br label %32

25:                                               ; preds = %12
  %26 = bitcast %TSiSg* %2 to %TSi*
  %27 = bitcast i8* %9 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %27, i32 0, i32 0
  %28 = load i64, i64* %._value, align 8
  %._value1 = getelementptr inbounds %TSi, %TSi* %26, i32 0, i32 0
  store i64 %28, i64* %._value1, align 8
  %29 = getelementptr inbounds %TSiSg, %TSiSg* %2, i32 0, i32 1
  %30 = bitcast [1 x i8]* %29 to i1*
  store i1 false, i1* %30, align 8
  %31 = getelementptr inbounds i8, i8* %9, i64 8
  br label %32

32:                                               ; preds = %17, %25, %13
  %33 = phi i8* [ %9, %13 ], [ %31, %25 ], [ %24, %17 ]
  %34 = bitcast %TSiSg* %2 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %TSiSg, %TSiSg* %2, i32 0, i32 1
  %37 = bitcast [1 x i8]* %36 to i1*
  %38 = load i1, i1* %37, align 8
  %39 = bitcast %TSiSg* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 9, i8* %39)
  br i1 %38, label %46, label %40

40:                                               ; preds = %32
  br label %41

41:                                               ; preds = %40
  %42 = phi i64 [ %35, %40 ]
  %43 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %8, i64 %42)
  %44 = extractvalue { i64, i1 } %43, 0
  %45 = extractvalue { i64, i1 } %43, 1
  br label %7

46:                                               ; preds = %32
  ret i64 %8
}

define swiftcc i64 @"$s10BufferView15bufferviewtest2ySiA2AVySiG_SitF"(i8* %0, i64 %1, i64 %2) #0 {
entry:
  %3 = icmp slt i64 %2, 0
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false)
  br i1 %4, label %48, label %5

5:                                                ; preds = %entry
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  br label %16

10:                                               ; preds = %41
  %11 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %18, i64 1)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %51, label %15

15:                                               ; preds = %10
  br label %16

16:                                               ; preds = %15, %5
  %17 = phi i64 [ 0, %5 ], [ %45, %15 ]
  %18 = phi i64 [ 0, %5 ], [ %12, %15 ]
  %19 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %18, i64 8)
  %20 = extractvalue { i64, i1 } %19, 0
  %21 = extractvalue { i64, i1 } %19, 1
  %22 = getelementptr inbounds i8, i8* %0, i64 %20
  %23 = icmp ult i8* %22, %0
  %24 = icmp ult i8* %9, %22
  %25 = or i1 %23, %24
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  br i1 %26, label %49, label %27

27:                                               ; preds = %16
  br i1 true, label %28, label %32

28:                                               ; preds = %27
  %29 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %29, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %22, i64 8, i1 false)
  %30 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %30, i32 0, i32 0
  %31 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  br label %41

32:                                               ; preds = %27
  %33 = ptrtoint i8* %22 to i64
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  %36 = xor i1 %35, true
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = bitcast i8* %22 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %39, i32 0, i32 0
  %40 = load i64, i64* %._value, align 8
  br label %41

41:                                               ; preds = %28, %38
  %42 = phi i64 [ %40, %38 ], [ %31, %28 ]
  %43 = icmp eq i64 %18, %2
  %44 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %17, i64 %42)
  %45 = extractvalue { i64, i1 } %44, 0
  %46 = extractvalue { i64, i1 } %44, 1
  br i1 %43, label %47, label %10

47:                                               ; preds = %41
  ret i64 %45

48:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

49:                                               ; preds = %16
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

50:                                               ; preds = %32
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

51:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferView16bufferviewtest2bySiA2AVySiG_SitF"(i8* %0, i64 %1, i64 %2) #0 {
entry:
  %3 = icmp slt i64 %2, 0
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false)
  br i1 %4, label %48, label %5

5:                                                ; preds = %entry
  %6 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %7 = extractvalue { i64, i1 } %6, 0
  %8 = extractvalue { i64, i1 } %6, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %7
  br label %16

10:                                               ; preds = %41
  %11 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %18, i64 1)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false)
  br i1 %14, label %51, label %15

15:                                               ; preds = %10
  br label %16

16:                                               ; preds = %15, %5
  %17 = phi i64 [ 0, %5 ], [ %45, %15 ]
  %18 = phi i64 [ 0, %5 ], [ %12, %15 ]
  %19 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %18, i64 8)
  %20 = extractvalue { i64, i1 } %19, 0
  %21 = extractvalue { i64, i1 } %19, 1
  %22 = getelementptr inbounds i8, i8* %0, i64 %20
  %23 = icmp ult i8* %22, %0
  %24 = icmp ult i8* %9, %22
  %25 = or i1 %23, %24
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  br i1 %26, label %49, label %27

27:                                               ; preds = %16
  br i1 true, label %28, label %32

28:                                               ; preds = %27
  %29 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %29, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %22, i64 8, i1 false)
  %30 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %30, i32 0, i32 0
  %31 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  br label %41

32:                                               ; preds = %27
  %33 = ptrtoint i8* %22 to i64
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  %36 = xor i1 %35, true
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false)
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = bitcast i8* %22 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %39, i32 0, i32 0
  %40 = load i64, i64* %._value, align 8
  br label %41

41:                                               ; preds = %28, %38
  %42 = phi i64 [ %40, %38 ], [ %31, %28 ]
  %43 = icmp eq i64 %18, %2
  %44 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %17, i64 %42)
  %45 = extractvalue { i64, i1 } %44, 0
  %46 = extractvalue { i64, i1 } %44, 1
  br i1 %43, label %47, label %10

47:                                               ; preds = %41
  ret i64 %45

48:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

49:                                               ; preds = %16
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

50:                                               ; preds = %32
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

51:                                               ; preds = %10
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferView16bufferviewtest2cySiA2AVySiG_SitF"(i8* %0, i64 %1, i64 %2) #0 {
entry:
  %3 = icmp slt i64 %1, %2
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false)
  br i1 %4, label %51, label %5

5:                                                ; preds = %entry
  %6 = icmp slt i64 %2, 0
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false)
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = getelementptr inbounds i8, i8* %0, i64 %10
  br label %19

13:                                               ; preds = %44
  %14 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %21, i64 1)
  %15 = extractvalue { i64, i1 } %14, 0
  %16 = extractvalue { i64, i1 } %14, 1
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %55, label %18

18:                                               ; preds = %13
  br label %19

19:                                               ; preds = %18, %8
  %20 = phi i64 [ 0, %8 ], [ %48, %18 ]
  %21 = phi i64 [ 0, %8 ], [ %15, %18 ]
  %22 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %21, i64 8)
  %23 = extractvalue { i64, i1 } %22, 0
  %24 = extractvalue { i64, i1 } %22, 1
  %25 = getelementptr inbounds i8, i8* %0, i64 %23
  %26 = icmp ult i8* %25, %0
  %27 = icmp ult i8* %12, %25
  %28 = or i1 %26, %27
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %53, label %30

30:                                               ; preds = %19
  br i1 true, label %31, label %35

31:                                               ; preds = %30
  %32 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %32, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %25, i64 8, i1 false)
  %33 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %33, i32 0, i32 0
  %34 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  br label %44

35:                                               ; preds = %30
  %36 = ptrtoint i8* %25 to i64
  %37 = and i64 %36, 7
  %38 = icmp eq i64 %37, 0
  %39 = xor i1 %38, true
  %40 = call i1 @llvm.expect.i1(i1 %39, i1 false)
  br i1 %40, label %54, label %41

41:                                               ; preds = %35
  %42 = bitcast i8* %25 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %42, i32 0, i32 0
  %43 = load i64, i64* %._value, align 8
  br label %44

44:                                               ; preds = %31, %41
  %45 = phi i64 [ %43, %41 ], [ %34, %31 ]
  %46 = icmp eq i64 %21, %2
  %47 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 %45)
  %48 = extractvalue { i64, i1 } %47, 0
  %49 = extractvalue { i64, i1 } %47, 1
  br i1 %46, label %50, label %13

50:                                               ; preds = %44
  ret i64 %48

51:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

52:                                               ; preds = %5
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

53:                                               ; preds = %19
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

54:                                               ; preds = %35
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

55:                                               ; preds = %13
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferView15bufferviewtest3ySiA2AVySiGF"(i8* %0, i64 %1) #0 {
entry:
  %2 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %3 = extractvalue { i64, i1 } %2, 0
  %4 = extractvalue { i64, i1 } %2, 1
  %5 = getelementptr inbounds i8, i8* %0, i64 %3
  %6 = ptrtoint i8* %5 to i64
  br label %7

7:                                                ; preds = %47, %entry
  %8 = phi i64 [ 0, %entry ], [ %50, %47 ]
  %9 = phi i8* [ %0, %entry ], [ %31, %47 ]
  %10 = ptrtoint i8* %9 to i64
  %11 = sub i64 %6, %10
  %12 = sdiv i64 %11, 1
  %13 = sdiv i64 %12, 8
  %14 = srem i64 %12, 8
  %15 = icmp eq i64 %14, 0
  %16 = xor i1 %15, true
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %53, label %18

18:                                               ; preds = %7
  %19 = icmp eq i64 %13, 0
  br i1 %19, label %52, label %20

20:                                               ; preds = %18
  %21 = icmp ult i8* %5, %0
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  br i1 %22, label %54, label %23

23:                                               ; preds = %20
  %24 = icmp ult i8* %9, %0
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false)
  br i1 %25, label %55, label %26

26:                                               ; preds = %23
  %27 = icmp ult i8* %9, %5
  %28 = xor i1 %27, true
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %56, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %9, i64 8
  %32 = icmp ult i8* %5, %9
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %57, label %34

34:                                               ; preds = %30
  br i1 true, label %35, label %39

35:                                               ; preds = %34
  %36 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %36, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %9, i64 8, i1 false)
  %37 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %37, i32 0, i32 0
  %38 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  br label %47

39:                                               ; preds = %34
  %40 = and i64 %10, 7
  %41 = icmp eq i64 %40, 0
  %42 = xor i1 %41, true
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %58, label %44

44:                                               ; preds = %39
  %45 = bitcast i8* %9 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %45, i32 0, i32 0
  %46 = load i64, i64* %._value, align 8
  br label %47

47:                                               ; preds = %35, %44
  %48 = phi i64 [ %46, %44 ], [ %38, %35 ]
  %49 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %8, i64 %48)
  %50 = extractvalue { i64, i1 } %49, 0
  %51 = extractvalue { i64, i1 } %49, 1
  br label %7

52:                                               ; preds = %18
  ret i64 %8

53:                                               ; preds = %7
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

54:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

55:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

56:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

57:                                               ; preds = %30
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

58:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define swiftcc void @"$s10BufferView9blackholeyyxzlF"(%swift.opaque* nocapture %0, %swift.type* %T) #1 {
entry:
  ret void
}

define swiftcc i1 @"$s10BufferView15bufferviewtest4ySbA2AVySiG_AA0aB5IndexVySiGtF"(i8* %0, i64 %1, i8* %2) #0 {
entry:
  %3 = icmp ult i8* %2, %0
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %5 = extractvalue { i64, i1 } %4, 0
  %6 = extractvalue { i64, i1 } %4, 1
  %7 = getelementptr inbounds i8, i8* %0, i64 %5
  %8 = icmp ult i8* %7, %2
  %9 = or i1 %3, %8
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false)
  br i1 %10, label %32, label %11

11:                                               ; preds = %entry
  br i1 true, label %12, label %19

12:                                               ; preds = %11
  %13 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %13, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %2, i64 8, i1 false)
  %14 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %14, i32 0, i32 0
  %15 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  %16 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave2 = call i8* @llvm.stacksave()
  %temp_alloc3 = alloca i8, i64 %16, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc3, i8* %2, i64 8, i1 false)
  %17 = bitcast i8* %temp_alloc3 to %TSi*
  %._value4 = getelementptr inbounds %TSi, %TSi* %17, i32 0, i32 0
  %18 = load i64, i64* %._value4, align 8
  call void @llvm.stackrestore(i8* %spsave2)
  br label %28

19:                                               ; preds = %11
  %20 = ptrtoint i8* %2 to i64
  %21 = and i64 %20, 7
  %22 = icmp eq i64 %21, 0
  %23 = xor i1 %22, true
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %33, label %25

25:                                               ; preds = %19
  %26 = bitcast i8* %2 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %26, i32 0, i32 0
  %27 = load i64, i64* %._value, align 8
  br label %28

28:                                               ; preds = %12, %25
  %29 = phi i64 [ %27, %25 ], [ %18, %12 ]
  %30 = phi i64 [ %27, %25 ], [ %15, %12 ]
  %31 = icmp eq i64 %30, %29
  ret i1 %31

32:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

33:                                               ; preds = %19
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc i64 @"$s10BufferView15bufferviewtest5ySiA2AVySiG_AA0aB5IndexVySiGtF"(i8* %0, i64 %1, i8* %2) #0 {
entry:
  %3 = icmp ult i8* %2, %0
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %5 = extractvalue { i64, i1 } %4, 0
  %6 = extractvalue { i64, i1 } %4, 1
  %7 = getelementptr inbounds i8, i8* %0, i64 %5
  %8 = icmp ult i8* %7, %2
  %9 = or i1 %3, %8
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false)
  br i1 %10, label %34, label %11

11:                                               ; preds = %entry
  br i1 true, label %12, label %19

12:                                               ; preds = %11
  %13 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %13, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %2, i64 8, i1 false)
  %14 = bitcast i8* %temp_alloc to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %14, i32 0, i32 0
  %15 = load i64, i64* %._value1, align 8
  call void @llvm.stackrestore(i8* %spsave)
  %16 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave2 = call i8* @llvm.stacksave()
  %temp_alloc3 = alloca i8, i64 %16, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc3, i8* %2, i64 8, i1 false)
  %17 = bitcast i8* %temp_alloc3 to %TSi*
  %._value4 = getelementptr inbounds %TSi, %TSi* %17, i32 0, i32 0
  %18 = load i64, i64* %._value4, align 8
  call void @llvm.stackrestore(i8* %spsave2)
  br label %28

19:                                               ; preds = %11
  %20 = ptrtoint i8* %2 to i64
  %21 = and i64 %20, 7
  %22 = icmp eq i64 %21, 0
  %23 = xor i1 %22, true
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %35, label %25

25:                                               ; preds = %19
  %26 = bitcast i8* %2 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %26, i32 0, i32 0
  %27 = load i64, i64* %._value, align 8
  br label %28

28:                                               ; preds = %12, %25
  %29 = phi i64 [ %27, %25 ], [ %18, %12 ]
  %30 = phi i64 [ %27, %25 ], [ %15, %12 ]
  %31 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %30, i64 %29)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  ret i64 %32

34:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

35:                                               ; preds = %19
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView15bufferviewtest6yyAA07MutableaB0VySiG_AEtF"(i8* %0, i64 %1, i8* %2, i64 %3) #0 {
entry:
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %5 = extractvalue { i64, i1 } %4, 0
  %6 = extractvalue { i64, i1 } %4, 1
  %7 = getelementptr inbounds i8, i8* %0, i64 %5
  %8 = ptrtoint i8* %7 to i64
  br label %9

9:                                                ; preds = %99, %entry
  %10 = phi i8* [ %0, %entry ], [ %32, %99 ]
  %11 = ptrtoint i8* %10 to i64
  %12 = sub i64 %8, %11
  %13 = sdiv i64 %12, 1
  %14 = sdiv i64 %13, 8
  %15 = srem i64 %13, 8
  %16 = icmp eq i64 %15, 0
  %17 = xor i1 %16, true
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false)
  br i1 %18, label %102, label %19

19:                                               ; preds = %9
  %20 = icmp eq i64 %14, 0
  br i1 %20, label %101, label %21

21:                                               ; preds = %19
  %22 = icmp ult i8* %7, %0
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false)
  br i1 %23, label %103, label %24

24:                                               ; preds = %21
  %25 = icmp ult i8* %10, %0
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false)
  br i1 %26, label %104, label %27

27:                                               ; preds = %24
  %28 = icmp ult i8* %10, %7
  %29 = xor i1 %28, true
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  br i1 %30, label %105, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, i8* %10, i64 8
  %33 = ptrtoint i8* %2 to i64
  %34 = sub i64 %11, %33
  %35 = sdiv i64 %34, 1
  %36 = sdiv i64 %35, 8
  %37 = srem i64 %35, 8
  %38 = icmp eq i64 %37, 0
  %39 = xor i1 %38, true
  %40 = call i1 @llvm.expect.i1(i1 %39, i1 false)
  br i1 %40, label %106, label %41

41:                                               ; preds = %31
  %42 = icmp slt i64 %36, 0
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false)
  br i1 %43, label %107, label %44

44:                                               ; preds = %41
  %45 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 8)
  %46 = extractvalue { i64, i1 } %45, 0
  %47 = extractvalue { i64, i1 } %45, 1
  %48 = getelementptr inbounds i8, i8* %2, i64 %46
  %49 = ptrtoint i8* %48 to i64
  %50 = sub i64 %49, %11
  %51 = sdiv i64 %50, 1
  %52 = sdiv i64 %51, 8
  %53 = srem i64 %51, 8
  %54 = icmp eq i64 %53, 0
  %55 = xor i1 %54, true
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false)
  br i1 %56, label %108, label %57

57:                                               ; preds = %44
  %58 = icmp slt i64 0, %52
  %59 = xor i1 %58, true
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false)
  br i1 %60, label %109, label %61

61:                                               ; preds = %57
  br i1 true, label %62, label %66

62:                                               ; preds = %61
  %63 = call i64 @llvm.umax.i64(i64 1, i64 8)
  %spsave = call i8* @llvm.stacksave()
  %temp_alloc = alloca i8, i64 %63, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp_alloc, i8* %10, i64 8, i1 false)
  %64 = bitcast i8* %temp_alloc to %TSi*
  %._value2 = getelementptr inbounds %TSi, %TSi* %64, i32 0, i32 0
  %65 = load i64, i64* %._value2, align 8
  call void @llvm.stackrestore(i8* %spsave)
  br label %74

66:                                               ; preds = %61
  %67 = and i64 %11, 7
  %68 = icmp eq i64 %67, 0
  %69 = xor i1 %68, true
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %110, label %71

71:                                               ; preds = %66
  %72 = bitcast i8* %10 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %72, i32 0, i32 0
  %73 = load i64, i64* %._value, align 8
  br label %74

74:                                               ; preds = %62, %71
  %75 = phi i64 [ %73, %71 ], [ %65, %62 ]
  %76 = ptrtoint i8* %0 to i64
  %77 = sub i64 %11, %76
  %78 = sdiv i64 %77, 1
  %79 = sdiv i64 %78, 8
  %80 = srem i64 %78, 8
  %81 = icmp eq i64 %80, 0
  %82 = xor i1 %81, true
  %83 = call i1 @llvm.expect.i1(i1 %82, i1 false)
  br i1 %83, label %111, label %84

84:                                               ; preds = %74
  %85 = icmp slt i64 %79, 0
  %86 = call i1 @llvm.expect.i1(i1 %85, i1 false)
  br i1 %86, label %112, label %87

87:                                               ; preds = %84
  %88 = icmp slt i64 0, %14
  %89 = xor i1 %88, true
  %90 = call i1 @llvm.expect.i1(i1 %89, i1 false)
  br i1 %90, label %113, label %91

91:                                               ; preds = %87
  br i1 true, label %92, label %93

92:                                               ; preds = %91
  br label %99

93:                                               ; preds = %91
  %94 = and i64 %11, 7
  %95 = icmp eq i64 %94, 0
  %96 = xor i1 %95, true
  %97 = call i1 @llvm.expect.i1(i1 %96, i1 false)
  br i1 %97, label %114, label %98

98:                                               ; preds = %93
  br label %99

99:                                               ; preds = %92, %98
  %100 = bitcast i8* %10 to %TSi*
  %._value1 = getelementptr inbounds %TSi, %TSi* %100, i32 0, i32 0
  store i64 %75, i64* %._value1, align 8
  br label %9

101:                                              ; preds = %19
  ret void

102:                                              ; preds = %9
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

103:                                              ; preds = %21
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

104:                                              ; preds = %24
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

105:                                              ; preds = %27
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

106:                                              ; preds = %31
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

107:                                              ; preds = %41
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

108:                                              ; preds = %44
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

109:                                              ; preds = %57
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable

110:                                              ; preds = %66
  call void asm sideeffect "", "n"(i32 8)
  call void @llvm.trap()
  unreachable

111:                                              ; preds = %74
  call void asm sideeffect "", "n"(i32 9)
  call void @llvm.trap()
  unreachable

112:                                              ; preds = %84
  call void asm sideeffect "", "n"(i32 10)
  call void @llvm.trap()
  unreachable

113:                                              ; preds = %87
  call void asm sideeffect "", "n"(i32 11)
  call void @llvm.trap()
  unreachable

114:                                              ; preds = %93
  call void asm sideeffect "", "n"(i32 12)
  call void @llvm.trap()
  unreachable
}

define swiftcc void @"$s10BufferView15bufferviewtest7yyAA07MutableaB0VySiGF"(i8* %0, i64 %1) #0 {
entry:
  %2 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 8)
  %3 = extractvalue { i64, i1 } %2, 0
  %4 = extractvalue { i64, i1 } %2, 1
  %5 = getelementptr inbounds i8, i8* %0, i64 %3
  %6 = ptrtoint i8* %5 to i64
  br label %7

7:                                                ; preds = %54, %entry
  %8 = phi i8* [ %0, %entry ], [ %30, %54 ]
  %9 = ptrtoint i8* %8 to i64
  %10 = sub i64 %6, %9
  %11 = sdiv i64 %10, 1
  %12 = sdiv i64 %11, 8
  %13 = srem i64 %11, 8
  %14 = icmp eq i64 %13, 0
  %15 = xor i1 %14, true
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  br i1 %16, label %61, label %17

17:                                               ; preds = %7
  %18 = icmp eq i64 %12, 0
  br i1 %18, label %60, label %19

19:                                               ; preds = %17
  %20 = icmp ult i8* %5, %0
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false)
  br i1 %21, label %62, label %22

22:                                               ; preds = %19
  %23 = icmp ult i8* %8, %0
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %63, label %25

25:                                               ; preds = %22
  %26 = icmp ult i8* %8, %5
  %27 = xor i1 %26, true
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false)
  br i1 %28, label %64, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds i8, i8* %8, i64 8
  %31 = ptrtoint i8* %0 to i64
  %32 = sub i64 %9, %31
  %33 = sdiv i64 %32, 1
  %34 = sdiv i64 %33, 8
  %35 = srem i64 %33, 8
  %36 = icmp eq i64 %35, 0
  %37 = xor i1 %36, true
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false)
  br i1 %38, label %65, label %39

39:                                               ; preds = %29
  %40 = icmp slt i64 %34, 0
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %66, label %42

42:                                               ; preds = %39
  %43 = icmp slt i64 0, %12
  %44 = xor i1 %43, true
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  br i1 %45, label %67, label %46

46:                                               ; preds = %42
  br i1 true, label %47, label %48

47:                                               ; preds = %46
  br label %54

48:                                               ; preds = %46
  %49 = and i64 %9, 7
  %50 = icmp eq i64 %49, 0
  %51 = xor i1 %50, true
  %52 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  br i1 %52, label %68, label %53

53:                                               ; preds = %48
  br label %54

54:                                               ; preds = %47, %53
  %55 = bitcast i8* %8 to %TSi*
  %._value = getelementptr inbounds %TSi, %TSi* %55, i32 0, i32 0
  %56 = load i64, i64* %._value, align 8
  %57 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %56, i64 1)
  %58 = extractvalue { i64, i1 } %57, 0
  %59 = extractvalue { i64, i1 } %57, 1
  %._value1 = getelementptr inbounds %TSi, %TSi* %55, i32 0, i32 0
  store i64 %58, i64* %._value1, align 8
  br label %7

60:                                               ; preds = %17
  ret void

61:                                               ; preds = %7
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

62:                                               ; preds = %19
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

63:                                               ; preds = %22
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

64:                                               ; preds = %25
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

65:                                               ; preds = %29
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

66:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

67:                                               ; preds = %42
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable

68:                                               ; preds = %48
  call void asm sideeffect "", "n"(i32 7)
  call void @llvm.trap()
  unreachable
}

define swiftcc i8* @"$s10BufferView09OutputRawA0V11baseAddressSvvg"(i8* %0, i64 %1) #0 {
entry:
  ret i8* %0
}

define swiftcc i64 @"$s10BufferView09OutputRawA0V5countSivg"(i8* %0, i64 %1) #0 {
entry:
  ret i64 %1
}

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V11baseAddress5countACSv_SitcfC"(i8* %0, i64 %1) #0 {
entry:
  %2 = insertvalue { i8*, i64 } undef, i8* %0, 0
  %3 = insertvalue { i8*, i64 } %2, i64 %1, 1
  ret { i8*, i64 } %3
}

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V16initializeMemory2as9repeatingAA07MutableaB0VyxGxm_xtlF"(%swift.type* %0, %swift.opaque* noalias nocapture %1, i8* %2, i64 %3, %swift.type* %T) #0 {
entry:
  %4 = alloca %T10BufferView09OutputRawA0V, align 8
  %5 = bitcast %swift.type* %T to i8***
  %6 = getelementptr inbounds i8**, i8*** %5, i64 -1
  %T.valueWitnesses = load i8**, i8*** %6, align 8, !invariant.load !17, !dereferenceable !18
  %7 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %8 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %7, i32 0, i32 9
  %stride = load i64, i64* %8, align 8, !invariant.load !17
  %9 = icmp eq i64 %stride, 0
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false)
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false)
  br i1 %11, label %40, label %12

12:                                               ; preds = %entry
  %13 = icmp eq i64 %3, -9223372036854775808
  br i1 %13, label %14, label %19

14:                                               ; preds = %12
  %15 = icmp eq i64 %stride, -1
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false)
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %43, label %18

18:                                               ; preds = %14
  br label %20

19:                                               ; preds = %12
  br label %20

20:                                               ; preds = %18, %19
  %21 = phi i1 [ false, %19 ], [ %15, %18 ]
  %22 = sdiv i64 %3, %stride
  %23 = call i1 @llvm.expect.i1(i1 %21, i1 false)
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false)
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = srem i64 %3, %stride
  %27 = icmp eq i64 %26, 0
  %28 = xor i1 %27, true
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  br i1 %29, label %42, label %30

30:                                               ; preds = %25
  %31 = call swiftcc i8* @"$sSv16initializeMemory2as9repeating5countSpyxGxm_xSitlF"(%swift.type* %T, %swift.opaque* noalias nocapture %1, i64 %22, i8* %2, %swift.type* %T)
  %32 = bitcast %T10BufferView09OutputRawA0V* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %32)
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %4, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  store i8* %2, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %4, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %33 = bitcast %T10BufferView09OutputRawA0V* %4 to %swift.opaque*
  %34 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %31, i64 %22, %swift.opaque* noalias nocapture %33, %swift.type* %T, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %35 = extractvalue { i8*, i64 } %34, 0
  %36 = extractvalue { i8*, i64 } %34, 1
  %37 = bitcast %T10BufferView09OutputRawA0V* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %37)
  %38 = insertvalue { i8*, i64 } undef, i8* %35, 0
  %39 = insertvalue { i8*, i64 } %38, i64 %36, 1
  ret { i8*, i64 } %39

40:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

41:                                               ; preds = %20
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

42:                                               ; preds = %25
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

43:                                               ; preds = %14
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i8* @"$sSv16initializeMemory2as9repeating5countSpyxGxm_xSitlF"(%swift.type*, %swift.opaque* noalias nocapture, i64, i8*, %swift.type*) #0

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V16initializeMemory2as4from8IteratorQz9unwritten_AA07MutableaB0Vy7ElementQzG11initializedtAMm_xtSTRzlF"(%swift.opaque* noalias nocapture %0, %swift.type* %1, %swift.opaque* noalias nocapture %2, i8* %3, i64 %4, %swift.type* %S, i8** %S.Sequence) #0 {
entry:
  %5 = alloca %T10BufferView09OutputRawA0V, align 8
  %6 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 255, i8** %S.Sequence, %swift.type* %S, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s7ElementSTTl") #13
  %S.Element = extractvalue %swift.metadata_response %6, 0
  %7 = extractvalue %swift.metadata_response %6, 1
  %8 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %S.Element) #10
  %9 = extractvalue %swift.metadata_response %8, 0
  %10 = bitcast %swift.type* %9 to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 8
  %size = load i64, i64* %13, align 8, !invariant.load !17
  %14 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %14)
  %15 = bitcast i8* %14 to %TSq*
  %16 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %S.Element) #7
  %17 = extractvalue %swift.metadata_response %16, 0
  %18 = bitcast %swift.type* %17 to i8***
  %19 = getelementptr inbounds i8**, i8*** %18, i64 -1
  %.valueWitnesses1 = load i8**, i8*** %19, align 8, !invariant.load !17, !dereferenceable !18
  %20 = bitcast i8** %.valueWitnesses1 to %swift.vwtable*
  %21 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %20, i32 0, i32 8
  %size2 = load i64, i64* %21, align 8, !invariant.load !17
  %22 = alloca i8, i64 %size2, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %22)
  %23 = bitcast i8* %22 to %swift.opaque*
  %24 = bitcast %swift.type* %S to i8***
  %25 = getelementptr inbounds i8**, i8*** %24, i64 -1
  %S.valueWitnesses = load i8**, i8*** %25, align 8, !invariant.load !17, !dereferenceable !18
  %26 = bitcast i8** %S.valueWitnesses to %swift.vwtable*
  %27 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %26, i32 0, i32 8
  %size3 = load i64, i64* %27, align 8, !invariant.load !17
  %28 = alloca i8, i64 %size3, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %28)
  %29 = bitcast i8* %28 to %swift.opaque*
  %30 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 0, i8** %S.Sequence, %swift.type* %S, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s8IteratorSTTl") #13
  %S.Iterator = extractvalue %swift.metadata_response %30, 0
  %31 = bitcast %swift.type* %S.Iterator to i8***
  %32 = getelementptr inbounds i8**, i8*** %31, i64 -1
  %S.Iterator.valueWitnesses = load i8**, i8*** %32, align 8, !invariant.load !17, !dereferenceable !18
  %33 = bitcast i8** %S.Iterator.valueWitnesses to %swift.vwtable*
  %34 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %33, i32 0, i32 8
  %size4 = load i64, i64* %34, align 8, !invariant.load !17
  %35 = alloca i8, i64 %size4, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %35)
  %36 = bitcast i8* %35 to %swift.opaque*
  %37 = bitcast i8** %.valueWitnesses1 to %swift.vwtable*
  %38 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %37, i32 0, i32 9
  %stride = load i64, i64* %38, align 8, !invariant.load !17
  %39 = icmp eq i64 %stride, 0
  %40 = call i1 @llvm.expect.i1(i1 %39, i1 false)
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  br i1 %41, label %118, label %42

42:                                               ; preds = %entry
  %43 = icmp eq i64 %4, -9223372036854775808
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = icmp eq i64 %stride, -1
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  br i1 %47, label %122, label %48

48:                                               ; preds = %44
  br label %50

49:                                               ; preds = %42
  br label %50

50:                                               ; preds = %48, %49
  %51 = phi i1 [ false, %49 ], [ %45, %48 ]
  %52 = sdiv i64 %4, %stride
  %53 = call i1 @llvm.expect.i1(i1 %51, i1 false)
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false)
  br i1 %54, label %119, label %55

55:                                               ; preds = %50
  %56 = srem i64 %4, %stride
  %57 = icmp eq i64 %56, 0
  %58 = xor i1 %57, true
  %59 = call i1 @llvm.expect.i1(i1 %58, i1 false)
  br i1 %59, label %120, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds i8*, i8** %S.valueWitnesses, i32 2
  %62 = load i8*, i8** %61, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %62 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %63 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %29, %swift.opaque* noalias %2, %swift.type* %S) #9
  call swiftcc void @"$sST12makeIterator0B0QzyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %36, %swift.opaque* noalias nocapture swiftself %29, %swift.type* %S, i8** %S.Sequence)
  %64 = icmp slt i64 0, %52
  br i1 %64, label %65, label %98

65:                                               ; preds = %60
  br label %66

66:                                               ; preds = %93, %65
  %67 = phi i64 [ 0, %65 ], [ %87, %93 ]
  %68 = phi i8* [ %3, %65 ], [ %85, %93 ]
  %S.Iterator.IteratorProtocol = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %S.Sequence, %swift.type* %S, %swift.type* %S.Iterator, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$sST8IteratorST_StTn") #13
  %69 = bitcast %TSq* %15 to %TSq.40*
  %70 = bitcast %TSq.40* %69 to %swift.opaque*
  call swiftcc void @"$sSt4next7ElementQzSgyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %70, %swift.opaque* nocapture swiftself %36, %swift.type* %S.Iterator, i8** %S.Iterator.IteratorProtocol)
  %71 = bitcast %TSq* %15 to %swift.opaque*
  %72 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 6
  %73 = load i8*, i8** %72, align 8, !invariant.load !17
  %getEnumTagSinglePayload = bitcast i8* %73 to i32 (%swift.opaque*, i32, %swift.type*)*
  %74 = call i32 %getEnumTagSinglePayload(%swift.opaque* noalias %71, i32 1, %swift.type* %17) #8
  %75 = icmp ne i32 %74, 1
  br i1 %75, label %77, label %94

76:                                               ; No predecessors!
  unreachable

77:                                               ; preds = %66
  %78 = bitcast %TSq* %15 to %swift.opaque*
  %79 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 4
  %80 = load i8*, i8** %79, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %80 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %81 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %23, %swift.opaque* noalias %78, %swift.type* %17) #9
  %82 = call swiftcc i8* @"$sSv16initializeMemory2as2toSpyxGxm_xtlF"(%swift.type* %17, %swift.opaque* noalias nocapture %23, i8* %68, %swift.type* %17)
  %83 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 1
  %84 = load i8*, i8** %83, align 8, !invariant.load !17
  %destroy7 = bitcast i8* %84 to void (%swift.opaque*, %swift.type*)*
  call void %destroy7(%swift.opaque* noalias %23, %swift.type* %17) #9
  %85 = getelementptr inbounds i8, i8* %68, i64 %stride
  %86 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %67, i64 1)
  %87 = extractvalue { i64, i1 } %86, 0
  %88 = extractvalue { i64, i1 } %86, 1
  %89 = call i1 @llvm.expect.i1(i1 %88, i1 false)
  br i1 %89, label %121, label %90

90:                                               ; preds = %77
  %91 = icmp slt i64 %87, %52
  br i1 %91, label %93, label %92

92:                                               ; preds = %90
  br label %99

93:                                               ; preds = %90
  br label %66

94:                                               ; preds = %66
  %95 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %96 = load i8*, i8** %95, align 8, !invariant.load !17
  %destroy6 = bitcast i8* %96 to void (%swift.opaque*, %swift.type*)*
  %97 = bitcast %TSq* %15 to %swift.opaque*
  call void %destroy6(%swift.opaque* noalias %97, %swift.type* %9) #9
  br label %99

98:                                               ; preds = %60
  br label %99

99:                                               ; preds = %92, %94, %98
  %100 = phi i64 [ 0, %98 ], [ %67, %94 ], [ %87, %92 ]
  %101 = getelementptr inbounds i8*, i8** %S.Iterator.valueWitnesses, i32 2
  %102 = load i8*, i8** %101, align 8, !invariant.load !17
  %initializeWithCopy5 = bitcast i8* %102 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %103 = call %swift.opaque* %initializeWithCopy5(%swift.opaque* noalias %0, %swift.opaque* noalias %36, %swift.type* %S.Iterator) #9
  %104 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %104)
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  store i8* %3, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %105 = bitcast %T10BufferView09OutputRawA0V* %5 to %swift.opaque*
  %106 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %3, i64 %100, %swift.opaque* noalias nocapture %105, %swift.type* %17, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %107 = extractvalue { i8*, i64 } %106, 0
  %108 = extractvalue { i8*, i64 } %106, 1
  %109 = getelementptr inbounds i8*, i8** %S.Iterator.valueWitnesses, i32 1
  %110 = load i8*, i8** %109, align 8, !invariant.load !17
  %destroy = bitcast i8* %110 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %36, %swift.type* %S.Iterator) #9
  %111 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %111)
  %112 = bitcast %swift.opaque* %36 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %112)
  %113 = bitcast %swift.opaque* %29 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %113)
  %114 = bitcast %swift.opaque* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %114)
  %115 = bitcast %TSq* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %115)
  %116 = insertvalue { i8*, i64 } undef, i8* %107, 0
  %117 = insertvalue { i8*, i64 } %116, i64 %108, 1
  ret { i8*, i64 } %117

118:                                              ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

119:                                              ; preds = %50
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

120:                                              ; preds = %55
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

121:                                              ; preds = %77
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

122:                                              ; preds = %44
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc i8* @"$sSv16initializeMemory2as2toSpyxGxm_xtlF"(%swift.type* %0, %swift.opaque* noalias nocapture %1, i8* %2, %swift.type* %T) #0 {
entry:
  %3 = bitcast i8* %2 to %swift.opaque*
  %4 = bitcast %swift.type* %T to i8***
  %5 = getelementptr inbounds i8**, i8*** %4, i64 -1
  %T.valueWitnesses = load i8**, i8*** %5, align 8, !invariant.load !17, !dereferenceable !18
  %6 = getelementptr inbounds i8*, i8** %T.valueWitnesses, i32 2
  %7 = load i8*, i8** %6, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %7 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %8 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %3, %swift.opaque* noalias %1, %swift.type* %T) #9
  ret i8* %2
}

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlF"(%swift.type* %0, %swift.opaque* noalias nocapture %1, i8* %2, i64 %3, %swift.type* %C, i8** %C.Collection) #0 {
entry:
  %4 = alloca %TSq.8, align 8
  %swifterror = alloca swifterror %swift.error*, align 8
  store %swift.error* null, %swift.error** %swifterror, align 8
  %5 = alloca %T10BufferView09OutputRawA0V, align 8
  %6 = getelementptr inbounds i8*, i8** %C.Collection, i32 1
  %7 = load i8*, i8** %6, align 8, !invariant.load !17
  %C.Sequence = bitcast i8* %7 to i8**
  %8 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 255, i8** %C.Sequence, %swift.type* %C, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s7ElementSTTl") #13
  %C.Element = extractvalue %swift.metadata_response %8, 0
  %9 = extractvalue %swift.metadata_response %8, 1
  %10 = call swiftcc %swift.metadata_response @"$sSqMa"(i64 0, %swift.type* %C.Element) #10
  %11 = extractvalue %swift.metadata_response %10, 0
  %12 = bitcast %swift.type* %11 to i8***
  %13 = getelementptr inbounds i8**, i8*** %12, i64 -1
  %.valueWitnesses = load i8**, i8*** %13, align 8, !invariant.load !17, !dereferenceable !18
  %14 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %15 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %14, i32 0, i32 8
  %size = load i64, i64* %15, align 8, !invariant.load !17
  %16 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %16)
  %17 = bitcast i8* %16 to %TSq.9*
  %18 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %18)
  %19 = bitcast i8* %18 to %TSq.9*
  %20 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 0, i8** %C.Sequence, %swift.type* %C, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s8IteratorSTTl") #13
  %C.Iterator = extractvalue %swift.metadata_response %20, 0
  %21 = bitcast %swift.type* %C.Iterator to i8***
  %22 = getelementptr inbounds i8**, i8*** %21, i64 -1
  %C.Iterator.valueWitnesses = load i8**, i8*** %22, align 8, !invariant.load !17, !dereferenceable !18
  %23 = bitcast i8** %C.Iterator.valueWitnesses to %swift.vwtable*
  %24 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %23, i32 0, i32 8
  %size1 = load i64, i64* %24, align 8, !invariant.load !17
  %25 = alloca i8, i64 %size1, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %25)
  %26 = bitcast i8* %25 to %swift.opaque*
  %27 = bitcast %TSq.8* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %27)
  %28 = alloca i8, i64 48, align 16
  %29 = bitcast i8* %28 to %swift.opaque*
  %30 = bitcast %swift.opaque* %29 to <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>*
  %31 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>* %30, i32 0, i32 1
  %32 = bitcast [16 x i8]* %31 to %swift.type**
  store %swift.type* %C, %swift.type** %32, align 8
  %33 = getelementptr inbounds %swift.type*, %swift.type** %32, i32 1
  %34 = bitcast %swift.type** %33 to i8***
  store i8** %C.Collection, i8*** %34, align 8
  %35 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>* %30, i32 0, i32 2
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %35, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  store i8* %2, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %35, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %3, i64* %.count._value, align 8
  %36 = bitcast %TSq.8* %4 to %TSq.41*
  %37 = call swiftcc %swift.metadata_response @"$sSpMa"(i64 255, %swift.type* %C.Element) #10
  %38 = extractvalue %swift.metadata_response %37, 0
  %39 = extractvalue %swift.metadata_response %37, 1
  %40 = call swiftcc %swift.metadata_response @swift_getTupleTypeMetadata2(i64 0, %swift.type* %38, %swift.type* @"$sSiN", i8* getelementptr inbounds ([12 x i8], [12 x i8]* @".str.11.base count ", i64 0, i64 0), i8** null) #7
  %41 = extractvalue %swift.metadata_response %40, 0
  %42 = bitcast %TSq.41* %36 to %swift.opaque*
  call swiftcc void @"$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %42, i8* bitcast (void (<{ %TSp, %TSi }>*, i64, i64, %swift.refcounted*, %swift.error**)* @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlFSpyAJG4base_Si5counttSRyAJGXEfU_TA" to i8*), %swift.opaque* %29, %swift.type* %41, %swift.opaque* noalias nocapture swiftself %1, %swift.error** noalias nocapture swifterror dereferenceable(8) %swifterror, %swift.type* %C, i8** %C.Sequence)
  %43 = bitcast %TSq.8* %4 to { i64, i64 }*
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %TSq.8* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %48)
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %entry
  %51 = inttoptr i64 %45 to i8*
  br label %52

52:                                               ; preds = %50
  %53 = phi i8* [ %51, %50 ]
  %54 = phi i64 [ %47, %50 ]
  %55 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %55)
  %.baseAddress4 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 0
  %.baseAddress4._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress4, i32 0, i32 0
  store i8* %2, i8** %.baseAddress4._rawValue, align 8
  %.count5 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 1
  %.count5._value = getelementptr inbounds %TSi, %TSi* %.count5, i32 0, i32 0
  store i64 %3, i64* %.count5._value, align 8
  %56 = bitcast %T10BufferView09OutputRawA0V* %5 to %swift.opaque*
  %57 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %C.Element) #7
  %58 = extractvalue %swift.metadata_response %57, 0
  %59 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %53, i64 %54, %swift.opaque* noalias nocapture %56, %swift.type* %58, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %60 = extractvalue { i8*, i64 } %59, 0
  %61 = extractvalue { i8*, i64 } %59, 1
  %62 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %62)
  br label %96

63:                                               ; preds = %entry
  %64 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %C.Element) #7
  %65 = extractvalue %swift.metadata_response %64, 0
  %66 = call swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V16initializeMemory2as4from8IteratorQz9unwritten_AA07MutableaB0Vy7ElementQzG11initializedtAMm_xtSTRzlF"(%swift.opaque* noalias nocapture %26, %swift.type* %65, %swift.opaque* noalias nocapture %1, i8* %2, i64 %3, %swift.type* %C, i8** %C.Sequence)
  %67 = extractvalue { i8*, i64 } %66, 0
  %68 = extractvalue { i8*, i64 } %66, 1
  %C.Iterator.IteratorProtocol = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %C.Sequence, %swift.type* %C, %swift.type* %C.Iterator, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$sST8IteratorST_StTn") #13
  %69 = bitcast %TSq.9* %19 to %TSq.40*
  %70 = bitcast %TSq.40* %69 to %swift.opaque*
  call swiftcc void @"$sSt4next7ElementQzSgyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque) %70, %swift.opaque* nocapture swiftself %26, %swift.type* %C.Iterator, i8** %C.Iterator.IteratorProtocol)
  %71 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 4
  %72 = load i8*, i8** %71, align 8, !invariant.load !17
  %initializeWithTake = bitcast i8* %72 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %73 = bitcast %TSq.9* %17 to %swift.opaque*
  %74 = bitcast %TSq.9* %19 to %swift.opaque*
  %75 = call %swift.opaque* %initializeWithTake(%swift.opaque* noalias %73, %swift.opaque* noalias %74, %swift.type* %11) #9
  %76 = bitcast %TSq.9* %17 to %swift.opaque*
  %77 = bitcast %swift.type* %65 to i8***
  %78 = getelementptr inbounds i8**, i8*** %77, i64 -1
  %.valueWitnesses2 = load i8**, i8*** %78, align 8, !invariant.load !17, !dereferenceable !18
  %79 = getelementptr inbounds i8*, i8** %.valueWitnesses2, i32 6
  %80 = load i8*, i8** %79, align 8, !invariant.load !17
  %getEnumTagSinglePayload = bitcast i8* %80 to i32 (%swift.opaque*, i32, %swift.type*)*
  %81 = call i32 %getEnumTagSinglePayload(%swift.opaque* noalias %76, i32 1, %swift.type* %65) #8
  %82 = icmp ne i32 %81, 1
  br i1 %82, label %84, label %88

83:                                               ; No predecessors!
  unreachable

84:                                               ; preds = %63
  %85 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %86 = load i8*, i8** %85, align 8, !invariant.load !17
  %destroy3 = bitcast i8* %86 to void (%swift.opaque*, %swift.type*)*
  %87 = bitcast %TSq.9* %17 to %swift.opaque*
  call void %destroy3(%swift.opaque* noalias %87, %swift.type* %11) #9
  br label %89

88:                                               ; preds = %63
  br label %89

89:                                               ; preds = %84, %88
  %90 = phi i1 [ true, %88 ], [ false, %84 ]
  %91 = xor i1 %90, true
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false)
  br i1 %92, label %104, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8*, i8** %C.Iterator.valueWitnesses, i32 1
  %95 = load i8*, i8** %94, align 8, !invariant.load !17
  %destroy = bitcast i8* %95 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %26, %swift.type* %C.Iterator) #9
  br label %96

96:                                               ; preds = %52, %93
  %97 = phi i8* [ %67, %93 ], [ %60, %52 ]
  %98 = phi i64 [ %68, %93 ], [ %61, %52 ]
  %99 = bitcast %swift.opaque* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %99)
  %100 = bitcast %TSq.9* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %100)
  %101 = bitcast %TSq.9* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %101)
  %102 = insertvalue { i8*, i64 } undef, i8* %97, 0
  %103 = insertvalue { i8*, i64 } %102, i64 %98, 1
  ret { i8*, i64 } %103

104:                                              ; preds = %89
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define internal swiftcc void @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlFSpyAJG4base_Si5counttSRyAJGXEfU_"(<{ %TSp, %TSi }>* noalias nocapture sret(<{ %TSp, %TSi }>) %0, i64 %1, i64 %2, i8* %3, i64 %4, %swift.type* %C, i8** %C.Collection, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca %TSR, align 8
  %8 = getelementptr inbounds i8*, i8** %C.Collection, i32 1
  %9 = load i8*, i8** %8, align 8, !invariant.load !17
  %C.Sequence = bitcast i8* %9 to i8**
  %10 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 0, i8** %C.Sequence, %swift.type* %C, %swift.protocol_requirement* @"$sSTTL", %swift.protocol_requirement* @"$s7ElementSTTl") #13
  %C.Element = extractvalue %swift.metadata_response %10, 0
  %11 = call swiftcc i64 @"$sSR11baseAddressSPyxGSgvg"(i64 %1, i64 %2, %swift.type* %C.Element)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %entry
  %14 = inttoptr i64 %11 to i8*
  br label %16

15:                                               ; preds = %entry
  br label %74

16:                                               ; preds = %13
  %17 = phi i8* [ %14, %13 ]
  %18 = bitcast %TSR* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %18)
  %._position = getelementptr inbounds %TSR, %TSR* %7, i32 0, i32 0
  %19 = bitcast %TSq.10* %._position to i64*
  store i64 %1, i64* %19, align 8
  %.count1 = getelementptr inbounds %TSR, %TSR* %7, i32 0, i32 1
  %.count1._value = getelementptr inbounds %TSi, %TSi* %.count1, i32 0, i32 0
  store i64 %2, i64* %.count1._value, align 8
  %20 = call swiftcc %swift.metadata_response @"$sSRMa"(i64 0, %swift.type* %C.Element) #10
  %21 = extractvalue %swift.metadata_response %20, 0
  %22 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSRyxGSlsMc", %swift.type* %21, i8*** undef) #8
  %23 = bitcast %TSR* %7 to %swift.opaque*
  %24 = call swiftcc i1 @"$sSlsE7isEmptySbvg"(%swift.type* %21, i8** %22, %swift.opaque* noalias nocapture swiftself %23)
  %25 = bitcast %TSR* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %25)
  br i1 %24, label %26, label %73

26:                                               ; preds = %16
  %27 = bitcast %swift.type* %C.Element to i8***
  %28 = getelementptr inbounds i8**, i8*** %27, i64 -1
  %C.Element.valueWitnesses = load i8**, i8*** %28, align 8, !invariant.load !17, !dereferenceable !18
  %29 = bitcast i8** %C.Element.valueWitnesses to %swift.vwtable*
  %30 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %29, i32 0, i32 9
  %stride = load i64, i64* %30, align 8, !invariant.load !17
  %31 = icmp eq i64 %stride, 0
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false)
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false)
  br i1 %33, label %76, label %34

34:                                               ; preds = %26
  %35 = icmp eq i64 %4, -9223372036854775808
  br i1 %35, label %36, label %41

36:                                               ; preds = %34
  %37 = icmp eq i64 %stride, -1
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false)
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false)
  br i1 %39, label %82, label %40

40:                                               ; preds = %36
  br label %42

41:                                               ; preds = %34
  br label %42

42:                                               ; preds = %40, %41
  %43 = phi i1 [ false, %41 ], [ %37, %40 ]
  %44 = call i1 @llvm.expect.i1(i1 %43, i1 false)
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false)
  br i1 %45, label %77, label %46

46:                                               ; preds = %42
  %47 = srem i64 %4, %stride
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false)
  br i1 %50, label %78, label %51

51:                                               ; preds = %46
  %52 = ptrtoint i8* %3 to i64
  %53 = icmp eq i64 %52, -9223372036854775808
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = icmp eq i64 %stride, -1
  br label %57

56:                                               ; preds = %51
  br label %57

57:                                               ; preds = %54, %56
  %58 = phi i1 [ false, %56 ], [ %55, %54 ]
  %59 = sdiv i64 %4, %stride
  %60 = call i1 @llvm.expect.i1(i1 %58, i1 false)
  %61 = call i1 @llvm.expect.i1(i1 %60, i1 false)
  br i1 %61, label %79, label %62

62:                                               ; preds = %57
  %63 = srem i64 %52, %stride
  %64 = icmp eq i64 %63, 0
  %65 = xor i1 %64, true
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false)
  br i1 %66, label %80, label %67

67:                                               ; preds = %62
  %68 = icmp slt i64 %2, %59
  %69 = xor i1 %68, true
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false)
  br i1 %70, label %81, label %71

71:                                               ; preds = %67
  %72 = call swiftcc i8* @"$sSv16initializeMemory2as4from5countSpyxGxm_SPyxGSitlF"(%swift.type* %C.Element, i8* %17, i64 %2, i8* %3, %swift.type* %C.Element)
  %.base2 = getelementptr inbounds <{ %TSp, %TSi }>, <{ %TSp, %TSi }>* %0, i32 0, i32 0
  %.count3 = getelementptr inbounds <{ %TSp, %TSi }>, <{ %TSp, %TSi }>* %0, i32 0, i32 1
  %.base2._rawValue = getelementptr inbounds %TSp, %TSp* %.base2, i32 0, i32 0
  store i8* %72, i8** %.base2._rawValue, align 8
  %.count3._value = getelementptr inbounds %TSi, %TSi* %.count3, i32 0, i32 0
  store i64 %2, i64* %.count3._value, align 8
  br label %75

73:                                               ; preds = %16
  br label %74

74:                                               ; preds = %73, %15
  %.base = getelementptr inbounds <{ %TSp, %TSi }>, <{ %TSp, %TSi }>* %0, i32 0, i32 0
  %.count = getelementptr inbounds <{ %TSp, %TSi }>, <{ %TSp, %TSi }>* %0, i32 0, i32 1
  %.base._rawValue = getelementptr inbounds %TSp, %TSp* %.base, i32 0, i32 0
  store i8* %3, i8** %.base._rawValue, align 8
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 0, i64* %.count._value, align 8
  br label %75

75:                                               ; preds = %71, %74
  ret void

76:                                               ; preds = %26
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

77:                                               ; preds = %42
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

78:                                               ; preds = %46
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

79:                                               ; preds = %57
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

80:                                               ; preds = %62
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

81:                                               ; preds = %67
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

82:                                               ; preds = %36
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i1 @"$sSlsE7isEmptySbvg"(%swift.type*, i8**, %swift.opaque* noalias nocapture swiftself) #0

declare swiftcc i8* @"$sSv16initializeMemory2as4from5countSpyxGxm_SPyxGSitlF"(%swift.type*, i8*, i64, i8*, %swift.type*) #0

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V20moveInitializeMemory2as14fromContentsOfAA07MutableaB0VyxGxm_SryxGtlF"(%swift.type* %0, i64 %1, i64 %2, i8* %3, i64 %4, %swift.type* %T) #0 {
entry:
  %5 = alloca %T10BufferView09OutputRawA0V, align 8
  %6 = alloca %TSr.11, align 8
  %7 = alloca %T10BufferView09OutputRawA0V, align 8
  %8 = call swiftcc i64 @"$sSr11baseAddressSpyxGSgvg"(i64 %1, i64 %2, %swift.type* %T)
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %entry
  %11 = inttoptr i64 %8 to i8*
  br label %13

12:                                               ; preds = %entry
  br label %77

13:                                               ; preds = %10
  %14 = phi i8* [ %11, %10 ]
  %15 = bitcast %TSr.11* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %15)
  %._position = getelementptr inbounds %TSr.11, %TSr.11* %6, i32 0, i32 0
  %16 = bitcast %TSq.12* %._position to i64*
  store i64 %1, i64* %16, align 8
  %.count1 = getelementptr inbounds %TSr.11, %TSr.11* %6, i32 0, i32 1
  %.count1._value = getelementptr inbounds %TSi, %TSi* %.count1, i32 0, i32 0
  store i64 %2, i64* %.count1._value, align 8
  %17 = call swiftcc %swift.metadata_response @"$sSrMa"(i64 0, %swift.type* %T) #10
  %18 = extractvalue %swift.metadata_response %17, 0
  %19 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSryxGSlsMc", %swift.type* %18, i8*** undef) #8
  %20 = bitcast %TSr.11* %6 to %swift.opaque*
  %21 = call swiftcc i1 @"$sSlsE7isEmptySbvg"(%swift.type* %18, i8** %19, %swift.opaque* noalias nocapture swiftself %20)
  %22 = bitcast %TSr.11* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22)
  br i1 %21, label %76, label %23

23:                                               ; preds = %13
  %24 = bitcast %swift.type* %T to i8***
  %25 = getelementptr inbounds i8**, i8*** %24, i64 -1
  %T.valueWitnesses = load i8**, i8*** %25, align 8, !invariant.load !17, !dereferenceable !18
  %26 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %27 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %26, i32 0, i32 9
  %stride = load i64, i64* %27, align 8, !invariant.load !17
  %28 = icmp eq i64 %stride, 0
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false)
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false)
  br i1 %30, label %89, label %31

31:                                               ; preds = %23
  %32 = icmp eq i64 %4, -9223372036854775808
  br i1 %32, label %33, label %38

33:                                               ; preds = %31
  %34 = icmp eq i64 %stride, -1
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false)
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false)
  br i1 %36, label %95, label %37

37:                                               ; preds = %33
  br label %39

38:                                               ; preds = %31
  br label %39

39:                                               ; preds = %37, %38
  %40 = phi i1 [ false, %38 ], [ %34, %37 ]
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false)
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false)
  br i1 %42, label %90, label %43

43:                                               ; preds = %39
  %44 = srem i64 %4, %stride
  %45 = icmp eq i64 %44, 0
  %46 = xor i1 %45, true
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  br i1 %47, label %91, label %48

48:                                               ; preds = %43
  %49 = ptrtoint i8* %3 to i64
  %50 = icmp eq i64 %49, -9223372036854775808
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  %52 = icmp eq i64 %stride, -1
  br label %54

53:                                               ; preds = %48
  br label %54

54:                                               ; preds = %51, %53
  %55 = phi i1 [ false, %53 ], [ %52, %51 ]
  %56 = sdiv i64 %4, %stride
  %57 = call i1 @llvm.expect.i1(i1 %55, i1 false)
  %58 = call i1 @llvm.expect.i1(i1 %57, i1 false)
  br i1 %58, label %92, label %59

59:                                               ; preds = %54
  %60 = srem i64 %49, %stride
  %61 = icmp eq i64 %60, 0
  %62 = xor i1 %61, true
  %63 = call i1 @llvm.expect.i1(i1 %62, i1 false)
  br i1 %63, label %93, label %64

64:                                               ; preds = %59
  %65 = icmp slt i64 %2, %56
  %66 = xor i1 %65, true
  %67 = call i1 @llvm.expect.i1(i1 %66, i1 false)
  br i1 %67, label %94, label %68

68:                                               ; preds = %64
  %69 = call swiftcc i8* @"$sSv20moveInitializeMemory2as4from5countSpyxGxm_AESitlF"(%swift.type* %T, i8* %14, i64 %2, i8* %3, %swift.type* %T)
  %70 = bitcast %T10BufferView09OutputRawA0V* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %70)
  %.baseAddress2 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %7, i32 0, i32 0
  %.baseAddress2._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress2, i32 0, i32 0
  store i8* %3, i8** %.baseAddress2._rawValue, align 8
  %.count3 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %7, i32 0, i32 1
  %.count3._value = getelementptr inbounds %TSi, %TSi* %.count3, i32 0, i32 0
  store i64 %4, i64* %.count3._value, align 8
  %71 = bitcast %T10BufferView09OutputRawA0V* %7 to %swift.opaque*
  %72 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %69, i64 %2, %swift.opaque* noalias nocapture %71, %swift.type* %T, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %73 = extractvalue { i8*, i64 } %72, 0
  %74 = extractvalue { i8*, i64 } %72, 1
  %75 = bitcast %T10BufferView09OutputRawA0V* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %75)
  br label %84

76:                                               ; preds = %13
  br label %77

77:                                               ; preds = %76, %12
  %78 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %78)
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  store i8* %3, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %5, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %79 = bitcast %T10BufferView09OutputRawA0V* %5 to %swift.opaque*
  %80 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %3, i64 0, %swift.opaque* noalias nocapture %79, %swift.type* %T, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %81 = extractvalue { i8*, i64 } %80, 0
  %82 = extractvalue { i8*, i64 } %80, 1
  %83 = bitcast %T10BufferView09OutputRawA0V* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %83)
  br label %84

84:                                               ; preds = %68, %77
  %85 = phi i8* [ %81, %77 ], [ %73, %68 ]
  %86 = phi i64 [ %82, %77 ], [ %74, %68 ]
  %87 = insertvalue { i8*, i64 } undef, i8* %85, 0
  %88 = insertvalue { i8*, i64 } %87, i64 %86, 1
  ret { i8*, i64 } %88

89:                                               ; preds = %23
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

90:                                               ; preds = %39
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable

91:                                               ; preds = %43
  call void asm sideeffect "", "n"(i32 2)
  call void @llvm.trap()
  unreachable

92:                                               ; preds = %54
  call void asm sideeffect "", "n"(i32 3)
  call void @llvm.trap()
  unreachable

93:                                               ; preds = %59
  call void asm sideeffect "", "n"(i32 4)
  call void @llvm.trap()
  unreachable

94:                                               ; preds = %64
  call void asm sideeffect "", "n"(i32 5)
  call void @llvm.trap()
  unreachable

95:                                               ; preds = %33
  call void asm sideeffect "", "n"(i32 6)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i8* @"$sSv20moveInitializeMemory2as4from5countSpyxGxm_AESitlF"(%swift.type*, i8*, i64, i8*, %swift.type*) #0

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V20moveInitializeMemory2as14fromContentsOfAA07MutableaB0VyxGxm_s5SliceVySryxGGtlF"(%swift.type* %0, i64 %1, i64 %2, i64 %3, i64 %4, i8* %5, i64 %6, %swift.type* %T) #0 {
entry:
  %7 = call swiftcc { i64, i64 } @"$sSr8rebasingSryxGs5SliceVyABG_tcfC"(i64 %1, i64 %2, i64 %3, i64 %4, %swift.type* %T)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = call swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V20moveInitializeMemory2as14fromContentsOfAA07MutableaB0VyxGxm_SryxGtlF"(%swift.type* %T, i64 %8, i64 %9, i8* %5, i64 %6, %swift.type* %T)
  %11 = extractvalue { i8*, i64 } %10, 0
  %12 = extractvalue { i8*, i64 } %10, 1
  %13 = insertvalue { i8*, i64 } undef, i8* %11, 0
  %14 = insertvalue { i8*, i64 } %13, i64 %12, 1
  ret { i8*, i64 } %14
}

declare swiftcc { i64, i64 } @"$sSr8rebasingSryxGs5SliceVyABG_tcfC"(i64, i64, i64, i64, %swift.type*) #0

define swiftcc i64 @"$s10BufferView09OutputRawA0V10storeBytes2of12toByteOffset2asSix_SixmtlF"(%swift.opaque* noalias nocapture %0, i64 %1, %swift.type* %2, i8* %3, i64 %4, %swift.type* %T) #0 {
entry:
  %5 = icmp slt i64 %1, 0
  %6 = bitcast %swift.type* %T to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %T.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  br i1 %13, label %19, label %14

14:                                               ; preds = %entry
  %15 = icmp slt i64 %4, %11
  %16 = or i1 %5, %15
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false)
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  call swiftcc void @_swift_se0349_UnsafeMutableRawPointer_storeBytes(%swift.opaque* noalias nocapture %0, i64 %1, %swift.type* %T, i8* %3, %swift.type* %T)
  ret i64 %11

19:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable

20:                                               ; preds = %14
  call void asm sideeffect "", "n"(i32 1)
  call void @llvm.trap()
  unreachable
}

define swiftcc { i8*, i64 } @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlF"(%swift.type* %0, i8* %1, %swift.opaque* %2, i8* %3, i64 %4, %swift.type* %T, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = alloca %TSi, align 8
  %8 = alloca %T10BufferView09OutputRawA0V, align 8
  %9 = bitcast %TSi* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9)
  %10 = alloca i8, i64 56, align 16
  %11 = bitcast i8* %10 to %swift.opaque*
  %12 = bitcast %swift.opaque* %11 to <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>*
  %13 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %12, i32 0, i32 1
  %14 = bitcast [8 x i8]* %13 to %swift.type**
  store %swift.type* %T, %swift.type** %14, align 8
  %15 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %12, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %15, i32 0, i32 0
  store i8* %1, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %15, i32 0, i32 1
  store %swift.opaque* %2, %swift.opaque** %.data, align 8
  %16 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %12, i32 0, i32 3
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %16, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  store i8* %3, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %16, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  store i64 %4, i64* %.count._value, align 8
  %17 = bitcast %TSi* %7 to %swift.opaque*
  call swiftcc void @"$sSv17withMemoryRebound2to8capacity_q_xm_Siq_SpyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque) %17, %swift.type* %T, i64 %4, i8* bitcast (void (%TSi*, i8*, %swift.refcounted*, %swift.error**)* @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlFSiAIKXEfU_TA" to i8*), %swift.opaque* %11, i8* %3, %swift.type* %T, %swift.type* @"$sSiN", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %6)
  %18 = load %swift.error*, %swift.error** %6, align 8
  %19 = icmp ne %swift.error* %18, null
  br i1 %19, label %31, label %20

20:                                               ; preds = %entry
  %._value = getelementptr inbounds %TSi, %TSi* %7, i32 0, i32 0
  %21 = load i64, i64* %._value, align 8
  %22 = bitcast %TSi* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22)
  %23 = bitcast %T10BufferView09OutputRawA0V* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %23)
  %.baseAddress1 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %8, i32 0, i32 0
  %.baseAddress1._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress1, i32 0, i32 0
  store i8* %3, i8** %.baseAddress1._rawValue, align 8
  %.count2 = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %8, i32 0, i32 1
  %.count2._value = getelementptr inbounds %TSi, %TSi* %.count2, i32 0, i32 0
  store i64 %4, i64* %.count2._value, align 8
  %24 = bitcast %T10BufferView09OutputRawA0V* %8 to %swift.opaque*
  %25 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %3, i64 %21, %swift.opaque* noalias nocapture %24, %swift.type* %T, %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*))
  %26 = extractvalue { i8*, i64 } %25, 0
  %27 = extractvalue { i8*, i64 } %25, 1
  %28 = bitcast %T10BufferView09OutputRawA0V* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28)
  %29 = insertvalue { i8*, i64 } undef, i8* %26, 0
  %30 = insertvalue { i8*, i64 } %29, i64 %27, 1
  ret { i8*, i64 } %30

31:                                               ; preds = %entry
  %32 = phi %swift.error* [ %18, %entry ]
  store %swift.error* null, %swift.error** %6, align 8
  %33 = bitcast %TSi* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33)
  store %swift.error* %32, %swift.error** %6, align 8
  ret { i8*, i64 } undef
}

define internal swiftcc void @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlFSiAIKXEfU_"(%TSi* noalias nocapture sret(%TSi) %0, i8* %1, i8* %2, %swift.opaque* %3, i8* %4, i64 %5, %swift.type* %T, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = bitcast i8* %2 to i64 (i8*, i64, %swift.refcounted*, %swift.error**)*
  %9 = bitcast %swift.opaque* %3 to %swift.refcounted*
  %10 = call swiftcc i64 %8(i8* %1, i64 %5, %swift.refcounted* swiftself %9, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %11 = load %swift.error*, %swift.error** %7, align 8
  %12 = icmp ne %swift.error* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %entry
  %14 = phi i64 [ %10, %entry ]
  %._value = getelementptr inbounds %TSi, %TSi* %0, i32 0, i32 0
  store i64 %14, i64* %._value, align 8
  ret void

15:                                               ; preds = %entry
  %16 = phi %swift.error* [ %11, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %16, %swift.error** %7, align 8
  ret void
}

define swiftcc i1 @"$s10BufferView09OutputRawA0V14hasPrefixRangeySbAA07MutableaB0VyxGlF"(i8* %0, i64 %1, i8* %2, i64 %3, %swift.type* %T) #0 {
entry:
  %4 = icmp eq i8* %2, %0
  br i1 %4, label %5, label %17

5:                                                ; preds = %entry
  %6 = bitcast %swift.type* %T to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %T.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 9
  %stride = load i64, i64* %9, align 8, !invariant.load !17
  %10 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %stride)
  %11 = extractvalue { i64, i1 } %10, 0
  %12 = extractvalue { i64, i1 } %10, 1
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false)
  br i1 %13, label %20, label %14

14:                                               ; preds = %5
  %15 = icmp slt i64 %3, %11
  %16 = xor i1 %15, true
  br label %18

17:                                               ; preds = %entry
  br label %18

18:                                               ; preds = %14, %17
  %19 = phi i1 [ false, %17 ], [ %16, %14 ]
  ret i1 %19

20:                                               ; preds = %5
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

declare swiftcc i1 @"$ss2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type*, %swift.type*, i8**, i8**) #0

define linkonce_odr hidden swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlFxSryxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i64 %2, i8* %3, i64 %4, %swift.type* %T, %swift.refcounted* swiftself %5, %swift.error** noalias nocapture swifterror dereferenceable(8) %6) #0 {
entry:
  %7 = call swiftcc i64 @"$sSr11baseAddressSpyxGSgvg"(i64 %1, i64 %2, %swift.type* %T)
  %8 = inttoptr i64 %7 to i8*
  %9 = getelementptr inbounds i8, i8* %3, i64 %4
  %10 = bitcast %swift.type* %T to i8***
  %11 = getelementptr inbounds i8**, i8*** %10, i64 -1
  %T.valueWitnesses = load i8**, i8*** %11, align 8, !invariant.load !17, !dereferenceable !18
  %12 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %13 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %12, i32 0, i32 8
  %size = load i64, i64* %13, align 8, !invariant.load !17
  %14 = icmp slt i64 %size, 0
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false)
  br i1 %15, label %21, label %16

16:                                               ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 %size, i1 false)
  %17 = bitcast i8* %8 to %swift.opaque*
  %18 = getelementptr inbounds i8*, i8** %T.valueWitnesses, i32 2
  %19 = load i8*, i8** %18, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %19 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %20 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %0, %swift.opaque* noalias %17, %swift.type* %T) #9
  ret void

21:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$ss41_withUnprotectedUnsafeTemporaryAllocation2of8capacity_q_xm_Siq_SryxGKXEtKr0_lFq_BpKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.type* %3, i8* %4, %swift.opaque* %5, %swift.type* %T, %swift.type* %R, %swift.refcounted* swiftself %6, %swift.error** noalias nocapture swifterror dereferenceable(8) %7) #0 {
entry:
  %8 = ptrtoint i8* %1 to i64
  %9 = call swiftcc { i64, i64 } @"$sSr5start5countSryxGSpyxGSg_SitcfC"(i64 %8, i64 %2, %swift.type* %T)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = bitcast i8* %4 to void (%swift.opaque*, i64, i64, %swift.refcounted*, %swift.error**)*
  %13 = bitcast %swift.opaque* %5 to %swift.refcounted*
  call swiftcc void %12(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %10, i64 %11, %swift.refcounted* swiftself %13, %swift.error** noalias nocapture swifterror dereferenceable(8) %7)
  %14 = load %swift.error*, %swift.error** %7, align 8
  %15 = icmp ne %swift.error* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %entry
  %17 = phi %swift.error* [ %14, %entry ]
  store %swift.error* null, %swift.error** %7, align 8
  store %swift.error* %17, %swift.error** %7, align 8
  ret void

18:                                               ; preds = %entry
  ret void
}

define linkonce_odr hidden swiftcc void @"$sSv10storeBytes2of12toByteOffset2asyx_SixmtlFySPyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %2, i64 %3, %swift.type* %T, %swift.refcounted* swiftself %4, %swift.error** noalias nocapture swifterror dereferenceable(8) %5) #0 {
entry:
  %6 = getelementptr inbounds i8, i8* %2, i64 %3
  %7 = bitcast %swift.type* %T to i8***
  %8 = getelementptr inbounds i8**, i8*** %7, i64 -1
  %T.valueWitnesses = load i8**, i8*** %8, align 8, !invariant.load !17, !dereferenceable !18
  %9 = bitcast i8** %T.valueWitnesses to %swift.vwtable*
  %10 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %9, i32 0, i32 8
  %size = load i64, i64* %10, align 8, !invariant.load !17
  %11 = icmp slt i64 %size, 0
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false)
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %1, i64 %size, i1 false)
  ret void

14:                                               ; preds = %entry
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

declare swiftcc void @"$ss17withUnsafePointer2to_q_x_q_SPyxGKXEtKr0_lF"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* noalias nocapture, i8*, %swift.opaque*, %swift.type*, %swift.type*, %swift.refcounted* swiftself, %swift.error** noalias nocapture swifterror dereferenceable(8)) #0

declare swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF"(%swift.opaque* noalias nocapture, %swift.type*, i8**) #0

define linkonce_odr hidden swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V11baseAddress5count9dependsOnACyxGSv_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = bitcast %swift.type* %Owner to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Owner.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 8
  %size = load i64, i64* %6, align 8, !invariant.load !17
  %7 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %7)
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 2
  %10 = load i8*, i8** %9, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %10 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %11 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %8, %swift.opaque* noalias %2, %swift.type* %Owner) #9
  %12 = call swiftcc { i8*, i64 } @"$s10BufferView07MutableaB0V5start5count9dependsOnACyxGAA0aB5IndexVyxG_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %8, %swift.type* %Element, %swift.type* %Owner)
  %13 = extractvalue { i8*, i64 } %12, 0
  %14 = extractvalue { i8*, i64 } %12, 1
  %15 = bitcast %swift.opaque* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %15)
  %16 = insertvalue { i8*, i64 } undef, i8* %13, 0
  %17 = insertvalue { i8*, i64 } %16, i64 %14, 1
  ret { i8*, i64 } %17
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: noinline
declare swiftcc void @"$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF"(i64, i64, i8, i64, %swift.bridge*, i64, i64, i8, i64, i32) #1

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #4

define linkonce_odr hidden swiftcc { i8*, i8* } @"$s10BufferView0aB8IteratorV12startPointer03endE09dependsOnACyxGSV_SVqd__tclufCTf4nndd_n"(i8* %0, i8* %1, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %2 = insertvalue { i8*, i8* } undef, i8* %0, 0
  %3 = insertvalue { i8*, i8* } %2, i8* %1, 1
  ret { i8*, i8* } %3
}

define linkonce_odr hidden swiftcc { i8*, i8* } @"$s10BufferView0aB8IteratorV4from2to9dependsOnACyxGAA0aB5IndexVyxG_AJqd__tclufCTf4nndd_n"(i8* %0, i8* %1, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %2 = call swiftcc { i8*, i8* } @"$s10BufferView0aB8IteratorV12startPointer03endE09dependsOnACyxGSV_SVqd__tclufCTf4nndd_n"(i8* %0, i8* %1, %swift.type* %Element, %swift.type* %Owner)
  %3 = extractvalue { i8*, i8* } %2, 0
  %4 = extractvalue { i8*, i8* } %2, 1
  %5 = insertvalue { i8*, i8* } undef, i8* %3, 0
  %6 = insertvalue { i8*, i8* } %5, i8* %4, 1
  ret { i8*, i8* } %6
}

; Function Attrs: noinline nounwind readnone
define swiftcc %swift.metadata_response @"$s10BufferView07MutableaB0VMa"(i64 %0, %swift.type* %1) #6 {
entry:
  %2 = bitcast %swift.type* %1 to i8*
  %3 = call swiftcc %swift.metadata_response @__swift_instantiateGenericMetadata(i64 %0, i8* %2, i8* undef, i8* undef, %swift.type_descriptor* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView07MutableaB0VMn" to %swift.type_descriptor*)) #10
  %4 = extractvalue %swift.metadata_response %3, 0
  %5 = extractvalue %swift.metadata_response %3, 1
  %6 = insertvalue %swift.metadata_response undef, %swift.type* %4, 0
  %7 = insertvalue %swift.metadata_response %6, i64 %5, 1
  ret %swift.metadata_response %7
}

define internal swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFqd__SPyxGKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %4, i32 0, i32 1
  %6 = bitcast [16 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %R = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %4, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 0
  %9 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 1
  %10 = load %swift.opaque*, %swift.opaque** %.data, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %TSi }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %11, i32 0, i32 0
  %12 = load i64, i64* %._value, align 8
  tail call swiftcc void @"$s10BufferViewAAV32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFqd__SPyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %9, %swift.opaque* %10, i64 %12, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare swiftcc %swift.metadata_response @swift_getTupleTypeMetadata2(i64, %swift.type*, %swift.type*, i8*, i8**) #7

declare swiftcc %swift.metadata_response @"$sSqMa"(i64, %swift.type*) #0

; Function Attrs: noinline nounwind readnone
define swiftcc %swift.metadata_response @"$s10BufferView0aB5IndexVMa"(i64 %0, %swift.type* %1) #6 {
entry:
  %2 = bitcast %swift.type* %1 to i8*
  %3 = call swiftcc %swift.metadata_response @__swift_instantiateGenericMetadata(i64 %0, i8* %2, i8* undef, i8* undef, %swift.type_descriptor* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB5IndexVMn" to %swift.type_descriptor*)) #10
  %4 = extractvalue %swift.metadata_response %3, 0
  %5 = extractvalue %swift.metadata_response %3, 1
  %6 = insertvalue %swift.metadata_response undef, %swift.type* %4, 0
  %7 = insertvalue %swift.metadata_response %6, i64 %5, 1
  ret %swift.metadata_response %7
}

; Function Attrs: nounwind readonly
declare i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor*, %swift.type*, i8***) #8

; Function Attrs: noinline nounwind readnone
define swiftcc %swift.metadata_response @"$s10BufferViewAAVMa"(i64 %0, %swift.type* %1) #6 {
entry:
  %2 = bitcast %swift.type* %1 to i8*
  %3 = call swiftcc %swift.metadata_response @__swift_instantiateGenericMetadata(i64 %0, i8* %2, i8* undef, i8* undef, %swift.type_descriptor* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferViewAAVMn" to %swift.type_descriptor*)) #10
  %4 = extractvalue %swift.metadata_response %3, 0
  %5 = extractvalue %swift.metadata_response %3, 1
  %6 = insertvalue %swift.metadata_response undef, %swift.type* %4, 0
  %7 = insertvalue %swift.metadata_response %6, i64 %5, 1
  ret %swift.metadata_response %7
}

declare swiftcc %swift.metadata_response @"$ss12Zip2SequenceVMa"(i64, i8**) #0

declare swiftcc %swift.metadata_response @"$ss12Zip2SequenceV8IteratorVMa"(i64, i8**) #0

; Function Attrs: nounwind readonly willreturn
declare swiftcc %swift.metadata_response @swift_checkMetadataState(i64, %swift.type*) #7

declare swiftcc i1 @"$sSQ2eeoiySbx_xtFZTj"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type* swiftself, %swift.type*, i8**) #0

declare swiftcc void @"$s10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxlIetMAyyYl_TC"(i8* noalias dereferenceable(32), i1) #0

declare i8* @malloc(i64)

declare void @free(i8*)

; Function Attrs: nounwind
declare token @llvm.coro.id.retcon.once(i32, i32, i8*, i8*, i8*, i8*) #9

; Function Attrs: nounwind
declare i8* @llvm.coro.begin(token, i8* writeonly) #9

; Function Attrs: nounwind readnone
declare i8* @llvm.coro.prepare.retcon(i8*) #10

; Function Attrs: nounwind
declare i1 @llvm.coro.suspend.retcon.i1(...) #9

; Function Attrs: nounwind
declare i1 @llvm.coro.end(i8*, i1) #9

declare swiftcc %swift.metadata_response @"$sSnMa"(i64, %swift.type*, i8**) #0

; Function Attrs: noinline nounwind readnone
define linkonce_odr hidden i8** @"$sS2iSZsWl"() #6 {
entry:
  %0 = load i8**, i8*** @"$sS2iSZsWL", align 8
  %1 = icmp eq i8** %0, null
  br i1 %1, label %cacheIsNull, label %cont

cacheIsNull:                                      ; preds = %entry
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSiSZsMc", %swift.type* @"$sSiN", i8*** undef) #8
  store atomic i8** %2, i8*** @"$sS2iSZsWL" release, align 8
  br label %cont

cont:                                             ; preds = %cacheIsNull, %entry
  %3 = phi i8** [ %0, %entry ], [ %2, %cacheIsNull ]
  ret i8** %3
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #11

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #11

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.1"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

declare swiftcc void @"$sSny10BufferView0aB5IndexVyxGGAA07MutableaB0VyxGAHlIetMAyyYl_TC"(i8* noalias dereferenceable(32), i1) #0

; Function Attrs: nounwind
declare token @llvm.coro.alloca.alloc.i64(i64, i32) #9

; Function Attrs: nounwind
declare i8* @llvm.coro.alloca.get(token) #9

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.2"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.coro.alloca.free(token) #9

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.3"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.4"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.5"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %4, i32 0, i32 1
  %6 = bitcast [16 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %R = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %4, i32 0, i32 2
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %8, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %9 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %8, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %10 = load i64, i64* %.count._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %T10BufferView07MutableaB0V, %swift.noescape.function }>* %4, i32 0, i32 3
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %11, i32 0, i32 0
  %12 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %11, i32 0, i32 1
  %13 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V014withContiguousC18StorageIfAvailableyqd__Sgqd__SryxGzKXEKlFqd__SpyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %9, i64 %10, i8* %12, %swift.opaque* %13, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #12

define internal swiftcc void @"$s10BufferView07MutableaB0V6update9repeatingyx_tFySpyxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %8 = load %swift.opaque*, %swift.opaque** %7, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %swift.opaque*, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %9, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %10 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %9, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %11 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V6update9repeatingyx_tFySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.opaque* noalias nocapture %8, i8* %10, i64 %11, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: nounwind readnone willreturn
declare swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64, i8**, %swift.type*, %swift.protocol_requirement*, %swift.protocol_requirement*) #13

declare swiftcc void @"$sST12makeIterator0B0QzyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* noalias nocapture swiftself, %swift.type*, i8**) #0

declare swiftcc void @"$sSt4next7ElementQzSgyFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque), %swift.opaque* nocapture swiftself, %swift.type*, i8**) #0

; Function Attrs: nounwind readnone willreturn
declare swiftcc i8** @swift_getAssociatedConformanceWitness(i8**, %swift.type*, %swift.type*, %swift.protocol_requirement*, %swift.protocol_requirement*) #13

define internal swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_TA"(%TSi* noalias nocapture sret(%TSi) %0, i64 %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %5, i32 0, i32 1
  %7 = bitcast [24 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %"some Collection<Element>" = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 2
  %10 = bitcast %swift.type** %9 to i8***
  %"some Collection<Element>.Collection" = load i8**, i8*** %10, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %5, i32 0, i32 2
  %._value = getelementptr inbounds %TSi, %TSi* %11, i32 0, i32 0
  %12 = load i64, i64* %._value, align 8
  %13 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>, <{ %swift.refcounted, [24 x i8], %TSi, %TSv }>* %5, i32 0, i32 3
  %._rawValue = getelementptr inbounds %TSv, %TSv* %13, i32 0, i32 0
  %14 = load i8*, i8** %._rawValue, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_"(%TSi* noalias nocapture sret(%TSi) %0, i64 %1, i64 %2, i64 %12, i8* %14, %swift.type* %Element, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

declare swiftcc void @"$sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTj"(%swift.opaque* noalias nocapture sret(%swift.opaque), i8*, %swift.opaque*, %swift.type*, %swift.opaque* noalias nocapture swiftself, %swift.error** noalias nocapture swifterror dereferenceable(8), %swift.type*, i8**) #0

declare swiftcc i1 @"$sSl7isEmptySbvgTj"(%swift.opaque* noalias nocapture swiftself, %swift.type*, i8**) #0

define internal swiftcc void @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlFqd__SV_SitKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %R = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 0
  %10 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 1
  %11 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V15withUnsafeBytesyqd__qd__SWKXEKlFqd__SV_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %10, %swift.opaque* %11, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlFqd__Sv_SitKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %R = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 0
  %10 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 1
  %11 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC5Bytesyqd__qd__SwKXEKlFqd__Sv_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %10, %swift.opaque* %11, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__SpyxGKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [16 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %R = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 0
  %9 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 1
  %10 = load %swift.opaque*, %swift.opaque** %.data, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__SpyxGKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %9, %swift.opaque* %10, i8* %12, i64 %13, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %R = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 0
  %10 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 1
  %11 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %10, %swift.opaque* %11, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlFqd__AEKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [16 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %R = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 0
  %9 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 1
  %10 = load %swift.opaque*, %swift.opaque** %.data, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafeC7Pointeryqd__qd__SpyxG_SitKXEKlFqd__AEKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %9, %swift.opaque* %10, i8* %12, i64 %13, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlFqd__SpyxG_SitKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %R = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 0
  %10 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 1
  %11 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V010withUnsafecA7Pointeryqd__qd__SryxGKXEKlFqd__SpyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %10, %swift.opaque* %11, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare swiftcc void @"$sSi10BufferView07MutableaB0VyxGxlIetMAyyYl_TC"(i8* noalias dereferenceable(32), i1) #0

define linkonce_odr hidden swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$sSlsE22_copyToContiguousArrays0cD0Vy7ElementQzGyFTf4g_n"(%swift.opaque* noalias nocapture %0, %swift.type* %Self, i8** %Self.Collection) #0 {
entry:
  %1 = call swiftcc %Ts28__ContiguousArrayStorageBaseC* @"$ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF"(%swift.opaque* noalias nocapture %0, %swift.type* %Self, i8** %Self.Collection)
  ret %Ts28__ContiguousArrayStorageBaseC* %1
}

define linkonce_odr hidden swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SnyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %0, %TSn.4* noalias nocapture %1, %swift.type* %Self, i8** %Self.Collection) #0 {
entry:
  %2 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 255, i8** %Self.Collection, %swift.type* %Self, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$s5IndexSlTl") #13
  %Self.Index = extractvalue %swift.metadata_response %2, 0
  %3 = extractvalue %swift.metadata_response %2, 1
  %Self.Index.Comparable = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %Self.Collection, %swift.type* %Self, %swift.type* %Self.Index, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$sSl5IndexSl_SLTn") #13
  %4 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %Self.Index, i8** %Self.Index.Comparable) #10
  %5 = extractvalue %swift.metadata_response %4, 0
  %6 = bitcast %swift.type* %5 to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 8
  %size = load i64, i64* %9, align 8, !invariant.load !17
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %TSn.4*
  %12 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %Self.Index) #7
  %13 = extractvalue %swift.metadata_response %12, 0
  %14 = bitcast %swift.type* %13 to i8***
  %15 = getelementptr inbounds i8**, i8*** %14, i64 -1
  %.valueWitnesses1 = load i8**, i8*** %15, align 8, !invariant.load !17, !dereferenceable !18
  %16 = bitcast i8** %.valueWitnesses1 to %swift.vwtable*
  %17 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %16, i32 0, i32 8
  %size2 = load i64, i64* %17, align 8, !invariant.load !17
  %18 = alloca i8, i64 %size2, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %18)
  %19 = bitcast i8* %18 to %swift.opaque*
  %20 = bitcast %TSn.4* %1 to %swift.opaque*
  %21 = call swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %20, %swift.opaque* noalias nocapture %0, %swift.type* swiftself %13, %swift.type* %13, i8** %Self.Index.Comparable)
  %22 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 2
  %23 = load i8*, i8** %22, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %23 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %24 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %19, %swift.opaque* noalias %0, %swift.type* %13) #9
  %25 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 2
  %26 = load i8*, i8** %25, align 8, !invariant.load !17
  %initializeWithCopy3 = bitcast i8* %26 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %27 = bitcast %TSn.4* %11 to %swift.opaque*
  %28 = bitcast %TSn.4* %1 to %swift.opaque*
  %29 = call %swift.opaque* %initializeWithCopy3(%swift.opaque* noalias %27, %swift.opaque* noalias %28, %swift.type* %5) #9
  br i1 %21, label %31, label %30

30:                                               ; preds = %entry
  br label %38

31:                                               ; preds = %entry
  %32 = bitcast %swift.type* %5 to i32*
  %33 = getelementptr inbounds i32, i32* %32, i64 9
  %34 = load i32, i32* %33, align 8
  %35 = bitcast %TSn.4* %11 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i32 %34
  %.upperBound = bitcast i8* %36 to %swift.opaque*
  %37 = call swiftcc i1 @"$sSL1loiySbx_xtFZTj"(%swift.opaque* noalias nocapture %19, %swift.opaque* noalias nocapture %.upperBound, %swift.type* swiftself %13, %swift.type* %13, i8** %Self.Index.Comparable)
  br label %38

38:                                               ; preds = %31, %30
  %39 = phi i1 [ false, %30 ], [ %37, %31 ]
  %40 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 1
  %41 = load i8*, i8** %40, align 8, !invariant.load !17
  %destroy = bitcast i8* %41 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %19, %swift.type* %13) #9
  %42 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %43 = load i8*, i8** %42, align 8, !invariant.load !17
  %destroy4 = bitcast i8* %43 to void (%swift.opaque*, %swift.type*)*
  %44 = bitcast %TSn.4* %11 to %swift.opaque*
  call void %destroy4(%swift.opaque* noalias %44, %swift.type* %5) #9
  %45 = xor i1 %39, true
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  br i1 %46, label %50, label %47

47:                                               ; preds = %38
  %48 = bitcast %swift.opaque* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %48)
  %49 = bitcast %TSn.4* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %49)
  ret void

50:                                               ; preds = %38
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsy5IndexQz_SNyADGtFTf4nnd_n"(%swift.opaque* noalias nocapture %0, %TSN* noalias nocapture %1, %swift.type* %Self, i8** %Self.Collection) #0 {
entry:
  %2 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 255, i8** %Self.Collection, %swift.type* %Self, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$s5IndexSlTl") #13
  %Self.Index = extractvalue %swift.metadata_response %2, 0
  %3 = extractvalue %swift.metadata_response %2, 1
  %Self.Index.Comparable = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %Self.Collection, %swift.type* %Self, %swift.type* %Self.Index, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$sSl5IndexSl_SLTn") #13
  %4 = call swiftcc %swift.metadata_response @"$sSNMa"(i64 0, %swift.type* %Self.Index, i8** %Self.Index.Comparable) #10
  %5 = extractvalue %swift.metadata_response %4, 0
  %6 = bitcast %swift.type* %5 to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 8
  %size = load i64, i64* %9, align 8, !invariant.load !17
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %TSN*
  %12 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %Self.Index) #7
  %13 = extractvalue %swift.metadata_response %12, 0
  %14 = bitcast %swift.type* %13 to i8***
  %15 = getelementptr inbounds i8**, i8*** %14, i64 -1
  %.valueWitnesses1 = load i8**, i8*** %15, align 8, !invariant.load !17, !dereferenceable !18
  %16 = bitcast i8** %.valueWitnesses1 to %swift.vwtable*
  %17 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %16, i32 0, i32 8
  %size2 = load i64, i64* %17, align 8, !invariant.load !17
  %18 = alloca i8, i64 %size2, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %18)
  %19 = bitcast i8* %18 to %swift.opaque*
  %20 = bitcast %TSN* %1 to %swift.opaque*
  %21 = call swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %20, %swift.opaque* noalias nocapture %0, %swift.type* swiftself %13, %swift.type* %13, i8** %Self.Index.Comparable)
  %22 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 2
  %23 = load i8*, i8** %22, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %23 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %24 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %19, %swift.opaque* noalias %0, %swift.type* %13) #9
  %25 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 2
  %26 = load i8*, i8** %25, align 8, !invariant.load !17
  %initializeWithCopy3 = bitcast i8* %26 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %27 = bitcast %TSN* %11 to %swift.opaque*
  %28 = bitcast %TSN* %1 to %swift.opaque*
  %29 = call %swift.opaque* %initializeWithCopy3(%swift.opaque* noalias %27, %swift.opaque* noalias %28, %swift.type* %5) #9
  br i1 %21, label %31, label %30

30:                                               ; preds = %entry
  br label %38

31:                                               ; preds = %entry
  %32 = bitcast %swift.type* %5 to i32*
  %33 = getelementptr inbounds i32, i32* %32, i64 9
  %34 = load i32, i32* %33, align 8
  %35 = bitcast %TSN* %11 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i32 %34
  %.upperBound = bitcast i8* %36 to %swift.opaque*
  %37 = call swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %19, %swift.opaque* noalias nocapture %.upperBound, %swift.type* swiftself %13, %swift.type* %13, i8** %Self.Index.Comparable)
  br label %38

38:                                               ; preds = %31, %30
  %39 = phi i1 [ false, %30 ], [ %37, %31 ]
  %40 = getelementptr inbounds i8*, i8** %.valueWitnesses1, i32 1
  %41 = load i8*, i8** %40, align 8, !invariant.load !17
  %destroy = bitcast i8* %41 to void (%swift.opaque*, %swift.type*)*
  call void %destroy(%swift.opaque* noalias %19, %swift.type* %13) #9
  %42 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %43 = load i8*, i8** %42, align 8, !invariant.load !17
  %destroy4 = bitcast i8* %43 to void (%swift.opaque*, %swift.type*)*
  %44 = bitcast %TSN* %11 to %swift.opaque*
  call void %destroy4(%swift.opaque* noalias %44, %swift.type* %5) #9
  %45 = xor i1 %39, true
  %46 = call i1 @llvm.expect.i1(i1 %45, i1 false)
  br i1 %46, label %50, label %47

47:                                               ; preds = %38
  %48 = bitcast %swift.opaque* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %48)
  %49 = bitcast %TSN* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %49)
  ret void

50:                                               ; preds = %38
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc void @"$sSlsE20_failEarlyRangeCheck_6boundsySny5IndexQzG_AEtFTf4nnd_n"(%TSn.4* noalias nocapture %0, %TSn.4* noalias nocapture %1, %swift.type* %Self, i8** %Self.Collection) #0 {
entry:
  %2 = call swiftcc %swift.metadata_response @swift_getAssociatedTypeWitness(i64 255, i8** %Self.Collection, %swift.type* %Self, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$s5IndexSlTl") #13
  %Self.Index = extractvalue %swift.metadata_response %2, 0
  %3 = extractvalue %swift.metadata_response %2, 1
  %Self.Index.Comparable = call swiftcc i8** @swift_getAssociatedConformanceWitness(i8** %Self.Collection, %swift.type* %Self, %swift.type* %Self.Index, %swift.protocol_requirement* @"$sSlTL", %swift.protocol_requirement* @"$sSl5IndexSl_SLTn") #13
  %4 = call swiftcc %swift.metadata_response @"$sSnMa"(i64 0, %swift.type* %Self.Index, i8** %Self.Index.Comparable) #10
  %5 = extractvalue %swift.metadata_response %4, 0
  %6 = bitcast %swift.type* %5 to i8***
  %7 = getelementptr inbounds i8**, i8*** %6, i64 -1
  %.valueWitnesses = load i8**, i8*** %7, align 8, !invariant.load !17, !dereferenceable !18
  %8 = bitcast i8** %.valueWitnesses to %swift.vwtable*
  %9 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %8, i32 0, i32 8
  %size = load i64, i64* %9, align 8, !invariant.load !17
  %10 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %10)
  %11 = bitcast i8* %10 to %TSn.4*
  %12 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %12)
  %13 = bitcast i8* %12 to %TSn.4*
  %14 = call swiftcc %swift.metadata_response @swift_checkMetadataState(i64 0, %swift.type* %Self.Index) #7
  %15 = extractvalue %swift.metadata_response %14, 0
  %16 = bitcast %TSn.4* %1 to %swift.opaque*
  %17 = bitcast %TSn.4* %0 to %swift.opaque*
  %18 = call swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %16, %swift.opaque* noalias nocapture %17, %swift.type* swiftself %15, %swift.type* %15, i8** %Self.Index.Comparable)
  %19 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 2
  %20 = load i8*, i8** %19, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %20 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %21 = bitcast %TSn.4* %13 to %swift.opaque*
  %22 = bitcast %TSn.4* %0 to %swift.opaque*
  %23 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %21, %swift.opaque* noalias %22, %swift.type* %5) #9
  %24 = bitcast %TSn.4* %11 to %swift.opaque*
  %25 = bitcast %TSn.4* %1 to %swift.opaque*
  %26 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %24, %swift.opaque* noalias %25, %swift.type* %5) #9
  br i1 %18, label %28, label %27

27:                                               ; preds = %entry
  br label %40

28:                                               ; preds = %entry
  %29 = bitcast %swift.type* %5 to i32*
  %30 = getelementptr inbounds i32, i32* %29, i64 9
  %31 = load i32, i32* %30, align 8
  %32 = bitcast %TSn.4* %13 to i8*
  %33 = getelementptr inbounds i8, i8* %32, i32 %31
  %.upperBound = bitcast i8* %33 to %swift.opaque*
  %34 = bitcast %swift.type* %5 to i32*
  %35 = getelementptr inbounds i32, i32* %34, i64 9
  %36 = load i32, i32* %35, align 8
  %37 = bitcast %TSn.4* %11 to i8*
  %38 = getelementptr inbounds i8, i8* %37, i32 %36
  %.upperBound1 = bitcast i8* %38 to %swift.opaque*
  %39 = call swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture %.upperBound, %swift.opaque* noalias nocapture %.upperBound1, %swift.type* swiftself %15, %swift.type* %15, i8** %Self.Index.Comparable)
  br label %40

40:                                               ; preds = %28, %27
  %41 = phi i1 [ false, %27 ], [ %39, %28 ]
  %42 = getelementptr inbounds i8*, i8** %.valueWitnesses, i32 1
  %43 = load i8*, i8** %42, align 8, !invariant.load !17
  %destroy = bitcast i8* %43 to void (%swift.opaque*, %swift.type*)*
  %44 = bitcast %TSn.4* %13 to %swift.opaque*
  call void %destroy(%swift.opaque* noalias %44, %swift.type* %5) #9
  %45 = bitcast %TSn.4* %11 to %swift.opaque*
  call void %destroy(%swift.opaque* noalias %45, %swift.type* %5) #9
  %46 = xor i1 %41, true
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false)
  br i1 %47, label %51, label %48

48:                                               ; preds = %40
  %49 = bitcast %TSn.4* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %49)
  %50 = bitcast %TSn.4* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %50)
  ret void

51:                                               ; preds = %40
  call void asm sideeffect "", "n"(i32 0)
  call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden swiftcc { i8*, i64 } @"$s10BufferViewAAV11baseAddress5count9dependsOnAByxGSV_Siqd__tclufCTf4nngn_n"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %2, %swift.type* %Element, %swift.type* %Owner) #0 {
entry:
  %3 = bitcast %swift.type* %Owner to i8***
  %4 = getelementptr inbounds i8**, i8*** %3, i64 -1
  %Owner.valueWitnesses = load i8**, i8*** %4, align 8, !invariant.load !17, !dereferenceable !18
  %5 = bitcast i8** %Owner.valueWitnesses to %swift.vwtable*
  %6 = getelementptr inbounds %swift.vwtable, %swift.vwtable* %5, i32 0, i32 8
  %size = load i64, i64* %6, align 8, !invariant.load !17
  %7 = alloca i8, i64 %size, align 16
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %7)
  %8 = bitcast i8* %7 to %swift.opaque*
  %9 = getelementptr inbounds i8*, i8** %Owner.valueWitnesses, i32 2
  %10 = load i8*, i8** %9, align 8, !invariant.load !17
  %initializeWithCopy = bitcast i8* %10 to %swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)*
  %11 = call %swift.opaque* %initializeWithCopy(%swift.opaque* noalias %8, %swift.opaque* noalias %2, %swift.type* %Owner) #9
  %12 = call swiftcc { i8*, i64 } @"$s10BufferViewAAV5start5count9dependsOnAByxGAA0aB5IndexVyxG_Siqd__tclufC"(i8* %0, i64 %1, %swift.opaque* noalias nocapture %8, %swift.type* %Element, %swift.type* %Owner)
  %13 = extractvalue { i8*, i64 } %12, 0
  %14 = extractvalue { i8*, i64 } %12, 1
  %15 = bitcast %swift.opaque* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %15)
  %16 = insertvalue { i8*, i64 } undef, i8* %13, 0
  %17 = insertvalue { i8*, i64 } %16, i64 %14, 1
  ret { i8*, i64 } %17
}

define internal swiftcc void @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__ADKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %4, i32 0, i32 1
  %6 = bitcast [16 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %R = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %4, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 0
  %9 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %8, i32 0, i32 1
  %10 = load %swift.opaque*, %swift.opaque** %.data, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function, %T10BufferViewAAV }>* %4, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferViewAAV17withUnsafePointeryqd__qd__SPyxG_SitKXEKlFqd__ADKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %9, %swift.opaque* %10, i8* %12, i64 %13, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %Element = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %R = load %swift.type*, %swift.type** %8, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>, <{ %swift.refcounted, [16 x i8], %swift.noescape.function }>* %5, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 0
  %10 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %9, i32 0, i32 1
  %11 = load %swift.opaque*, %swift.opaque** %.data, align 8
  tail call swiftcc void @"$s10BufferViewAAV010withUnsafeA7Pointeryqd__qd__SRyxGKXEKlFqd__SPyxG_SitKXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i64 %2, i8* %10, %swift.opaque* %11, %swift.type* %Element, %swift.type* %R, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

declare swiftcc void @"$ss6HasherV8_combineyySuF"(i64, %Ts6HasherV* nocapture swiftself dereferenceable(72)) #0

declare swiftcc void @"$ss6HasherV5_seedABSi_tcfC"(%Ts6HasherV* noalias nocapture sret(%Ts6HasherV), i64) #0

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #12

declare swiftcc i64 @"$ss6HasherV9_finalizeSiyF"(%Ts6HasherV* nocapture swiftself dereferenceable(72)) #0

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #4

define internal swiftcc void @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlFSpyAJG4base_Si5counttSRyAJGXEfU_TA"(<{ %TSp, %TSi }>* noalias nocapture sret(<{ %TSp, %TSi }>) %0, i64 %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>* %5, i32 0, i32 1
  %7 = bitcast [16 x i8]* %6 to %swift.type**
  %C = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %7, i32 1
  %9 = bitcast %swift.type** %8 to i8***
  %C.Collection = load i8**, i8*** %9, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [16 x i8], %T10BufferView09OutputRawA0V }>* %5, i32 0, i32 2
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %10, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  %11 = load i8*, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %10, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %12 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView09OutputRawA0V16initializeMemory2as14fromContentsOfAA07MutableaB0Vy7ElementQzGAJm_xtSlRzlFSpyAJG4base_Si5counttSRyAJGXEfU_"(<{ %TSp, %TSi }>* noalias nocapture sret(<{ %TSp, %TSi }>) %0, i64 %1, i64 %2, i8* %11, i64 %12, %swift.type* %C, i8** %C.Collection, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

declare swiftcc %swift.metadata_response @"$sSpMa"(i64, %swift.type*) #0

declare swiftcc %swift.metadata_response @"$sSrMa"(i64, %swift.type*) #0

define internal swiftcc void @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlFSiAIKXEfU_TA"(%TSi* noalias nocapture sret(%TSi) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %T = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %4, i32 0, i32 2
  %.fn = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %7, i32 0, i32 0
  %8 = load i8*, i8** %.fn, align 8
  %.data = getelementptr inbounds %swift.noescape.function, %swift.noescape.function* %7, i32 0, i32 1
  %9 = load %swift.opaque*, %swift.opaque** %.data, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>, <{ %swift.refcounted, [8 x i8], %swift.noescape.function, %T10BufferView09OutputRawA0V }>* %4, i32 0, i32 3
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %10, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  %11 = load i8*, i8** %.baseAddress._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %10, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %12 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView09OutputRawA0V24withUnsafeMutablePointer2as_AA0gaB0VyxGxm_SiSpyxG_SitKXEtKlFSiAIKXEfU_"(%TSi* noalias nocapture sret(%TSi) %0, i8* %1, i8* %8, %swift.opaque* %9, i8* %11, i64 %12, %swift.type* %T, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSTAA8IteratorST_StWT"(%swift.type* %"MutableBufferView<Element>.Iterator", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.Sequence") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.Iterator", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSlAASTWb"(%swift.type* %"MutableBufferView<Element>", %swift.type* %"MutableBufferView<Element>1", i8** %"MutableBufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSTAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSlAA5IndexSl_SLWT"(%swift.type* %"MutableBufferView<Element>.Index", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.Index", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSlAA7IndicesSl_SlWT"(%swift.type* %"MutableBufferView<Element>.Indices", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.Collection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"MutableBufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %"MutableBufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSlAA11SubSequenceSl_SlWT"(%swift.type* %"MutableBufferView<Element>.SubSequence", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSMAASlWb"(%swift.type* %"MutableBufferView<Element>", %swift.type* %"MutableBufferView<Element>1", i8** %"MutableBufferView<Element>.MutableCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSMAA11SubSequenceSl_SMWT"(%swift.type* %"MutableBufferView<Element>.SubSequence", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.MutableCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSMAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSKAASlWb"(%swift.type* %"MutableBufferView<Element>", %swift.type* %"MutableBufferView<Element>1", i8** %"MutableBufferView<Element>.BidirectionalCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSKAA7IndicesSl_SKWT"(%swift.type* %"MutableBufferView<Element>.Indices", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.BidirectionalCollection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"MutableBufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSKsSxRzSZ6StrideRpzrlMc", %swift.type* %"MutableBufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSKAA11SubSequenceSl_SKWT"(%swift.type* %"MutableBufferView<Element>.SubSequence", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.BidirectionalCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSkAASKWb"(%swift.type* %"MutableBufferView<Element>", %swift.type* %"MutableBufferView<Element>1", i8** %"MutableBufferView<Element>.RandomAccessCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSKAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSkAA7IndicesSl_SkWT"(%swift.type* %"MutableBufferView<Element>.Indices", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.RandomAccessCollection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"MutableBufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSksSxRzSZ6StrideRpzrlMc", %swift.type* %"MutableBufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView07MutableaB0VyxGSkAA11SubSequenceSl_SkWT"(%swift.type* %"MutableBufferView<Element>.SubSequence", %swift.type* %"MutableBufferView<Element>", i8** %"MutableBufferView<Element>.RandomAccessCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView07MutableaB0VyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"MutableBufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSTAA8IteratorST_StWT"(%swift.type* %"BufferView<Element>.Iterator", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.Sequence") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB8IteratorVyxGStAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>.Iterator", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSlAASTWb"(%swift.type* %"BufferView<Element>", %swift.type* %"BufferView<Element>1", i8** %"BufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSTAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSlAA5IndexSl_SLWT"(%swift.type* %"BufferView<Element>.Index", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>.Index", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSlAA7IndicesSl_SlWT"(%swift.type* %"BufferView<Element>.Indices", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.Collection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"BufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSlsSxRzSZ6StrideRpzrlMc", %swift.type* %"BufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSlAA11SubSequenceSl_SlWT"(%swift.type* %"BufferView<Element>.SubSequence", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.Collection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSKAASlWb"(%swift.type* %"BufferView<Element>", %swift.type* %"BufferView<Element>1", i8** %"BufferView<Element>.BidirectionalCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSlAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSKAA7IndicesSl_SKWT"(%swift.type* %"BufferView<Element>.Indices", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.BidirectionalCollection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"BufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSKsSxRzSZ6StrideRpzrlMc", %swift.type* %"BufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSKAA11SubSequenceSl_SKWT"(%swift.type* %"BufferView<Element>.SubSequence", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.BidirectionalCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSkAASKWb"(%swift.type* %"BufferView<Element>", %swift.type* %"BufferView<Element>1", i8** %"BufferView<Element>.RandomAccessCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSKAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSkAA7IndicesSl_SkWT"(%swift.type* %"BufferView<Element>.Indices", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.RandomAccessCollection") #14 {
entry:
  %conditional.requirement.buffer = alloca [2 x i8**], align 8
  %0 = bitcast %swift.type* %"BufferView<Element>.Indices" to %swift.type**
  %1 = getelementptr inbounds %swift.type*, %swift.type** %0, i64 2
  %"BufferViewIndex<Element>" = load %swift.type*, %swift.type** %1, align 8, !invariant.load !17
  %2 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSxAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  %3 = call i8** @"$sS2iSZsWl"() #10
  %4 = getelementptr inbounds [2 x i8**], [2 x i8**]* %conditional.requirement.buffer, i32 0, i32 0
  %5 = getelementptr inbounds i8**, i8*** %4, i32 0
  store i8** %2, i8*** %5, align 8
  %6 = getelementptr inbounds i8**, i8*** %4, i32 1
  store i8** %3, i8*** %6, align 8
  %7 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* @"$sSnyxGSksSxRzSZ6StrideRpzrlMc", %swift.type* %"BufferView<Element>.Indices", i8*** %4) #8
  ret i8** %7
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferViewAAVyxGSkAA11SubSequenceSl_SkWT"(%swift.type* %"BufferView<Element>.SubSequence", %swift.type* %"BufferView<Element>", i8** %"BufferView<Element>.RandomAccessCollection") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferViewAAVyxGSkAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferView<Element>.SubSequence", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView0aB5IndexVyxGSHAASQWb"(%swift.type* %"BufferViewIndex<Element>", %swift.type* %"BufferViewIndex<Element>1", i8** %"BufferViewIndex<Element>.Hashable") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView0aB5IndexVyxGSxAASLWb"(%swift.type* %"BufferViewIndex<Element>", %swift.type* %"BufferViewIndex<Element>1", i8** %"BufferViewIndex<Element>.Strideable") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSLAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView0aB5IndexVyxGSxAA6StrideSx_SLWT"(%swift.type* %"BufferViewIndex<Element>.Stride", %swift.type* %"BufferViewIndex<Element>", i8** %"BufferViewIndex<Element>.Strideable") #14 {
entry:
  ret i8** @"$sSiSLsWP"
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView0aB5IndexVyxGSxAA6StrideSx_s13SignedNumericPWT"(%swift.type* %"BufferViewIndex<Element>.Stride", %swift.type* %"BufferViewIndex<Element>", i8** %"BufferViewIndex<Element>.Strideable") #14 {
entry:
  ret i8** @"$sSis13SignedNumericsWP"
}

; Function Attrs: nounwind
define internal swiftcc i8** @"$s10BufferView0aB5IndexVyxGSLAASQWb"(%swift.type* %"BufferViewIndex<Element>", %swift.type* %"BufferViewIndex<Element>1", i8** %"BufferViewIndex<Element>.Comparable") #14 {
entry:
  %0 = call i8** @swift_getWitnessTable(%swift.protocol_conformance_descriptor* bitcast ({ i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32 }* @"$s10BufferView0aB5IndexVyxGSQAAMc" to %swift.protocol_conformance_descriptor*), %swift.type* %"BufferViewIndex<Element>", i8*** undef) #8
  ret i8** %0
}

; Function Attrs: nounwind
define internal %swift.type* @"$s10BufferView07MutableaB0VMi"(%swift.type_descriptor* %0, i8** %1, i8* %2) #14 {
entry:
  %3 = bitcast i8** %1 to %swift.type**
  %Element = load %swift.type*, %swift.type** %3, align 8
  %4 = call %swift.type* @swift_allocateGenericValueMetadata(%swift.type_descriptor* %0, i8** %1, i8* %2, i64 16) #9
  ret %swift.type* %4
}

; Function Attrs: nounwind
define linkonce_odr hidden i8* @__swift_memcpy16_8(i8* %0, i8* %1, %swift.type* %2) #14 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 16, i1 false)
  ret i8* %0
}

; Function Attrs: nounwind
define linkonce_odr hidden void @__swift_noop_void_return(i8* %0, %swift.type* %1) #14 {
entry:
  ret void
}

; Function Attrs: nounwind readonly
define internal i32 @"$s10BufferView07MutableaB0Vwet"(%swift.opaque* noalias %value, i32 %numEmptyCases, %swift.type* %"MutableBufferView<Element>") #15 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView07MutableaB0V*
  %1 = icmp eq i32 0, %numEmptyCases
  br i1 %1, label %40, label %2

2:                                                ; preds = %entry
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %35

4:                                                ; preds = %2
  %5 = sub i32 %numEmptyCases, 1
  %6 = bitcast %T10BufferView07MutableaB0V* %0 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i32 16
  br i1 false, label %8, label %9

8:                                                ; preds = %4
  br label %23

9:                                                ; preds = %4
  br i1 true, label %10, label %13

10:                                               ; preds = %9
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  br label %23

13:                                               ; preds = %9
  br i1 false, label %14, label %18

14:                                               ; preds = %13
  %15 = bitcast i8* %7 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = zext i16 %16 to i32
  br label %23

18:                                               ; preds = %13
  br i1 false, label %19, label %22

19:                                               ; preds = %18
  %20 = bitcast i8* %7 to i32*
  %21 = load i32, i32* %20, align 1
  br label %23

22:                                               ; preds = %18
  unreachable

23:                                               ; preds = %19, %14, %10, %8
  %24 = phi i32 [ 0, %8 ], [ %12, %10 ], [ %17, %14 ], [ %21, %19 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = sub i32 %24, 1
  %28 = shl i32 %27, 128
  %29 = select i1 true, i32 0, i32 %28
  %30 = bitcast i8* %6 to i128*
  %31 = load i128, i128* %30, align 1
  %32 = trunc i128 %31 to i32
  %33 = or i32 %32, %29
  %34 = add i32 1, %33
  br label %41

35:                                               ; preds = %23, %2
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %36 = bitcast i8** %.start._rawValue._rawValue to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  %39 = sext i1 %38 to i32
  br label %41

40:                                               ; preds = %entry
  br label %41

41:                                               ; preds = %40, %35, %26
  %42 = phi i32 [ %39, %35 ], [ %34, %26 ], [ -1, %40 ]
  %43 = add i32 %42, 1
  ret i32 %43
}

; Function Attrs: nounwind
define internal void @"$s10BufferView07MutableaB0Vwst"(%swift.opaque* noalias %value, i32 %whichCase, i32 %numEmptyCases, %swift.type* %"MutableBufferView<Element>") #14 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView07MutableaB0V*
  %1 = bitcast %T10BufferView07MutableaB0V* %0 to i8*
  %2 = getelementptr inbounds i8, i8* %1, i32 16
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %6

4:                                                ; preds = %entry
  %5 = sub i32 %numEmptyCases, 1
  br label %6

6:                                                ; preds = %4, %entry
  %7 = phi i32 [ 0, %entry ], [ 1, %4 ]
  %8 = icmp ule i32 %whichCase, 1
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  br label %24

12:                                               ; preds = %9
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i8 0, i8* %2, align 8
  br label %24

15:                                               ; preds = %12
  %16 = icmp eq i32 %7, 2
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast i8* %2 to i16*
  store i16 0, i16* %18, align 8
  br label %24

19:                                               ; preds = %15
  %20 = icmp eq i32 %7, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %2 to i32*
  store i32 0, i32* %22, align 8
  br label %24

23:                                               ; preds = %19
  unreachable

24:                                               ; preds = %21, %17, %14, %11
  %25 = icmp eq i32 %whichCase, 0
  br i1 %25, label %58, label %26

26:                                               ; preds = %24
  %27 = sub i32 %whichCase, 1
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %28 = bitcast i8** %.start._rawValue._rawValue to i64*
  store i64 0, i64* %28, align 8
  br label %58

29:                                               ; preds = %6
  %30 = sub i32 %whichCase, 1
  %31 = sub i32 %30, 1
  br i1 true, label %36, label %32

32:                                               ; preds = %29
  %33 = lshr i32 %31, 128
  %34 = add i32 1, %33
  %35 = and i32 poison, %31
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i32 [ 1, %29 ], [ %34, %32 ]
  %38 = phi i32 [ %31, %29 ], [ %35, %32 ]
  %39 = zext i32 %38 to i128
  %40 = bitcast i8* %1 to i128*
  store i128 %39, i128* %40, align 8
  %41 = icmp eq i32 %7, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %57

43:                                               ; preds = %36
  %44 = icmp eq i32 %7, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = trunc i32 %37 to i8
  store i8 %46, i8* %2, align 8
  br label %57

47:                                               ; preds = %43
  %48 = icmp eq i32 %7, 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = trunc i32 %37 to i16
  %51 = bitcast i8* %2 to i16*
  store i16 %50, i16* %51, align 8
  br label %57

52:                                               ; preds = %47
  %53 = icmp eq i32 %7, 4
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast i8* %2 to i32*
  store i32 %37, i32* %55, align 8
  br label %57

56:                                               ; preds = %52
  unreachable

57:                                               ; preds = %54, %49, %45, %42
  br label %58

58:                                               ; preds = %57, %26, %24
  ret void
}

; Function Attrs: nounwind
declare %swift.type* @swift_allocateGenericValueMetadata(%swift.type_descriptor*, i8**, i8*, i64) #9

; Function Attrs: nounwind
define internal %swift.type* @"$s10BufferViewAAVMi"(%swift.type_descriptor* %0, i8** %1, i8* %2) #14 {
entry:
  %3 = bitcast i8** %1 to %swift.type**
  %Element = load %swift.type*, %swift.type** %3, align 8
  %4 = call %swift.type* @swift_allocateGenericValueMetadata(%swift.type_descriptor* %0, i8** %1, i8* %2, i64 16) #9
  ret %swift.type* %4
}

; Function Attrs: nounwind readonly
define internal i32 @"$s10BufferViewAAVwet"(%swift.opaque* noalias %value, i32 %numEmptyCases, %swift.type* %"BufferView<Element>") #15 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferViewAAV*
  %1 = icmp eq i32 0, %numEmptyCases
  br i1 %1, label %40, label %2

2:                                                ; preds = %entry
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %35

4:                                                ; preds = %2
  %5 = sub i32 %numEmptyCases, 1
  %6 = bitcast %T10BufferViewAAV* %0 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i32 16
  br i1 false, label %8, label %9

8:                                                ; preds = %4
  br label %23

9:                                                ; preds = %4
  br i1 true, label %10, label %13

10:                                               ; preds = %9
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  br label %23

13:                                               ; preds = %9
  br i1 false, label %14, label %18

14:                                               ; preds = %13
  %15 = bitcast i8* %7 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = zext i16 %16 to i32
  br label %23

18:                                               ; preds = %13
  br i1 false, label %19, label %22

19:                                               ; preds = %18
  %20 = bitcast i8* %7 to i32*
  %21 = load i32, i32* %20, align 1
  br label %23

22:                                               ; preds = %18
  unreachable

23:                                               ; preds = %19, %14, %10, %8
  %24 = phi i32 [ 0, %8 ], [ %12, %10 ], [ %17, %14 ], [ %21, %19 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = sub i32 %24, 1
  %28 = shl i32 %27, 128
  %29 = select i1 true, i32 0, i32 %28
  %30 = bitcast i8* %6 to i128*
  %31 = load i128, i128* %30, align 1
  %32 = trunc i128 %31 to i32
  %33 = or i32 %32, %29
  %34 = add i32 1, %33
  br label %41

35:                                               ; preds = %23, %2
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %36 = bitcast i8** %.start._rawValue._rawValue to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  %39 = sext i1 %38 to i32
  br label %41

40:                                               ; preds = %entry
  br label %41

41:                                               ; preds = %40, %35, %26
  %42 = phi i32 [ %39, %35 ], [ %34, %26 ], [ -1, %40 ]
  %43 = add i32 %42, 1
  ret i32 %43
}

; Function Attrs: nounwind
define internal void @"$s10BufferViewAAVwst"(%swift.opaque* noalias %value, i32 %whichCase, i32 %numEmptyCases, %swift.type* %"BufferView<Element>") #14 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferViewAAV*
  %1 = bitcast %T10BufferViewAAV* %0 to i8*
  %2 = getelementptr inbounds i8, i8* %1, i32 16
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %6

4:                                                ; preds = %entry
  %5 = sub i32 %numEmptyCases, 1
  br label %6

6:                                                ; preds = %4, %entry
  %7 = phi i32 [ 0, %entry ], [ 1, %4 ]
  %8 = icmp ule i32 %whichCase, 1
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  br label %24

12:                                               ; preds = %9
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i8 0, i8* %2, align 8
  br label %24

15:                                               ; preds = %12
  %16 = icmp eq i32 %7, 2
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast i8* %2 to i16*
  store i16 0, i16* %18, align 8
  br label %24

19:                                               ; preds = %15
  %20 = icmp eq i32 %7, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %2 to i32*
  store i32 0, i32* %22, align 8
  br label %24

23:                                               ; preds = %19
  unreachable

24:                                               ; preds = %21, %17, %14, %11
  %25 = icmp eq i32 %whichCase, 0
  br i1 %25, label %58, label %26

26:                                               ; preds = %24
  %27 = sub i32 %whichCase, 1
  %.start = getelementptr inbounds %T10BufferViewAAV, %T10BufferViewAAV* %0, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %28 = bitcast i8** %.start._rawValue._rawValue to i64*
  store i64 0, i64* %28, align 8
  br label %58

29:                                               ; preds = %6
  %30 = sub i32 %whichCase, 1
  %31 = sub i32 %30, 1
  br i1 true, label %36, label %32

32:                                               ; preds = %29
  %33 = lshr i32 %31, 128
  %34 = add i32 1, %33
  %35 = and i32 poison, %31
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i32 [ 1, %29 ], [ %34, %32 ]
  %38 = phi i32 [ %31, %29 ], [ %35, %32 ]
  %39 = zext i32 %38 to i128
  %40 = bitcast i8* %1 to i128*
  store i128 %39, i128* %40, align 8
  %41 = icmp eq i32 %7, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %57

43:                                               ; preds = %36
  %44 = icmp eq i32 %7, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = trunc i32 %37 to i8
  store i8 %46, i8* %2, align 8
  br label %57

47:                                               ; preds = %43
  %48 = icmp eq i32 %7, 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = trunc i32 %37 to i16
  %51 = bitcast i8* %2 to i16*
  store i16 %50, i16* %51, align 8
  br label %57

52:                                               ; preds = %47
  %53 = icmp eq i32 %7, 4
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast i8* %2 to i32*
  store i32 %37, i32* %55, align 8
  br label %57

56:                                               ; preds = %52
  unreachable

57:                                               ; preds = %54, %49, %45, %42
  br label %58

58:                                               ; preds = %57, %26, %24
  ret void
}

; Function Attrs: nounwind
define internal %swift.type* @"$s10BufferView0aB5IndexVMi"(%swift.type_descriptor* %0, i8** %1, i8* %2) #14 {
entry:
  %3 = bitcast i8** %1 to %swift.type**
  %Element = load %swift.type*, %swift.type** %3, align 8
  %4 = call %swift.type* @swift_allocateGenericValueMetadata(%swift.type_descriptor* %0, i8** %1, i8* %2, i64 16) #9
  ret %swift.type* %4
}

; Function Attrs: nounwind
define linkonce_odr hidden i8* @__swift_memcpy8_8(i8* %0, i8* %1, %swift.type* %2) #14 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 8, i1 false)
  ret i8* %0
}

; Function Attrs: nounwind readonly
define internal i32 @"$s10BufferView0aB5IndexVwet"(%swift.opaque* noalias %value, i32 %numEmptyCases, %swift.type* %"BufferViewIndex<Element>") #15 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView0aB5IndexV*
  %1 = icmp eq i32 0, %numEmptyCases
  br i1 %1, label %40, label %2

2:                                                ; preds = %entry
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %35

4:                                                ; preds = %2
  %5 = sub i32 %numEmptyCases, 1
  %6 = bitcast %T10BufferView0aB5IndexV* %0 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i32 8
  br i1 false, label %8, label %9

8:                                                ; preds = %4
  br label %23

9:                                                ; preds = %4
  br i1 true, label %10, label %13

10:                                               ; preds = %9
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  br label %23

13:                                               ; preds = %9
  br i1 false, label %14, label %18

14:                                               ; preds = %13
  %15 = bitcast i8* %7 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = zext i16 %16 to i32
  br label %23

18:                                               ; preds = %13
  br i1 false, label %19, label %22

19:                                               ; preds = %18
  %20 = bitcast i8* %7 to i32*
  %21 = load i32, i32* %20, align 1
  br label %23

22:                                               ; preds = %18
  unreachable

23:                                               ; preds = %19, %14, %10, %8
  %24 = phi i32 [ 0, %8 ], [ %12, %10 ], [ %17, %14 ], [ %21, %19 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = sub i32 %24, 1
  %28 = shl i32 %27, 64
  %29 = select i1 true, i32 0, i32 %28
  %30 = bitcast i8* %6 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = trunc i64 %31 to i32
  %33 = or i32 %32, %29
  %34 = add i32 1, %33
  br label %41

35:                                               ; preds = %23, %2
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %36 = bitcast i8** %._rawValue._rawValue to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  %39 = sext i1 %38 to i32
  br label %41

40:                                               ; preds = %entry
  br label %41

41:                                               ; preds = %40, %35, %26
  %42 = phi i32 [ %39, %35 ], [ %34, %26 ], [ -1, %40 ]
  %43 = add i32 %42, 1
  ret i32 %43
}

; Function Attrs: nounwind
define internal void @"$s10BufferView0aB5IndexVwst"(%swift.opaque* noalias %value, i32 %whichCase, i32 %numEmptyCases, %swift.type* %"BufferViewIndex<Element>") #14 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView0aB5IndexV*
  %1 = bitcast %T10BufferView0aB5IndexV* %0 to i8*
  %2 = getelementptr inbounds i8, i8* %1, i32 8
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %6

4:                                                ; preds = %entry
  %5 = sub i32 %numEmptyCases, 1
  br label %6

6:                                                ; preds = %4, %entry
  %7 = phi i32 [ 0, %entry ], [ 1, %4 ]
  %8 = icmp ule i32 %whichCase, 1
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  br label %24

12:                                               ; preds = %9
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i8 0, i8* %2, align 8
  br label %24

15:                                               ; preds = %12
  %16 = icmp eq i32 %7, 2
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast i8* %2 to i16*
  store i16 0, i16* %18, align 8
  br label %24

19:                                               ; preds = %15
  %20 = icmp eq i32 %7, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %2 to i32*
  store i32 0, i32* %22, align 8
  br label %24

23:                                               ; preds = %19
  unreachable

24:                                               ; preds = %21, %17, %14, %11
  %25 = icmp eq i32 %whichCase, 0
  br i1 %25, label %58, label %26

26:                                               ; preds = %24
  %27 = sub i32 %whichCase, 1
  %._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %0, i32 0, i32 0
  %._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %._rawValue, i32 0, i32 0
  %28 = bitcast i8** %._rawValue._rawValue to i64*
  store i64 0, i64* %28, align 8
  br label %58

29:                                               ; preds = %6
  %30 = sub i32 %whichCase, 1
  %31 = sub i32 %30, 1
  br i1 true, label %36, label %32

32:                                               ; preds = %29
  %33 = lshr i32 %31, 64
  %34 = add i32 1, %33
  %35 = and i32 poison, %31
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i32 [ 1, %29 ], [ %34, %32 ]
  %38 = phi i32 [ %31, %29 ], [ %35, %32 ]
  %39 = zext i32 %38 to i64
  %40 = bitcast i8* %1 to i64*
  store i64 %39, i64* %40, align 8
  %41 = icmp eq i32 %7, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %57

43:                                               ; preds = %36
  %44 = icmp eq i32 %7, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = trunc i32 %37 to i8
  store i8 %46, i8* %2, align 8
  br label %57

47:                                               ; preds = %43
  %48 = icmp eq i32 %7, 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = trunc i32 %37 to i16
  %51 = bitcast i8* %2 to i16*
  store i16 %50, i16* %51, align 8
  br label %57

52:                                               ; preds = %47
  %53 = icmp eq i32 %7, 4
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast i8* %2 to i32*
  store i32 %37, i32* %55, align 8
  br label %57

56:                                               ; preds = %52
  unreachable

57:                                               ; preds = %54, %49, %45, %42
  br label %58

58:                                               ; preds = %57, %26, %24
  ret void
}

; Function Attrs: nounwind
define internal %swift.type* @"$s10BufferView0aB8IteratorVMi"(%swift.type_descriptor* %0, i8** %1, i8* %2) #14 {
entry:
  %3 = bitcast i8** %1 to %swift.type**
  %Element = load %swift.type*, %swift.type** %3, align 8
  %4 = call %swift.type* @swift_allocateGenericValueMetadata(%swift.type_descriptor* %0, i8** %1, i8* %2, i64 16) #9
  ret %swift.type* %4
}

; Function Attrs: nounwind readonly
define internal i32 @"$s10BufferView0aB8IteratorVwet"(%swift.opaque* noalias %value, i32 %numEmptyCases, %swift.type* %"BufferViewIterator<Element>") #15 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView0aB8IteratorV*
  %1 = icmp eq i32 0, %numEmptyCases
  br i1 %1, label %40, label %2

2:                                                ; preds = %entry
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %35

4:                                                ; preds = %2
  %5 = sub i32 %numEmptyCases, 1
  %6 = bitcast %T10BufferView0aB8IteratorV* %0 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i32 16
  br i1 false, label %8, label %9

8:                                                ; preds = %4
  br label %23

9:                                                ; preds = %4
  br i1 true, label %10, label %13

10:                                               ; preds = %9
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  br label %23

13:                                               ; preds = %9
  br i1 false, label %14, label %18

14:                                               ; preds = %13
  %15 = bitcast i8* %7 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = zext i16 %16 to i32
  br label %23

18:                                               ; preds = %13
  br i1 false, label %19, label %22

19:                                               ; preds = %18
  %20 = bitcast i8* %7 to i32*
  %21 = load i32, i32* %20, align 1
  br label %23

22:                                               ; preds = %18
  unreachable

23:                                               ; preds = %19, %14, %10, %8
  %24 = phi i32 [ 0, %8 ], [ %12, %10 ], [ %17, %14 ], [ %21, %19 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = sub i32 %24, 1
  %28 = shl i32 %27, 128
  %29 = select i1 true, i32 0, i32 %28
  %30 = bitcast i8* %6 to i128*
  %31 = load i128, i128* %30, align 1
  %32 = trunc i128 %31 to i32
  %33 = or i32 %32, %29
  %34 = add i32 1, %33
  br label %41

35:                                               ; preds = %23, %2
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  %36 = bitcast i8** %.curPointer._rawValue to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  %39 = sext i1 %38 to i32
  br label %41

40:                                               ; preds = %entry
  br label %41

41:                                               ; preds = %40, %35, %26
  %42 = phi i32 [ %39, %35 ], [ %34, %26 ], [ -1, %40 ]
  %43 = add i32 %42, 1
  ret i32 %43
}

; Function Attrs: nounwind
define internal void @"$s10BufferView0aB8IteratorVwst"(%swift.opaque* noalias %value, i32 %whichCase, i32 %numEmptyCases, %swift.type* %"BufferViewIterator<Element>") #14 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView0aB8IteratorV*
  %1 = bitcast %T10BufferView0aB8IteratorV* %0 to i8*
  %2 = getelementptr inbounds i8, i8* %1, i32 16
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %6

4:                                                ; preds = %entry
  %5 = sub i32 %numEmptyCases, 1
  br label %6

6:                                                ; preds = %4, %entry
  %7 = phi i32 [ 0, %entry ], [ 1, %4 ]
  %8 = icmp ule i32 %whichCase, 1
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  br label %24

12:                                               ; preds = %9
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i8 0, i8* %2, align 8
  br label %24

15:                                               ; preds = %12
  %16 = icmp eq i32 %7, 2
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast i8* %2 to i16*
  store i16 0, i16* %18, align 8
  br label %24

19:                                               ; preds = %15
  %20 = icmp eq i32 %7, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %2 to i32*
  store i32 0, i32* %22, align 8
  br label %24

23:                                               ; preds = %19
  unreachable

24:                                               ; preds = %21, %17, %14, %11
  %25 = icmp eq i32 %whichCase, 0
  br i1 %25, label %58, label %26

26:                                               ; preds = %24
  %27 = sub i32 %whichCase, 1
  %.curPointer = getelementptr inbounds %T10BufferView0aB8IteratorV, %T10BufferView0aB8IteratorV* %0, i32 0, i32 0
  %.curPointer._rawValue = getelementptr inbounds %TSV, %TSV* %.curPointer, i32 0, i32 0
  %28 = bitcast i8** %.curPointer._rawValue to i64*
  store i64 0, i64* %28, align 8
  br label %58

29:                                               ; preds = %6
  %30 = sub i32 %whichCase, 1
  %31 = sub i32 %30, 1
  br i1 true, label %36, label %32

32:                                               ; preds = %29
  %33 = lshr i32 %31, 128
  %34 = add i32 1, %33
  %35 = and i32 poison, %31
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i32 [ 1, %29 ], [ %34, %32 ]
  %38 = phi i32 [ %31, %29 ], [ %35, %32 ]
  %39 = zext i32 %38 to i128
  %40 = bitcast i8* %1 to i128*
  store i128 %39, i128* %40, align 8
  %41 = icmp eq i32 %7, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %57

43:                                               ; preds = %36
  %44 = icmp eq i32 %7, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = trunc i32 %37 to i8
  store i8 %46, i8* %2, align 8
  br label %57

47:                                               ; preds = %43
  %48 = icmp eq i32 %7, 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = trunc i32 %37 to i16
  %51 = bitcast i8* %2 to i16*
  store i16 %50, i16* %51, align 8
  br label %57

52:                                               ; preds = %47
  %53 = icmp eq i32 %7, 4
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast i8* %2 to i32*
  store i32 %37, i32* %55, align 8
  br label %57

56:                                               ; preds = %52
  unreachable

57:                                               ; preds = %54, %49, %45, %42
  br label %58

58:                                               ; preds = %57, %26, %24
  ret void
}

; Function Attrs: noinline nounwind readnone
define swiftcc %swift.metadata_response @"$s10BufferView0aB8IteratorVMa"(i64 %0, %swift.type* %1) #6 {
entry:
  %2 = bitcast %swift.type* %1 to i8*
  %3 = call swiftcc %swift.metadata_response @__swift_instantiateGenericMetadata(i64 %0, i8* %2, i8* undef, i8* undef, %swift.type_descriptor* bitcast (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8 }>* @"$s10BufferView0aB8IteratorVMn" to %swift.type_descriptor*)) #10
  %4 = extractvalue %swift.metadata_response %3, 0
  %5 = extractvalue %swift.metadata_response %3, 1
  %6 = insertvalue %swift.metadata_response undef, %swift.type* %4, 0
  %7 = insertvalue %swift.metadata_response %6, i64 %5, 1
  ret %swift.metadata_response %7
}

; Function Attrs: nounwind readonly
define internal i32 @"$s10BufferView09OutputRawA0Vwet"(%swift.opaque* noalias %value, i32 %numEmptyCases, %swift.type* %OutputRawBuffer) #15 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView09OutputRawA0V*
  %1 = icmp eq i32 0, %numEmptyCases
  br i1 %1, label %40, label %2

2:                                                ; preds = %entry
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %35

4:                                                ; preds = %2
  %5 = sub i32 %numEmptyCases, 1
  %6 = bitcast %T10BufferView09OutputRawA0V* %0 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i32 16
  br i1 false, label %8, label %9

8:                                                ; preds = %4
  br label %23

9:                                                ; preds = %4
  br i1 true, label %10, label %13

10:                                               ; preds = %9
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  br label %23

13:                                               ; preds = %9
  br i1 false, label %14, label %18

14:                                               ; preds = %13
  %15 = bitcast i8* %7 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = zext i16 %16 to i32
  br label %23

18:                                               ; preds = %13
  br i1 false, label %19, label %22

19:                                               ; preds = %18
  %20 = bitcast i8* %7 to i32*
  %21 = load i32, i32* %20, align 1
  br label %23

22:                                               ; preds = %18
  unreachable

23:                                               ; preds = %19, %14, %10, %8
  %24 = phi i32 [ 0, %8 ], [ %12, %10 ], [ %17, %14 ], [ %21, %19 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = sub i32 %24, 1
  %28 = shl i32 %27, 128
  %29 = select i1 true, i32 0, i32 %28
  %30 = bitcast i8* %6 to i128*
  %31 = load i128, i128* %30, align 1
  %32 = trunc i128 %31 to i32
  %33 = or i32 %32, %29
  %34 = add i32 1, %33
  br label %41

35:                                               ; preds = %23, %2
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %0, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  %36 = bitcast i8** %.baseAddress._rawValue to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  %39 = sext i1 %38 to i32
  br label %41

40:                                               ; preds = %entry
  br label %41

41:                                               ; preds = %40, %35, %26
  %42 = phi i32 [ %39, %35 ], [ %34, %26 ], [ -1, %40 ]
  %43 = add i32 %42, 1
  ret i32 %43
}

; Function Attrs: nounwind
define internal void @"$s10BufferView09OutputRawA0Vwst"(%swift.opaque* noalias %value, i32 %whichCase, i32 %numEmptyCases, %swift.type* %OutputRawBuffer) #14 {
entry:
  %0 = bitcast %swift.opaque* %value to %T10BufferView09OutputRawA0V*
  %1 = bitcast %T10BufferView09OutputRawA0V* %0 to i8*
  %2 = getelementptr inbounds i8, i8* %1, i32 16
  %3 = icmp ugt i32 %numEmptyCases, 1
  br i1 %3, label %4, label %6

4:                                                ; preds = %entry
  %5 = sub i32 %numEmptyCases, 1
  br label %6

6:                                                ; preds = %4, %entry
  %7 = phi i32 [ 0, %entry ], [ 1, %4 ]
  %8 = icmp ule i32 %whichCase, 1
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  br label %24

12:                                               ; preds = %9
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i8 0, i8* %2, align 8
  br label %24

15:                                               ; preds = %12
  %16 = icmp eq i32 %7, 2
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast i8* %2 to i16*
  store i16 0, i16* %18, align 8
  br label %24

19:                                               ; preds = %15
  %20 = icmp eq i32 %7, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %2 to i32*
  store i32 0, i32* %22, align 8
  br label %24

23:                                               ; preds = %19
  unreachable

24:                                               ; preds = %21, %17, %14, %11
  %25 = icmp eq i32 %whichCase, 0
  br i1 %25, label %58, label %26

26:                                               ; preds = %24
  %27 = sub i32 %whichCase, 1
  %.baseAddress = getelementptr inbounds %T10BufferView09OutputRawA0V, %T10BufferView09OutputRawA0V* %0, i32 0, i32 0
  %.baseAddress._rawValue = getelementptr inbounds %TSv, %TSv* %.baseAddress, i32 0, i32 0
  %28 = bitcast i8** %.baseAddress._rawValue to i64*
  store i64 0, i64* %28, align 8
  br label %58

29:                                               ; preds = %6
  %30 = sub i32 %whichCase, 1
  %31 = sub i32 %30, 1
  br i1 true, label %36, label %32

32:                                               ; preds = %29
  %33 = lshr i32 %31, 128
  %34 = add i32 1, %33
  %35 = and i32 poison, %31
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i32 [ 1, %29 ], [ %34, %32 ]
  %38 = phi i32 [ %31, %29 ], [ %35, %32 ]
  %39 = zext i32 %38 to i128
  %40 = bitcast i8* %1 to i128*
  store i128 %39, i128* %40, align 8
  %41 = icmp eq i32 %7, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %57

43:                                               ; preds = %36
  %44 = icmp eq i32 %7, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = trunc i32 %37 to i8
  store i8 %46, i8* %2, align 8
  br label %57

47:                                               ; preds = %43
  %48 = icmp eq i32 %7, 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = trunc i32 %37 to i16
  %51 = bitcast i8* %2 to i16*
  store i16 %50, i16* %51, align 8
  br label %57

52:                                               ; preds = %47
  %53 = icmp eq i32 %7, 4
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast i8* %2 to i32*
  store i32 %37, i32* %55, align 8
  br label %57

56:                                               ; preds = %52
  unreachable

57:                                               ; preds = %54, %49, %45, %42
  br label %58

58:                                               ; preds = %57, %26, %24
  ret void
}

; Function Attrs: noinline nounwind readnone
define swiftcc %swift.metadata_response @"$s10BufferView09OutputRawA0VMa"(i64 %0) #6 {
entry:
  ret %swift.metadata_response { %swift.type* bitcast (i64* getelementptr inbounds (<{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>, <{ i8*, i8**, i64, <{ i32, i32, i32, i32, i32, i32, i32 }>*, i32, i32 }>* @"$s10BufferView09OutputRawA0VMf", i32 0, i32 2) to %swift.type*), i64 0 }
}

declare swiftcc i1 @"$sSL2leoiySbx_xtFZTj"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type* swiftself, %swift.type*, i8**) #0

declare swiftcc %swift.metadata_response @"$sSNMa"(i64, %swift.type*, i8**) #0

declare swiftcc i1 @"$sSL1loiySbx_xtFZTj"(%swift.opaque* noalias nocapture, %swift.opaque* noalias nocapture, %swift.type* swiftself, %swift.type*, i8**) #0

declare swiftcc void @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGA2AVyxGxIsetWAnnYn_TC"(i8* noalias dereferenceable(32), i1) #0

declare swiftcc void @"$sSnyxGq_q0_lSLRzr1_ly10BufferView0aB5IndexVyxGAB07MutableaB0VyxGAHIsetWAnlYl_TC"(i8* noalias dereferenceable(32), i1) #0

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.6"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %"\CF\84_0_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.7"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %"\CF\84_0_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_TA.8"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %"\CF\84_0_0" = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  %11 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 4
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %12 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %11, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %13 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, i8* %12, i64 %13, %swift.type* %"\CF\84_0_0", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

declare swiftcc void @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxIsetWAnlYl_TC"(i8* noalias dereferenceable(32), i1) #0

declare swiftcc void @"$sxq_q0_lr1_ly10BufferView0aB5IndexVyxGAA07MutableaB0VyxGxIsetWAnnYn_TC"(i8* noalias dereferenceable(32), i1) #0

declare swiftcc %swift.metadata_response @"$sSRMa"(i64, %swift.type*) #0

define internal swiftcc void @"$sSv10storeBytes2of12toByteOffset2asyx_SixmtlFySPyxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %T = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSv, %TSv* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSv, %TSi }>* %4, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %9, i32 0, i32 0
  %10 = load i64, i64* %._value, align 8
  tail call swiftcc void @"$sSv10storeBytes2of12toByteOffset2asyx_SixmtlFySPyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i64 %10, %swift.type* %T, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_ySpyxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %4, i32 0, i32 1
  %6 = bitcast [24 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 1
  %"some Collection<Element>" = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds %swift.type*, %swift.type** %6, i32 2
  %9 = bitcast %swift.type** %8 to i8***
  %"some Collection<Element>.Collection" = load i8**, i8*** %9, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSP, %TSP* %10, i32 0, i32 0
  %11 = load i8*, i8** %._rawValue, align 8
  %12 = getelementptr inbounds <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>, <{ %swift.refcounted, [24 x i8], %TSP, %TSR.26 }>* %4, i32 0, i32 3
  %._position = getelementptr inbounds %TSR.26, %TSR.26* %12, i32 0, i32 0
  %13 = bitcast %TSq.27* %._position to i64*
  %14 = load i64, i64* %13, align 8
  %.count = getelementptr inbounds %TSR.26, %TSR.26* %12, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %15 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V6update14fromContentsOfAA0aB5IndexVyxGqd___t7ElementQyd__RszSlRd__lFSiSRyxGXEfU_ySpyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %11, i64 %14, i64 %15, %swift.type* %Element, %swift.type* %"some Collection<Element>", i8** %"some Collection<Element>.Collection", %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_ySPyxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, %swift.refcounted* swiftself %2, %swift.error** noalias nocapture swifterror dereferenceable(8) %3) #0 {
entry:
  %4 = bitcast %swift.refcounted* %2 to <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>*
  %5 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %swift.type**
  %Element = load %swift.type*, %swift.type** %6, align 8
  %7 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSp, %TSp* %7, i32 0, i32 0
  %8 = load i8*, i8** %._rawValue, align 8
  %9 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>, <{ %swift.refcounted, [8 x i8], %TSp, %T10BufferView07MutableaB0V }>* %4, i32 0, i32 3
  %.start = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %9, i32 0, i32 0
  %.start._rawValue = getelementptr inbounds %T10BufferView0aB5IndexV, %T10BufferView0aB5IndexV* %.start, i32 0, i32 0
  %.start._rawValue._rawValue = getelementptr inbounds %TSV, %TSV* %.start._rawValue, i32 0, i32 0
  %10 = load i8*, i8** %.start._rawValue._rawValue, align 8
  %.count = getelementptr inbounds %T10BufferView07MutableaB0V, %T10BufferView07MutableaB0V* %9, i32 0, i32 1
  %.count._value = getelementptr inbounds %TSi, %TSi* %.count, i32 0, i32 0
  %11 = load i64, i64* %.count._value, align 8
  tail call swiftcc void @"$s10BufferView07MutableaB0V9uncheckedACyxGSnyAA0aB5IndexVyxGG_tcisySpyxGXEfU_ySPyxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i8* %1, i8* %8, i8* %10, i64 %11, %swift.type* %Element, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %3)
  ret void
}

define internal swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlFxSryxGXEfU_TA"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i64 %2, %swift.refcounted* swiftself %3, %swift.error** noalias nocapture swifterror dereferenceable(8) %4) #0 {
entry:
  %5 = bitcast %swift.refcounted* %3 to <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>*
  %6 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %5, i32 0, i32 1
  %7 = bitcast [8 x i8]* %6 to %swift.type**
  %T = load %swift.type*, %swift.type** %7, align 8
  %8 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %5, i32 0, i32 2
  %._rawValue = getelementptr inbounds %TSV, %TSV* %8, i32 0, i32 0
  %9 = load i8*, i8** %._rawValue, align 8
  %10 = getelementptr inbounds <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>, <{ %swift.refcounted, [8 x i8], %TSV, %TSi }>* %5, i32 0, i32 3
  %._value = getelementptr inbounds %TSi, %TSi* %10, i32 0, i32 0
  %11 = load i64, i64* %._value, align 8
  tail call swiftcc void @"$sSV13loadUnaligned14fromByteOffset2asxSi_xmtlFxSryxGXEfU_"(%swift.opaque* noalias nocapture sret(%swift.opaque) %0, i64 %1, i64 %2, i8* %9, i64 %11, %swift.type* %T, %swift.refcounted* swiftself undef, %swift.error** noalias nocapture swifterror dereferenceable(8) %4)
  ret void
}

; Function Attrs: convergent nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.is.constant.i64(i64) #16

; Function Attrs: nounwind
declare swiftcc void @swift_willThrow(i8* swiftself, %swift.error** swifterror) #9

; Function Attrs: nounwind
declare void @swift_errorRelease(%swift.error*) #9

; Function Attrs: optsize
declare extern_weak zeroext i1 @swift_stdlib_isStackAllocationSafe(i64 noundef, i64 noundef) #17

; Function Attrs: nounwind
declare i8* @swift_slowAlloc(i64, i64) #9

; Function Attrs: nounwind
declare void @swift_slowDealloc(i8*, i64, i64) #9

; Function Attrs: noinline nounwind readonly willreturn
define linkonce_odr hidden swiftcc %swift.metadata_response @__swift_instantiateGenericMetadata(i64 %0, i8* %1, i8* %2, i8* %3, %swift.type_descriptor* %4) #18 {
entry:
  %generic.arguments = alloca [3 x i8*], align 8
  %5 = bitcast [3 x i8*]* %generic.arguments to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %generic.arguments, i32 0, i32 0
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %generic.arguments, i32 0, i32 1
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds [3 x i8*], [3 x i8*]* %generic.arguments, i32 0, i32 2
  store i8* %3, i8** %8, align 8
  %9 = bitcast [3 x i8*]* %generic.arguments to i8*
  %10 = call swiftcc %swift.metadata_response @swift_getGenericMetadata(i64 %0, i8* %9, %swift.type_descriptor* %4) #8
  ret %swift.metadata_response %10
}

; Function Attrs: nounwind readonly
declare swiftcc %swift.metadata_response @swift_getGenericMetadata(i64, i8*, %swift.type_descriptor*) #8

attributes #0 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #1 = { noinline "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #2 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #6 = { noinline nounwind readnone "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #7 = { nounwind readonly willreturn }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { argmemonly nocallback nofree nounwind willreturn }
attributes #13 = { nounwind readnone willreturn }
attributes #14 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #15 = { nounwind readonly "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #16 = { convergent nocallback nofree nosync nounwind readnone willreturn }
attributes #17 = { optsize "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #18 = { noinline nounwind readonly willreturn "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #19 = { noinline }
attributes #20 = { inaccessiblemem_or_argmemonly nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11}
!swift.module.flags = !{!12}
!llvm.linker.options = !{!13, !14, !15, !16}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 14, i32 0]}
!1 = !{i32 1, !"Objective-C Version", i32 2}
!2 = !{i32 1, !"Objective-C Image Info Version", i32 0}
!3 = !{i32 1, !"Objective-C Image Info Section", !"__DATA,__objc_imageinfo,regular,no_dead_strip"}
!4 = !{i32 4, !"Objective-C Garbage Collection", i32 84477696}
!5 = !{i32 1, !"Objective-C Class Properties", i32 64}
!6 = !{i32 1, !"Objective-C Enforce ClassRO Pointer Signing", i8 0}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 8, !"PIC Level", i32 2}
!9 = !{i32 7, !"uwtable", i32 1}
!10 = !{i32 7, !"frame-pointer", i32 1}
!11 = !{i32 1, !"Swift Version", i32 7}
!12 = !{!"standard-library", i1 false}
!13 = !{!"-lswift_Concurrency"}
!14 = !{!"-lswiftCore"}
!15 = !{!"-lswift_StringProcessing"}
!16 = !{!"-lobjc"}
!17 = !{}
!18 = !{i64 88}
